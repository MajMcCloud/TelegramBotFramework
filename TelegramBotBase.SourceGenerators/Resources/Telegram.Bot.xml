<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telegram.Bot</name>
    </assembly>
    <members>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
            <remarks>
                This definition is provided by the <i>IsExternalInit</i> NuGet package (https://www.nuget.org/packages/IsExternalInit).
                Please see https://github.com/manuelroemer/IsExternalInit for more information.
            </remarks>
        </member>
        <member name="T:Telegram.Bot.Args.ApiRequestEventArgs">
            <summary>Provides data for MakingApiRequest event</summary>
            <param name="request"></param>
            <param name="httpRequestMessage"></param>
        </member>
        <member name="M:Telegram.Bot.Args.ApiRequestEventArgs.#ctor(Telegram.Bot.Requests.Abstractions.IRequest,System.Net.Http.HttpRequestMessage)">
            <summary>Provides data for MakingApiRequest event</summary>
            <param name="request"></param>
            <param name="httpRequestMessage"></param>
        </member>
        <member name="P:Telegram.Bot.Args.ApiRequestEventArgs.Request">
            <summary>Bot API Request</summary>
        </member>
        <member name="P:Telegram.Bot.Args.ApiRequestEventArgs.HttpRequestMessage">
            <summary>HTTP Request Message</summary>
        </member>
        <member name="T:Telegram.Bot.Args.ApiResponseEventArgs">
            <summary>Provides data for ApiResponseReceived event</summary>
            <param name="responseMessage">HTTP response received from API</param>
            <param name="apiRequestEventArgs">Event arguments of this request</param>
        </member>
        <member name="M:Telegram.Bot.Args.ApiResponseEventArgs.#ctor(System.Net.Http.HttpResponseMessage,Telegram.Bot.Args.ApiRequestEventArgs)">
            <summary>Provides data for ApiResponseReceived event</summary>
            <param name="responseMessage">HTTP response received from API</param>
            <param name="apiRequestEventArgs">Event arguments of this request</param>
        </member>
        <member name="P:Telegram.Bot.Args.ApiResponseEventArgs.ResponseMessage">
            <summary>HTTP response received from API</summary>
        </member>
        <member name="P:Telegram.Bot.Args.ApiResponseEventArgs.ApiRequestEventArgs">
            <summary>Event arguments of this request</summary>
        </member>
        <member name="T:Telegram.Bot.Exceptions.ApiRequestException">
            <summary>Represents an API error</summary>
        </member>
        <member name="P:Telegram.Bot.Exceptions.ApiRequestException.ErrorCode">
            <summary>Gets the error code.</summary>
        </member>
        <member name="P:Telegram.Bot.Exceptions.ApiRequestException.Parameters">
            <summary>Contains information about why a request was unsuccessful.</summary>
        </member>
        <member name="M:Telegram.Bot.Exceptions.ApiRequestException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/> class.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.ApiRequestException.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.ApiRequestException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/> class.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.ApiRequestException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="errorCode">The error code.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.ApiRequestException.#ctor(System.String,System.Int32,Telegram.Bot.Types.ResponseParameters)">
            <summary>Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/> class</summary>
            <param name="message">The message</param>
            <param name="errorCode">The error code</param>
            <param name="parameters">Response parameters</param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.ApiRequestException.#ctor(System.String,System.Int32,Telegram.Bot.Types.ResponseParameters,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/> class</summary>
            <param name="message">The message</param>
            <param name="errorCode">The error code</param>
            <param name="parameters">Response parameters</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.ApiRequestException.ToString">
            <inheritdoc/>>
        </member>
        <member name="T:Telegram.Bot.Exceptions.IExceptionParser">
            <summary>Parses unsuccessful responses from Telegram Bot API to make specific exceptions</summary>
        </member>
        <member name="M:Telegram.Bot.Exceptions.IExceptionParser.Parse(Telegram.Bot.Exceptions.ApiResponse)">
            <summary>Parses HTTP response and constructs a specific exception out of it</summary>
            <param name="apiResponse">ApiResponse with an error</param>
        </member>
        <member name="T:Telegram.Bot.Exceptions.DefaultExceptionParser">
            <summary>Default implementation of <see cref="T:Telegram.Bot.Exceptions.IExceptionParser"/> that always returns <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/></summary>
        </member>
        <member name="M:Telegram.Bot.Exceptions.DefaultExceptionParser.Parse(Telegram.Bot.Exceptions.ApiResponse)">
            <inheritdoc/>
        </member>
        <member name="T:Telegram.Bot.Exceptions.RequestException">
            <summary>Represents a request error</summary>
        </member>
        <member name="P:Telegram.Bot.Exceptions.RequestException.HttpStatusCode">
            <summary><see cref="P:Telegram.Bot.Exceptions.RequestException.HttpStatusCode"/> of the received response</summary>
        </member>
        <member name="M:Telegram.Bot.Exceptions.RequestException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.RequestException"/> class.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.RequestException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.RequestException"/> class.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.RequestException.#ctor(System.String,System.Net.HttpStatusCode)">
            <summary>Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.RequestException"/> class.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="httpStatusCode"><see cref="P:Telegram.Bot.Exceptions.RequestException.HttpStatusCode"/> of the received response</param>
        </member>
        <member name="M:Telegram.Bot.Exceptions.RequestException.#ctor(System.String,System.Net.HttpStatusCode,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Telegram.Bot.Exceptions.RequestException"/> class.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="httpStatusCode"><see cref="P:Telegram.Bot.Exceptions.RequestException.HttpStatusCode"/> of the received response</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Telegram.Bot.Exceptions.ApiResponse">
            <summary>Represents a Bot API response</summary>
        </member>
        <member name="P:Telegram.Bot.Exceptions.ApiResponse.Ok">
            <summary>Gets a value indicating whether the request was successful.</summary>
        </member>
        <member name="P:Telegram.Bot.Exceptions.ApiResponse.Description">
            <summary>Gets the error message.</summary>
        </member>
        <member name="P:Telegram.Bot.Exceptions.ApiResponse.ErrorCode">
            <summary>Gets the error code.</summary>
        </member>
        <member name="P:Telegram.Bot.Exceptions.ApiResponse.Parameters">
            <summary>Contains information about why a request was unsuccessful.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Message">
            <summary>This object represents a message.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.MessageId">
            <summary>Same as <see cref="P:Telegram.Bot.Types.Message.Id"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardFrom">
            <summary><em>Optional</em>. For forwarded messages, sender of the original message</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardFromChat">
            <summary><em>Optional</em>. For messages forwarded from channels or from anonymous administrators, information about the original sender chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardFromMessageId">
            <summary><em>Optional</em>. For messages forwarded from channels, identifier of the original message in the channel</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardSignature">
            <summary><em>Optional</em>. For messages forwarded from channels, signature of the post author if present</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardSenderName">
            <summary><em>Optional</em>. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardDate">
            <summary><em>Optional</em>. For forwarded messages, date the original message was sent</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.EntityValues">
            <summary>Gets the entity values.</summary>
            <value>The texts covered by each entity.</value>
        </member>
        <member name="P:Telegram.Bot.Types.Message.CaptionEntityValues">
            <summary>Gets the caption entity values.</summary>
            <value>The caption texts covered by each entity.</value>
        </member>
        <member name="M:Telegram.Bot.Types.Message.MessageLink">
            <summary>Returns the <a href="t.me">t.me</a> link to this message, or null if the message was not in a Supergroup or Channel</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Id">
            <summary>Unique message identifier inside this chat. In specific instances (e.g., message containing a video sent to a big chat), the server might automatically schedule a message instead of sending it immediately. In such cases, this field will be 0 and the relevant message will be unusable until it is actually sent</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.MessageThreadId">
            <summary><em>Optional</em>. Unique identifier of a message thread to which the message belongs; for supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.From">
            <summary><em>Optional</em>. Sender of the message; may be empty for messages sent to channels. For backward compatibility, if the message was sent on behalf of a chat, the field contains a fake sender user in non-channel chats</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.SenderChat">
            <summary><em>Optional</em>. Sender of the message when sent on behalf of a chat. For example, the supergroup itself for messages sent by its anonymous administrators or a linked channel for messages automatically forwarded to the channel's discussion group. For backward compatibility, if the message was sent on behalf of a chat, the field <see cref="P:Telegram.Bot.Types.Message.From">From</see> contains a fake sender user in non-channel chats.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.SenderBoostCount">
            <summary><em>Optional</em>. If the sender of the message boosted the chat, the number of boosts added by the user</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.SenderBusinessBot">
            <summary><em>Optional</em>. The bot that actually sent the message on behalf of the business account. Available only for outgoing messages sent on behalf of the connected business account.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Date">
            <summary>Date the message was sent. It is always a valid date.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.BusinessConnectionId">
            <summary><em>Optional</em>. Unique identifier of the business connection from which the message was received. If non-empty, the message belongs to a chat of the corresponding business account that is independent from any potential bot chat which might share the same identifier.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Chat">
            <summary>Chat the message belongs to</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardOrigin">
            <summary><em>Optional</em>. Information about the original message for forwarded messages</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.IsTopicMessage">
            <summary><em>Optional</em>. <see langword="true"/>, if the message is sent to a forum topic</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.IsAutomaticForward">
            <summary><em>Optional</em>. <see langword="true"/>, if the message is a channel post that was automatically forwarded to the connected discussion group</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ReplyToMessage">
            <summary><em>Optional</em>. For replies in the same chat and message thread, the original message. Note that the Message object in this field will not contain further <see cref="P:Telegram.Bot.Types.Message.ReplyToMessage">ReplyToMessage</see> fields even if it itself is a reply.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ExternalReply">
            <summary><em>Optional</em>. Information about the message that is being replied to, which may come from another chat or forum topic</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Quote">
            <summary><em>Optional</em>. For replies that quote part of the original message, the quoted part of the message</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ReplyToStory">
            <summary><em>Optional</em>. For replies to a story, the original story</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ViaBot">
            <summary><em>Optional</em>. Bot through which the message was sent</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.EditDate">
            <summary><em>Optional</em>. Date the message was last edited</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.HasProtectedContent">
            <summary><em>Optional</em>. <see langword="true"/>, if the message can't be forwarded</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.IsFromOffline">
            <summary><em>Optional</em>. <see langword="true"/>, if the message was sent by an implicit action, for example, as an away or a greeting business message, or as a scheduled message</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.MediaGroupId">
            <summary><em>Optional</em>. The unique identifier of a media message group this message belongs to</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.AuthorSignature">
            <summary><em>Optional</em>. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Text">
            <summary><em>Optional</em>. For text messages, the actual text of the message</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Entities">
            <summary><em>Optional</em>. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.LinkPreviewOptions">
            <summary><em>Optional</em>. Options used for link preview generation for the message, if it is a text message and link preview options were changed</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.EffectId">
            <summary><em>Optional</em>. Unique identifier of the message effect added to the message</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Animation">
            <summary><em>Optional</em>. Message is an animation, information about the animation. For backward compatibility, when this field is set, the <see cref="P:Telegram.Bot.Types.Message.Document">Document</see> field will also be set</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Audio">
            <summary><em>Optional</em>. Message is an audio file, information about the file</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Document">
            <summary><em>Optional</em>. Message is a general file, information about the file</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.PaidMedia">
            <summary><em>Optional</em>. Message contains paid media; information about the paid media</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Photo">
            <summary><em>Optional</em>. Message is a photo, available sizes of the photo</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Sticker">
            <summary><em>Optional</em>. Message is a sticker, information about the sticker</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Story">
            <summary><em>Optional</em>. Message is a forwarded story</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Video">
            <summary><em>Optional</em>. Message is a video, information about the video</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.VideoNote">
            <summary><em>Optional</em>. Message is a <a href="https://telegram.org/blog/video-messages-and-telescope">video note</a>, information about the video message</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Voice">
            <summary><em>Optional</em>. Message is a voice message, information about the file</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Caption">
            <summary><em>Optional</em>. Caption for the animation, audio, document, paid media, photo, video or voice</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.CaptionEntities">
            <summary><em>Optional</em>. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ShowCaptionAboveMedia">
            <summary><em>Optional</em>. <see langword="true"/>, if the caption must be shown above the message media</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.HasMediaSpoiler">
            <summary><em>Optional</em>. <see langword="true"/>, if the message media is covered by a spoiler animation</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Contact">
            <summary><em>Optional</em>. Message is a shared contact, information about the contact</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Dice">
            <summary><em>Optional</em>. Message is a dice with random value</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Game">
            <summary><em>Optional</em>. Message is a game, information about the game. <a href="https://core.telegram.org/bots/api#games">More about games »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Poll">
            <summary><em>Optional</em>. Message is a native poll, information about the poll</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Venue">
            <summary><em>Optional</em>. Message is a venue, information about the venue. For backward compatibility, when this field is set, the <see cref="P:Telegram.Bot.Types.Message.Location">Location</see> field will also be set</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Location">
            <summary><em>Optional</em>. Message is a shared location, information about the location</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.NewChatMembers">
            <summary><em>Optional</em>. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.LeftChatMember">
            <summary><em>Optional</em>. A member was removed from the group, information about them (this member may be the bot itself)</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.NewChatTitle">
            <summary><em>Optional</em>. A chat title was changed to this value</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.NewChatPhoto">
            <summary><em>Optional</em>. A chat photo was change to this value</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.DeleteChatPhoto">
            <summary><em>Optional</em>. Service message: the chat photo was deleted</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.GroupChatCreated">
            <summary><em>Optional</em>. Service message: the group has been created</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.SupergroupChatCreated">
            <summary><em>Optional</em>. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in <see cref="P:Telegram.Bot.Types.Message.ReplyToMessage">ReplyToMessage</see> if someone replies to a very first message in a directly created supergroup.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ChannelChatCreated">
            <summary><em>Optional</em>. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in <see cref="P:Telegram.Bot.Types.Message.ReplyToMessage">ReplyToMessage</see> if someone replies to a very first message in a channel.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.MessageAutoDeleteTimerChanged">
            <summary><em>Optional</em>. Service message: auto-delete timer settings changed in the chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.MigrateToChatId">
            <summary><em>Optional</em>. The group has been migrated to a supergroup with the specified identifier.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.MigrateFromChatId">
            <summary><em>Optional</em>. The supergroup has been migrated from a group with the specified identifier.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.PinnedMessage">
            <summary><em>Optional</em>. Specified message was pinned. Note that the Message object in this field will not contain further <see cref="P:Telegram.Bot.Types.Message.ReplyToMessage">ReplyToMessage</see> fields even if it itself is a reply.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Invoice">
            <summary><em>Optional</em>. Message is an invoice for a <a href="https://core.telegram.org/bots/api#payments">payment</a>, information about the invoice. <a href="https://core.telegram.org/bots/api#payments">More about payments »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.SuccessfulPayment">
            <summary><em>Optional</em>. Message is a service message about a successful payment, information about the payment. <a href="https://core.telegram.org/bots/api#payments">More about payments »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.RefundedPayment">
            <summary><em>Optional</em>. Message is a service message about a refunded payment, information about the payment. <a href="https://core.telegram.org/bots/api#payments">More about payments »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.UsersShared">
            <summary><em>Optional</em>. Service message: users were shared with the bot</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ChatShared">
            <summary><em>Optional</em>. Service message: a chat was shared with the bot</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ConnectedWebsite">
            <summary><em>Optional</em>. The domain name of the website on which the user has logged in. <a href="https://core.telegram.org/widgets/login">More about Telegram Login »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.WriteAccessAllowed">
            <summary><em>Optional</em>. Service message: the user allowed the bot to write messages after adding it to the attachment or side menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method <a href="https://core.telegram.org/bots/webapps#initializing-mini-apps">requestWriteAccess</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.PassportData">
            <summary><em>Optional</em>. Telegram Passport data</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ProximityAlertTriggered">
            <summary><em>Optional</em>. Service message. A user in the chat triggered another user's proximity alert while sharing Live Location.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.BoostAdded">
            <summary><em>Optional</em>. Service message: user boosted the chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ChatBackgroundSet">
            <summary><em>Optional</em>. Service message: chat background set</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForumTopicCreated">
            <summary><em>Optional</em>. Service message: forum topic created</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForumTopicEdited">
            <summary><em>Optional</em>. Service message: forum topic edited</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForumTopicClosed">
            <summary><em>Optional</em>. Service message: forum topic closed</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForumTopicReopened">
            <summary><em>Optional</em>. Service message: forum topic reopened</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.GeneralForumTopicHidden">
            <summary><em>Optional</em>. Service message: the 'General' forum topic hidden</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.GeneralForumTopicUnhidden">
            <summary><em>Optional</em>. Service message: the 'General' forum topic unhidden</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.GiveawayCreated">
            <summary><em>Optional</em>. Service message: a scheduled giveaway was created</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Giveaway">
            <summary><em>Optional</em>. The message is a scheduled giveaway message</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.GiveawayWinners">
            <summary><em>Optional</em>. A giveaway with public winners was completed</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.GiveawayCompleted">
            <summary><em>Optional</em>. Service message: a giveaway without public winners was completed</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.VideoChatScheduled">
            <summary><em>Optional</em>. Service message: video chat scheduled</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.VideoChatStarted">
            <summary><em>Optional</em>. Service message: video chat started</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.VideoChatEnded">
            <summary><em>Optional</em>. Service message: video chat ended</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.VideoChatParticipantsInvited">
            <summary><em>Optional</em>. Service message: new participants invited to a video chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.WebAppData">
            <summary><em>Optional</em>. Service message: data sent by a Web App</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ReplyMarkup">
            <summary><em>Optional</em>. Inline keyboard attached to the message. <c>LoginUrl</c> buttons are represented as ordinary <c>url</c> buttons.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Type">
            <summary>Gets the <see cref="T:Telegram.Bot.Types.Enums.MessageType">type</see> of the <see cref="T:Telegram.Bot.Types.Message"/></summary>
            <value>The <see cref="T:Telegram.Bot.Types.Enums.MessageType">type</see> of the <see cref="T:Telegram.Bot.Types.Message"/></value>
        </member>
        <member name="T:Telegram.Bot.Types.Chat">
            <summary>This object represents a chat.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.Chat.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Id">
            <summary>Unique identifier for this chat.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Type">
            <summary>Type of the chat, can be either <see cref="F:Telegram.Bot.Types.Enums.ChatType.Private">Private</see>, <see cref="F:Telegram.Bot.Types.Enums.ChatType.Group">Group</see>, <see cref="F:Telegram.Bot.Types.Enums.ChatType.Supergroup">Supergroup</see> or <see cref="F:Telegram.Bot.Types.Enums.ChatType.Channel">Channel</see></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Title">
            <summary><em>Optional</em>. Title, for supergroups, channels and group chats</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Username">
            <summary><em>Optional</em>. Username, for private chats, supergroups and channels if available</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.FirstName">
            <summary><em>Optional</em>. First name of the other party in a private chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.LastName">
            <summary><em>Optional</em>. Last name of the other party in a private chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.IsForum">
            <summary><em>Optional</em>. <see langword="true"/>, if the supergroup chat is a forum (has <a href="https://telegram.org/blog/topics-in-groups-collectible-usernames#topics-in-groups">topics</a> enabled)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.User">
            <summary>This object represents a Telegram user or bot.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.User.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.Types.User.Id">
            <summary>Unique identifier for this user or bot.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.IsBot">
            <summary><see langword="true"/>, if this user is a bot</summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.FirstName">
            <summary>User's or bot's first name</summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.LastName">
            <summary><em>Optional</em>. User's or bot's last name</summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.Username">
            <summary><em>Optional</em>. User's or bot's username</summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.LanguageCode">
            <summary><em>Optional</em>. <a href="https://en.wikipedia.org/wiki/IETF_language_tag">IETF language tag</a> of the user's language</summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.IsPremium">
            <summary><em>Optional</em>. <see langword="true"/>, if this user is a Telegram Premium user</summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.AddedToAttachmentMenu">
            <summary><em>Optional</em>. <see langword="true"/>, if this user added the bot to the attachment menu</summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.CanJoinGroups">
            <summary><em>Optional</em>. <see langword="true"/>, if the bot can be invited to groups. Returned only in <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetMe(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">GetMe</see>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.CanReadAllGroupMessages">
            <summary><em>Optional</em>. <see langword="true"/>, if <a href="https://core.telegram.org/bots/features#privacy-mode">privacy mode</a> is disabled for the bot. Returned only in <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetMe(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">GetMe</see>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.SupportsInlineQueries">
            <summary><em>Optional</em>. <see langword="true"/>, if the bot supports inline queries. Returned only in <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetMe(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">GetMe</see>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.CanConnectToBusiness">
            <summary><em>Optional</em>. <see langword="true"/>, if the bot can be connected to a Telegram Business account to receive its messages. Returned only in <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetMe(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">GetMe</see>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.HasMainWebApp">
            <summary><em>Optional</em>. <see langword="true"/>, if the bot has a main Web App. Returned only in <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetMe(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">GetMe</see>.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyParameters">
            <summary>Describes reply parameters for the message that is being sent.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyParameters.op_Implicit(System.Int32)~Telegram.Bot.Types.ReplyParameters">
            <summary>Implicit operator when you just want to reply to a message in same chat</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyParameters.op_Implicit(Telegram.Bot.Types.Message)~Telegram.Bot.Types.ReplyParameters">
            <summary>Implicit operator when you just want to reply to a message</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyParameters.MessageId">
            <summary>Identifier of the message that will be replied to in the current chat, or in the chat <see cref="P:Telegram.Bot.Types.ReplyParameters.ChatId">ChatId</see> if it is specified</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyParameters.ChatId">
            <summary><em>Optional</em>. If the message to be replied to is from a different chat, unique identifier for the chat or username of the channel (in the format <c>@channelusername</c>). Not supported for messages sent on behalf of a business account.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyParameters.AllowSendingWithoutReply">
            <summary><em>Optional</em>. Pass <see langword="true"/> if the message should be sent even if the specified message to be replied to is not found. Always <see langword="false"/> for replies in another chat or forum topic. Always <see langword="true"/> for messages sent on behalf of a business account.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyParameters.Quote">
            <summary><em>Optional</em>. Quoted part of the message to be replied to; 0-1024 characters after entities parsing. The quote must be an exact substring of the message to be replied to, including <em>bold</em>, <em>italic</em>, <em>underline</em>, <em>strikethrough</em>, <em>spoiler</em>, and <em>CustomEmoji</em> entities. The message will fail to send if the quote isn't found in the original message.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyParameters.QuoteParseMode">
            <summary><em>Optional</em>. Mode for parsing entities in the quote. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyParameters.QuoteEntities">
            <summary><em>Optional</em>. A list of special entities that appear in the quote. It can be specified instead of <see cref="P:Telegram.Bot.Types.ReplyParameters.QuoteParseMode">QuoteParseMode</see>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyParameters.QuotePosition">
            <summary><em>Optional</em>. Position of the quote in the original message in UTF-16 code units</summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageId">
            <summary>This object represents a unique message identifier.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.MessageId.op_Implicit(Telegram.Bot.Types.Message)~Telegram.Bot.Types.MessageId">
            <summary>Implicit operator from Message</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageId.Id">
            <summary>Unique message identifier. In specific instances (e.g., message containing a video sent to a big chat), the server might automatically schedule a message instead of sending it immediately. In such cases, this field will be 0 and the relevant message will be unusable until it is actually sent</summary>
        </member>
        <member name="M:Telegram.Bot.Types.MessageId.op_Implicit(Telegram.Bot.Types.MessageId)~System.Int32">
            <summary>Implicit conversion to int (Id)</summary>
        </member>
        <member name="M:Telegram.Bot.Types.MessageId.op_Implicit(System.Int32)~Telegram.Bot.Types.MessageId">
            <summary>Implicit conversion from int (Id)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReactionType">
            <summary>This object describes the type of a reaction. Currently, it can be one of<br/><see cref="T:Telegram.Bot.Types.ReactionTypeEmoji"/>, <see cref="T:Telegram.Bot.Types.ReactionTypeCustomEmoji"/>, <see cref="T:Telegram.Bot.Types.ReactionTypePaid"/></summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReactionType.op_Implicit(System.String)~Telegram.Bot.Types.ReactionType">
            <summary>Implicit operator ReactionTypeEmoji from string</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReactionType.op_Implicit(System.Int64)~Telegram.Bot.Types.ReactionType">
            <summary>Implicit operator ReactionTypeCustomEmoji from long customEmojiId</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReactionType.Type">
            <summary>Type of the reaction</summary>
        </member>
        <member name="T:Telegram.Bot.Types.LinkPreviewOptions">
            <summary>Describes the options used for link preview generation.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.LinkPreviewOptions.op_Implicit(System.Boolean)~Telegram.Bot.Types.LinkPreviewOptions">
            <summary>To get the same behaviour as previous parameter <c>disableWebPagePreview:</c></summary>
        </member>
        <member name="P:Telegram.Bot.Types.LinkPreviewOptions.IsDisabled">
            <summary><em>Optional</em>. <see langword="true"/>, if the link preview is disabled</summary>
        </member>
        <member name="P:Telegram.Bot.Types.LinkPreviewOptions.Url">
            <summary><em>Optional</em>. URL to use for the link preview. If empty, then the first URL found in the message text will be used</summary>
        </member>
        <member name="P:Telegram.Bot.Types.LinkPreviewOptions.PreferSmallMedia">
            <summary><em>Optional</em>. <see langword="true"/>, if the media in the link preview is supposed to be shrunk; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview</summary>
        </member>
        <member name="P:Telegram.Bot.Types.LinkPreviewOptions.PreferLargeMedia">
            <summary><em>Optional</em>. <see langword="true"/>, if the media in the link preview is supposed to be enlarged; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview</summary>
        </member>
        <member name="P:Telegram.Bot.Types.LinkPreviewOptions.ShowAboveText">
            <summary><em>Optional</em>. <see langword="true"/>, if the link preview must be shown above the message text; otherwise, the link preview will be shown below the message text</summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputPollOption">
            <summary>This object contains information about one answer option in a poll to be sent.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputPollOption.op_Implicit(System.String)~Telegram.Bot.Types.InputPollOption">
            <summary>Implicit operator for compatibility</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputPollOption.Text">
            <summary>Option text, 1-100 characters</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputPollOption.TextParseMode">
            <summary><em>Optional</em>. Mode for parsing entities in the text. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details. Currently, only custom emoji entities are allowed</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputPollOption.TextEntities">
            <summary><em>Optional</em>. A list of special entities that appear in the poll option text. It can be specified instead of <see cref="P:Telegram.Bot.Types.InputPollOption.TextParseMode">TextParseMode</see></summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputPollOption.#ctor(System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InputPollOption"/></summary>
            <param name="text">Option text, 1-100 characters</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputPollOption.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InputPollOption"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScope">
            <summary>This object represents the scope to which bot commands are applied. Currently, the following 7 scopes are supported:<br/><see cref="T:Telegram.Bot.Types.BotCommandScopeDefault"/>, <see cref="T:Telegram.Bot.Types.BotCommandScopeAllPrivateChats"/>, <see cref="T:Telegram.Bot.Types.BotCommandScopeAllGroupChats"/>, <see cref="T:Telegram.Bot.Types.BotCommandScopeAllChatAdministrators"/>, <see cref="T:Telegram.Bot.Types.BotCommandScopeChat"/>, <see cref="T:Telegram.Bot.Types.BotCommandScopeChatAdministrators"/>, <see cref="T:Telegram.Bot.Types.BotCommandScopeChatMember"/></summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.Default">
            <summary>Create a default <see cref="T:Telegram.Bot.Types.BotCommandScope"/> instance</summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.AllPrivateChats">
            <summary>Create a <see cref="T:Telegram.Bot.Types.BotCommandScope"/> instance for all private chats</summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.AllGroupChats">
            <summary>Create a <see cref="T:Telegram.Bot.Types.BotCommandScope"/> instance for all group chats</summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.AllChatAdministrators">
            <summary>Create a <see cref="T:Telegram.Bot.Types.BotCommandScope"/> instance for all chat administrators</summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.Chat(Telegram.Bot.Types.ChatId)">
            <summary>Create a <see cref="T:Telegram.Bot.Types.BotCommandScope"/> instance for a specific <see cref="M:Telegram.Bot.Types.BotCommandScope.Chat(Telegram.Bot.Types.ChatId)"/></summary>
            <param name="chatId">Unique identifier for the target <see cref="M:Telegram.Bot.Types.BotCommandScope.Chat(Telegram.Bot.Types.ChatId)"/> or username of the target supergroup</param>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.ChatAdministrators(Telegram.Bot.Types.ChatId)">
            <summary>Create a <see cref="T:Telegram.Bot.Types.BotCommandScope"/> instance for a specific member in a specific <see cref="M:Telegram.Bot.Types.BotCommandScope.Chat(Telegram.Bot.Types.ChatId)"/></summary>
            <param name="chatId">Unique identifier for the target <see cref="M:Telegram.Bot.Types.BotCommandScope.Chat(Telegram.Bot.Types.ChatId)"/> or username of the target supergroup</param>
        </member>
        <member name="M:Telegram.Bot.Types.BotCommandScope.ChatMember(Telegram.Bot.Types.ChatId,System.Int64)">
            <summary>Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope">scope</see> of bot commands, covering a specific member of a group or supergroup chat.</summary>
            <param name="chatId">Unique identifier for the target <see cref="M:Telegram.Bot.Types.BotCommandScope.Chat(Telegram.Bot.Types.ChatId)"/> or username of the target supergroup</param>
            <param name="userId">Unique identifier of the target user</param>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScope.Type">
            <summary>Scope type</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.LabeledPrice">
            <summary>This object represents a portion of the price for goods or services.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.Payments.LabeledPrice.op_Implicit(System.ValueTuple{System.String,System.Int32})~Telegram.Bot.Types.Payments.LabeledPrice">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.Payments.LabeledPrice"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.LabeledPrice.Label">
            <summary>Portion label</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.LabeledPrice.Amount">
            <summary>Price of the product in the <em>smallest units</em> of the <a href="https://core.telegram.org/bots/payments#supported-currencies">currency</a> (integer, <b>not</b> float/double). For example, for a price of <c>US$ 1.45</c> pass <c>amount = 145</c>. See the <em>exp</em> parameter in <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).</summary>
        </member>
        <member name="M:Telegram.Bot.Types.Payments.LabeledPrice.#ctor(System.String,System.Int32)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.Payments.LabeledPrice"/></summary>
            <param name="label">Portion label</param>
            <param name="amount">Price of the product in the <em>smallest units</em> of the <a href="https://core.telegram.org/bots/payments#supported-currencies">currency</a> (integer, <b>not</b> float/double). For example, for a price of <c>US$ 1.45</c> pass <c>amount = 145</c>. See the <em>exp</em> parameter in <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).</param>
        </member>
        <member name="M:Telegram.Bot.Types.Payments.LabeledPrice.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.Payments.LabeledPrice"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.AffiliateInfo">
            <summary>Contains information about the affiliate that received a commission via this transaction.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.AffiliateInfo.AffiliateUser">
            <summary><em>Optional</em>. The bot or the user that received an affiliate commission if it was received by a bot or a user</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.AffiliateInfo.AffiliateChat">
            <summary><em>Optional</em>. The chat that received an affiliate commission if it was received by a chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.AffiliateInfo.CommissionPerMille">
            <summary>The number of Telegram Stars received by the affiliate for each 1000 Telegram Stars received by the bot from referred users</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.AffiliateInfo.Amount">
            <summary>Integer amount of Telegram Stars received by the affiliate from the transaction, rounded to 0; can be negative for refunds</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.AffiliateInfo.NanostarAmount">
            <summary><em>Optional</em>. The number of 1/1000000000 shares of Telegram Stars received by the affiliate; from -999999999 to 999999999; can be negative for refunds</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.Invoice">
            <summary>This object contains basic information about an invoice.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.Invoice.Title">
            <summary>Product name</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.Invoice.Description">
            <summary>Product description</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.Invoice.StartParameter">
            <summary>Unique bot deep-linking parameter that can be used to generate this invoice</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.Invoice.Currency">
            <summary>Three-letter ISO 4217 <a href="https://core.telegram.org/bots/payments#supported-currencies">currency</a> code, or “XTR” for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.Invoice.TotalAmount">
            <summary>Total price in the <em>smallest units</em> of the currency (integer, <b>not</b> float/double). For example, for a price of <c>US$ 1.45</c> pass <c>amount = 145</c>. See the <em>exp</em> parameter in <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.OrderInfo">
            <summary>This object represents information about an order.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.OrderInfo.Name">
            <summary><em>Optional</em>. User name</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.OrderInfo.PhoneNumber">
            <summary><em>Optional</em>. User's phone number</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.OrderInfo.Email">
            <summary><em>Optional</em>. User email</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.OrderInfo.ShippingAddress">
            <summary><em>Optional</em>. User shipping address</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.PaidMediaPurchased">
            <summary>This object contains information about a paid media purchase.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PaidMediaPurchased.From">
            <summary>User who purchased the media</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PaidMediaPurchased.PaidMediaPayload">
            <summary>Bot-specified paid media payload</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.PreCheckoutQuery">
            <summary>This object contains information about an incoming pre-checkout query.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.Id">
            <summary>Unique query identifier</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.From">
            <summary>User who sent the query</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.Currency">
            <summary>Three-letter ISO 4217 <a href="https://core.telegram.org/bots/payments#supported-currencies">currency</a> code, or “XTR” for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.TotalAmount">
            <summary>Total price in the <em>smallest units</em> of the currency (integer, <b>not</b> float/double). For example, for a price of <c>US$ 1.45</c> pass <c>amount = 145</c>. See the <em>exp</em> parameter in <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.InvoicePayload">
            <summary>Bot-specified invoice payload</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.ShippingOptionId">
            <summary><em>Optional</em>. Identifier of the shipping option chosen by the user</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.PreCheckoutQuery.OrderInfo">
            <summary><em>Optional</em>. Order information provided by the user</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.RefundedPayment">
            <summary>This object contains basic information about a refunded payment.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.RefundedPayment.Currency">
            <summary>Three-letter ISO 4217 <a href="https://core.telegram.org/bots/payments#supported-currencies">currency</a> code, or “XTR” for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>. Currently, always “XTR”</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.RefundedPayment.TotalAmount">
            <summary>Total refunded price in the <em>smallest units</em> of the currency (integer, <b>not</b> float/double). For example, for a price of <c>US$ 1.45</c>, <c><see cref="P:Telegram.Bot.Types.Payments.RefundedPayment.TotalAmount">TotalAmount</see> = 145</c>. See the <em>exp</em> parameter in <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.RefundedPayment.InvoicePayload">
            <summary>Bot-specified invoice payload</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.RefundedPayment.TelegramPaymentChargeId">
            <summary>Telegram payment identifier</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.RefundedPayment.ProviderPaymentChargeId">
            <summary><em>Optional</em>. Provider payment identifier</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.RevenueWithdrawalState">
            <summary>This object describes the state of a revenue withdrawal operation. Currently, it can be one of<br/><see cref="T:Telegram.Bot.Types.Payments.RevenueWithdrawalStatePending"/>, <see cref="T:Telegram.Bot.Types.Payments.RevenueWithdrawalStateSucceeded"/>, <see cref="T:Telegram.Bot.Types.Payments.RevenueWithdrawalStateFailed"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.RevenueWithdrawalState.Type">
            <summary>Type of the state, always <see cref="T:Telegram.Bot.Types.Payments.RevenueWithdrawalState"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.RevenueWithdrawalStatePending">
            <summary>The withdrawal is in progress.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.RevenueWithdrawalStatePending.Type">
            <summary>Type of the state, always <see cref="F:Telegram.Bot.Types.Payments.RevenueWithdrawalStateType.Pending"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.RevenueWithdrawalStateSucceeded">
            <summary>The withdrawal succeeded.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.RevenueWithdrawalStateSucceeded.Type">
            <summary>Type of the state, always <see cref="F:Telegram.Bot.Types.Payments.RevenueWithdrawalStateType.Succeeded"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.RevenueWithdrawalStateSucceeded.Date">
            <summary>Date the withdrawal was completed</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.RevenueWithdrawalStateSucceeded.Url">
            <summary>An HTTPS URL that can be used to see transaction details</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.RevenueWithdrawalStateFailed">
            <summary>The withdrawal failed and the transaction was refunded.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.RevenueWithdrawalStateFailed.Type">
            <summary>Type of the state, always <see cref="F:Telegram.Bot.Types.Payments.RevenueWithdrawalStateType.Failed"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.RevenueWithdrawalStateType">
            <summary>Type of the state, always <see cref="T:Telegram.Bot.Types.Payments.RevenueWithdrawalState"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Payments.RevenueWithdrawalStateType.Pending">
            <summary>The withdrawal is in progress.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.Payments.RevenueWithdrawalState"/> can be cast into <see cref="T:Telegram.Bot.Types.Payments.RevenueWithdrawalStatePending"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Payments.RevenueWithdrawalStateType.Succeeded">
            <summary>The withdrawal succeeded.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.Payments.RevenueWithdrawalState"/> can be cast into <see cref="T:Telegram.Bot.Types.Payments.RevenueWithdrawalStateSucceeded"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Payments.RevenueWithdrawalStateType.Failed">
            <summary>The withdrawal failed and the transaction was refunded.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.Payments.RevenueWithdrawalState"/> can be cast into <see cref="T:Telegram.Bot.Types.Payments.RevenueWithdrawalStateFailed"/>)</i></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.ShippingAddress">
            <summary>This object represents a shipping address.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingAddress.CountryCode">
            <summary>Two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> country code</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingAddress.State">
            <summary>State, if applicable</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingAddress.City">
            <summary>City</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingAddress.StreetLine1">
            <summary>First line for the address</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingAddress.StreetLine2">
            <summary>Second line for the address</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingAddress.PostCode">
            <summary>Address post code</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.ShippingOption">
            <summary>This object represents one shipping option.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingOption.Id">
            <summary>Shipping option identifier</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingOption.Title">
            <summary>Option title</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingOption.Prices">
            <summary>List of price portions</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.ShippingQuery">
            <summary>This object contains information about an incoming shipping query.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingQuery.Id">
            <summary>Unique query identifier</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingQuery.From">
            <summary>User who sent the query</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingQuery.InvoicePayload">
            <summary>Bot-specified invoice payload</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.ShippingQuery.ShippingAddress">
            <summary>User specified shipping address</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.StarTransaction">
            <summary>Describes a Telegram Star transaction.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.StarTransaction.Id">
            <summary>Unique identifier of the transaction. Coincides with the identifier of the original transaction for refund transactions. Coincides with <em>SuccessfulPayment.TelegramPaymentChargeId</em> for successful incoming payments from users.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.StarTransaction.Amount">
            <summary>Integer amount of Telegram Stars transferred by the transaction</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.StarTransaction.NanostarAmount">
            <summary><em>Optional</em>. The number of 1/1000000000 shares of Telegram Stars transferred by the transaction; from 0 to 999999999</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.StarTransaction.Date">
            <summary>Date the transaction was created</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.StarTransaction.Source">
            <summary><em>Optional</em>. Source of an incoming transaction (e.g., a user purchasing goods or services, Fragment refunding a failed withdrawal). Only for incoming transactions</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.StarTransaction.Receiver">
            <summary><em>Optional</em>. Receiver of an outgoing transaction (e.g., a user for a purchase refund, Fragment for a withdrawal). Only for outgoing transactions</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.StarTransactions">
            <summary>Contains a list of Telegram Star transactions.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.StarTransactions.Transactions">
            <summary>The list of transactions</summary>
        </member>
        <member name="M:Telegram.Bot.Types.Payments.StarTransactions.op_Implicit(Telegram.Bot.Types.Payments.StarTransactions)~Telegram.Bot.Types.Payments.StarTransaction[]">
            <summary>Implicit conversion to StarTransaction[] (Transactions)</summary>
        </member>
        <member name="M:Telegram.Bot.Types.Payments.StarTransactions.op_Implicit(Telegram.Bot.Types.Payments.StarTransaction[])~Telegram.Bot.Types.Payments.StarTransactions">
            <summary>Implicit conversion from StarTransaction[] (Transactions)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.SuccessfulPayment">
            <summary>This object contains basic information about a successful payment.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.Currency">
            <summary>Three-letter ISO 4217 <a href="https://core.telegram.org/bots/payments#supported-currencies">currency</a> code, or “XTR” for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.TotalAmount">
            <summary>Total price in the <em>smallest units</em> of the currency (integer, <b>not</b> float/double). For example, for a price of <c>US$ 1.45</c> pass <c>amount = 145</c>. See the <em>exp</em> parameter in <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.InvoicePayload">
            <summary>Bot-specified invoice payload</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.SubscriptionExpirationDate">
            <summary><em>Optional</em>. Expiration date of the subscription,; for recurring payments only</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.IsRecurring">
            <summary><em>Optional</em>. <see langword="true"/>, if the payment is a recurring payment for a subscription</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.IsFirstRecurring">
            <summary><em>Optional</em>. <see langword="true"/>, if the payment is the first payment for a subscription</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.ShippingOptionId">
            <summary><em>Optional</em>. Identifier of the shipping option chosen by the user</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.OrderInfo">
            <summary><em>Optional</em>. Order information provided by the user</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.TelegramPaymentChargeId">
            <summary>Telegram payment identifier</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.SuccessfulPayment.ProviderPaymentChargeId">
            <summary>Provider payment identifier</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.TransactionPartner">
            <summary>This object describes the source of a transaction, or its recipient for outgoing transactions. Currently, it can be one of<br/><see cref="T:Telegram.Bot.Types.Payments.TransactionPartnerUser"/>, <see cref="T:Telegram.Bot.Types.Payments.TransactionPartnerAffiliateProgram"/>, <see cref="T:Telegram.Bot.Types.Payments.TransactionPartnerFragment"/>, <see cref="T:Telegram.Bot.Types.Payments.TransactionPartnerTelegramAds"/>, <see cref="T:Telegram.Bot.Types.Payments.TransactionPartnerTelegramApi"/>, <see cref="T:Telegram.Bot.Types.Payments.TransactionPartnerOther"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.TransactionPartner.Type">
            <summary>Type of the transaction partner</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.TransactionPartnerUser">
            <summary>Describes a transaction with a user.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.TransactionPartnerUser.Type">
            <summary>Type of the transaction partner, always <see cref="F:Telegram.Bot.Types.Payments.TransactionPartnerType.User"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.TransactionPartnerUser.User">
            <summary>Information about the user</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.TransactionPartnerUser.Affiliate">
            <summary><em>Optional</em>. Information about the affiliate that received a commission via this transaction</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.TransactionPartnerUser.InvoicePayload">
            <summary><em>Optional</em>. Bot-specified invoice payload</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.TransactionPartnerUser.SubscriptionPeriod">
            <summary><em>Optional</em>. The duration of the paid subscription</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.TransactionPartnerUser.PaidMedia">
            <summary><em>Optional</em>. Information about the paid media bought by the user</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.TransactionPartnerUser.PaidMediaPayload">
            <summary><em>Optional</em>. Bot-specified paid media payload</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.TransactionPartnerUser.Gift">
            <summary><em>Optional</em>. The gift sent to the user by the bot</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.TransactionPartnerAffiliateProgram">
            <summary>Describes the affiliate program that issued the affiliate commission received via this transaction.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.TransactionPartnerAffiliateProgram.Type">
            <summary>Type of the transaction partner, always <see cref="F:Telegram.Bot.Types.Payments.TransactionPartnerType.AffiliateProgram"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.TransactionPartnerAffiliateProgram.SponsorUser">
            <summary><em>Optional</em>. Information about the bot that sponsored the affiliate program</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.TransactionPartnerAffiliateProgram.CommissionPerMille">
            <summary>The number of Telegram Stars received by the bot for each 1000 Telegram Stars received by the affiliate program sponsor from referred users</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.TransactionPartnerFragment">
            <summary>Describes a withdrawal transaction with Fragment.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.TransactionPartnerFragment.Type">
            <summary>Type of the transaction partner, always <see cref="F:Telegram.Bot.Types.Payments.TransactionPartnerType.Fragment"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.TransactionPartnerFragment.WithdrawalState">
            <summary><em>Optional</em>. State of the transaction if the transaction is outgoing</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.TransactionPartnerTelegramAds">
            <summary>Describes a withdrawal transaction to the Telegram Ads platform.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.TransactionPartnerTelegramAds.Type">
            <summary>Type of the transaction partner, always <see cref="F:Telegram.Bot.Types.Payments.TransactionPartnerType.TelegramAds"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.TransactionPartnerTelegramApi">
            <summary>Describes a transaction with payment for <a href="https://core.telegram.org/bots/api#paid-broadcasts">paid broadcasting</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.TransactionPartnerTelegramApi.Type">
            <summary>Type of the transaction partner, always <see cref="F:Telegram.Bot.Types.Payments.TransactionPartnerType.TelegramApi"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.TransactionPartnerTelegramApi.RequestCount">
            <summary>The number of successful requests that exceeded regular limits and were therefore billed</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.TransactionPartnerOther">
            <summary>Describes a transaction with an unknown source or recipient.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Payments.TransactionPartnerOther.Type">
            <summary>Type of the transaction partner, always <see cref="F:Telegram.Bot.Types.Payments.TransactionPartnerType.Other"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Payments.TransactionPartnerType">
            <summary>Type of the transaction partner</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Payments.TransactionPartnerType.Fragment">
            <summary>Describes a withdrawal transaction with Fragment.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.Payments.TransactionPartner"/> can be cast into <see cref="T:Telegram.Bot.Types.Payments.TransactionPartnerFragment"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Payments.TransactionPartnerType.User">
            <summary>Describes a transaction with a user.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.Payments.TransactionPartner"/> can be cast into <see cref="T:Telegram.Bot.Types.Payments.TransactionPartnerUser"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Payments.TransactionPartnerType.Other">
            <summary>Describes a transaction with an unknown source or recipient.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.Payments.TransactionPartner"/> can be cast into <see cref="T:Telegram.Bot.Types.Payments.TransactionPartnerOther"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Payments.TransactionPartnerType.TelegramAds">
            <summary>Describes a withdrawal transaction to the Telegram Ads platform.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.Payments.TransactionPartner"/> can be cast into <see cref="T:Telegram.Bot.Types.Payments.TransactionPartnerTelegramAds"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Payments.TransactionPartnerType.TelegramApi">
            <summary>Describes a transaction with payment for <a href="https://core.telegram.org/bots/api#paid-broadcasts">paid broadcasting</a>.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.Payments.TransactionPartner"/> can be cast into <see cref="T:Telegram.Bot.Types.Payments.TransactionPartnerTelegramApi"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Payments.TransactionPartnerType.AffiliateProgram">
            <summary>Describes the affiliate program that issued the affiliate commission received via this transaction.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.Payments.TransactionPartner"/> can be cast into <see cref="T:Telegram.Bot.Types.Payments.TransactionPartnerAffiliateProgram"/>)</i></summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">
            <summary>This object represents a <a href="https://core.telegram.org/bots/features#keyboards">custom keyboard</a> with reply options (see <a href="https://core.telegram.org/bots/features#keyboards">Introduction to bots</a> for details and examples). Not supported in channels and for messages sent on behalf of a Telegram Business account.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.#ctor(Telegram.Bot.Types.ReplyMarkups.KeyboardButton)">
            <summary>Initializes a new instance of <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup"/> with one button</summary>
            <param name="button">Button or text on keyboard</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.#ctor(System.Collections.Generic.IEnumerable{Telegram.Bot.Types.ReplyMarkups.KeyboardButton})">
            <summary>Initializes a new instance of <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup"/></summary>
            <param name="keyboardRow">The keyboard row.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.#ctor(System.Collections.Generic.List{Telegram.Bot.Types.ReplyMarkups.KeyboardButton})">
            <summary>Initializes a new instance of <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup"/></summary>
            <param name="keyboardRow">The keyboard row.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.#ctor(Telegram.Bot.Types.ReplyMarkups.KeyboardButton[])">
            <summary>Initializes a new instance of <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup"/></summary>
            <param name="keyboardRow">A row of buttons or texts.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.#ctor(System.Boolean)">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup"/></summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.op_Implicit(System.String)~Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">
            <summary>Generates a reply keyboard markup with one button</summary>
            <param name="text">Button's text</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.op_Implicit(System.String[])~Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">
            <summary>Generates a reply keyboard markup with multiple buttons on one row</summary>
            <param name="texts">Texts of buttons</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.op_Implicit(System.String[][])~Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">
            <summary>Generates a reply keyboard markup with multiple buttons</summary>
            <param name="textsItems">Texts of buttons</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.AddButton(Telegram.Bot.Types.ReplyMarkups.KeyboardButton)">
            <summary>Add a button to the last row</summary>
            <param name="button">The button or text to add</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.AddButtons(Telegram.Bot.Types.ReplyMarkups.KeyboardButton[])">
            <summary>Add buttons to the last row</summary>
            <param name="buttons">The buttons or texts to add</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.AddNewRow(Telegram.Bot.Types.ReplyMarkups.KeyboardButton[])">
            <summary>Add a new row of buttons</summary>
            <param name="buttons">Optional: buttons or texts for the new row</param>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.Keyboard">
            <summary>Array of button rows, each represented by an Array of <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButton"/> objects</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.IsPersistent">
            <summary><em>Optional</em>. Requests clients to always show the keyboard when the regular keyboard is hidden. Defaults to <see langword="false"/>, in which case the custom keyboard can be hidden and opened with a keyboard icon.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.ResizeKeyboard">
            <summary><em>Optional</em>. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to <see langword="false"/>, in which case the custom keyboard is always of the same height as the app's standard keyboard.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.OneTimeKeyboard">
            <summary><em>Optional</em>. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat - the user can press a special button in the input field to see the custom keyboard again. Defaults to <see langword="false"/>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.InputFieldPlaceholder">
            <summary><em>Optional</em>. The placeholder to be shown in the input field when the keyboard is active; 1-64 characters</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.Selective">
            <summary><em>Optional</em>. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the <em>text</em> of the <see cref="T:Telegram.Bot.Types.Message"/> object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message.<br/><br/><em>Example:</em> A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Telegram.Bot.Types.ReplyMarkups.KeyboardButton}})">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup"/></summary>
            <param name="keyboard">Array of button rows, each represented by an Array of <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButton"/> objects</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">
            <summary>This object represents an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a> that appears right next to the message it belongs to.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.#ctor(Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton)">
            <summary>Initializes a new instance of the <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup"/> class with only one keyboard button</summary>
            <param name="inlineKeyboardButton">Keyboard button</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.#ctor(System.Collections.Generic.List{Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton})">
            <summary>Initializes a new instance of the <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup"/> class with a one-row keyboard</summary>
            <param name="inlineKeyboardRow">The inline keyboard row</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.#ctor(System.Collections.Generic.IEnumerable{Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton})">
            <summary>Initializes a new instance of the <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup"/> class with a one-row keyboard</summary>
            <param name="inlineKeyboardRow">The inline keyboard row</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.#ctor(Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton[])">
            <summary>Initializes a new instance of the <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup"/> class with a one-row keyboard</summary>
            <param name="inlineKeyboardRow">The inline keyboard row</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.Empty">
            <summary>Generate an empty inline keyboard markup</summary>
            <returns>Empty inline keyboard markup</returns>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.op_Implicit(Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton)~Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">
            <summary>Generate an inline keyboard markup with one button</summary>
            <param name="button">Inline keyboard button</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.op_Implicit(System.String)~Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">
            <summary>Generate an inline keyboard markup with one button</summary>
            <param name="buttonText">Text of the button</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.op_Implicit(System.Collections.Generic.IEnumerable{Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton}[])~Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">
            <summary>Generate an inline keyboard markup from multiple buttons</summary>
            <param name="inlineKeyboard">Keyboard buttons</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.op_Implicit(Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton[])~Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">
            <summary>Generate an inline keyboard markup from multiple buttons on 1 row</summary>
            <param name="inlineKeyboard">Keyboard buttons</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.AddButton(Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton)">
            <summary>Add a button to the last row</summary>
            <param name="button">The button to add</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.AddButton(System.String,System.String)">
            <summary>Add a callback button to the last row</summary>
            <param name="text">Label text on the button</param>
            <param name="callbackData">Data to be sent in a <see cref="T:Telegram.Bot.Types.CallbackQuery">callback query</see> to the bot when the button is pressed, 1-64 bytes</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.AddButtons(Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton[])">
            <summary>Add buttons to the last row</summary>
            <param name="buttons">The buttons to add</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.AddNewRow(Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton[])">
            <summary>Add a new row of buttons</summary>
            <param name="buttons">Optional: buttons for the new row</param>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.InlineKeyboard">
            <summary>Array of button rows, each represented by an Array of <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/> objects</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton}})">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup"/></summary>
            <param name="inlineKeyboard">Array of button rows, each represented by an Array of <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/> objects</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton">
            <summary>This object represents one button of an inline keyboard. Exactly one of the optional fields must be used to specify type of the button.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.op_Implicit(System.String)~Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton">
            <summary>Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/> with callback data</summary>
            <param name="textAndCallbackData">Label text and callback data of the button</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithCallbackData(System.String)">
            <summary>Creates an inline keyboard button that sends <see cref="T:Telegram.Bot.Types.CallbackQuery"/> to bot when pressed</summary>
            <param name="textAndCallbackData">Text and data of the button to be sent in a <see cref="T:Telegram.Bot.Types.CallbackQuery">callback query</see> to the bot when button is pressed, 1-64 bytes</param>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.Text">
            <summary>Label text on the button</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.Url">
            <summary><em>Optional</em>. HTTP or tg:// URL to be opened when the button is pressed. Links <c>tg://user?id=&lt;UserId&gt;</c> can be used to mention a user by their identifier without using a username, if this is allowed by their privacy settings.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.CallbackData">
            <summary><em>Optional</em>. Data to be sent in a <see cref="T:Telegram.Bot.Types.CallbackQuery">callback query</see> to the bot when the button is pressed, 1-64 bytes</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WebApp">
            <summary><em>Optional</em>. Description of the <a href="https://core.telegram.org/bots/webapps">Web App</a> that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.AnswerWebAppQuery(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.InlineQueryResults.InlineQueryResult,System.Threading.CancellationToken)">AnswerWebAppQuery</see>. Available only in private chats between a user and the bot. Not supported for messages sent on behalf of a Telegram Business account.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.LoginUrl">
            <summary><em>Optional</em>. An HTTPS URL used to automatically authorize the user. Can be used as a replacement for the <a href="https://core.telegram.org/widgets/login">Telegram Login Widget</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.SwitchInlineQuery">
            <summary><em>Optional</em>. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. May be empty, in which case just the bot's username will be inserted. Not supported for messages sent on behalf of a Telegram Business account.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.SwitchInlineQueryCurrentChat">
            <summary><em>Optional</em>. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. May be empty, in which case only the bot's username will be inserted.<br/><br/>This offers a quick way for the user to open your bot in inline mode in the same chat - good for selecting something from multiple options. Not supported in channels and for messages sent on behalf of a Telegram Business account.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.SwitchInlineQueryChosenChat">
            <summary><em>Optional</em>. If set, pressing the button will prompt the user to select one of their chats of the specified type, open that chat and insert the bot's username and the specified inline query in the input field. Not supported for messages sent on behalf of a Telegram Business account.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.CopyText">
            <summary><em>Optional</em>. Description of the button that copies the specified text to the clipboard.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.CallbackGame">
            <summary><em>Optional</em>. Description of the game that will be launched when the user presses the button.<br/><br/><b>NOTE:</b> This type of button <b>must</b> always be the first button in the first row.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.Pay">
            <summary><em>Optional</em>. Specify <see langword="true"/>, to send a <a href="https://core.telegram.org/bots/api#payments">Pay button</a>. Substrings “⭐” and “XTR” in the buttons's text will be replaced with a Telegram Star icon.<br/><br/><b>NOTE:</b> This type of button <b>must</b> always be the first button in the first row and can only be used in invoice messages.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.#ctor(System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/></summary>
            <param name="text">Label text on the button</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"/></summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithUrl(System.String,System.String)">
            <summary>Creates an inline keyboard button with HTTP or tg:// URL to be opened when the button is pressed. Links <c>tg://user?id=&lt;UserId&gt;</c> can be used to mention a user by their identifier without using a username, if this is allowed by their privacy settings.</summary>
            <param name="text">Label text on the button</param>
            <param name="url">HTTP or tg:// URL to be opened when the button is pressed. Links <c>tg://user?id=&lt;UserId&gt;</c> can be used to mention a user by their identifier without using a username, if this is allowed by their privacy settings.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithCallbackData(System.String,System.String)">
            <summary>Creates an inline keyboard button with data to be sent in a <see cref="T:Telegram.Bot.Types.CallbackQuery">callback query</see> to the bot when the button is pressed, 1-64 bytes</summary>
            <param name="text">Label text on the button</param>
            <param name="callbackData">Data to be sent in a <see cref="T:Telegram.Bot.Types.CallbackQuery">callback query</see> to the bot when the button is pressed, 1-64 bytes</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithWebApp(System.String,Telegram.Bot.Types.WebAppInfo)">
            <summary>Creates an inline keyboard button with description of the <a href="https://core.telegram.org/bots/webapps">Web App</a> that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.AnswerWebAppQuery(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.InlineQueryResults.InlineQueryResult,System.Threading.CancellationToken)">AnswerWebAppQuery</see>. Available only in private chats between a user and the bot. Not supported for messages sent on behalf of a Telegram Business account.</summary>
            <param name="text">Label text on the button</param>
            <param name="webApp">Description of the <a href="https://core.telegram.org/bots/webapps">Web App</a> that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.AnswerWebAppQuery(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.InlineQueryResults.InlineQueryResult,System.Threading.CancellationToken)">AnswerWebAppQuery</see>. Available only in private chats between a user and the bot. Not supported for messages sent on behalf of a Telegram Business account.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithLoginUrl(System.String,Telegram.Bot.Types.LoginUrl)">
            <summary>Creates an inline keyboard button with an HTTPS URL used to automatically authorize the user. Can be used as a replacement for the <a href="https://core.telegram.org/widgets/login">Telegram Login Widget</a>.</summary>
            <param name="text">Label text on the button</param>
            <param name="loginUrl">An HTTPS URL used to automatically authorize the user. Can be used as a replacement for the <a href="https://core.telegram.org/widgets/login">Telegram Login Widget</a>.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithSwitchInlineQuery(System.String,System.String)">
            <summary>Creates an inline keyboard button. Pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. May be empty, in which case just the bot's username will be inserted. Not supported for messages sent on behalf of a Telegram Business account.</summary>
            <param name="text">Label text on the button</param>
            <param name="switchInlineQuery">If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. May be empty, in which case just the bot's username will be inserted. Not supported for messages sent on behalf of a Telegram Business account.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithSwitchInlineQueryCurrentChat(System.String,System.String)">
            <summary>Creates an inline keyboard button. Pressing the button will insert the bot's username and the specified inline query in the current chat's input field. May be empty, in which case only the bot's username will be inserted.<br/><br/>This offers a quick way for the user to open your bot in inline mode in the same chat - good for selecting something from multiple options. Not supported in channels and for messages sent on behalf of a Telegram Business account.</summary>
            <param name="text">Label text on the button</param>
            <param name="switchInlineQueryCurrentChat">If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. May be empty, in which case only the bot's username will be inserted.<br/><br/>This offers a quick way for the user to open your bot in inline mode in the same chat - good for selecting something from multiple options. Not supported in channels and for messages sent on behalf of a Telegram Business account.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithSwitchInlineQueryChosenChat(System.String,Telegram.Bot.Types.SwitchInlineQueryChosenChat)">
            <summary>Creates an inline keyboard button. Pressing the button will prompt the user to select one of their chats of the specified type, open that chat and insert the bot's username and the specified inline query in the input field. Not supported for messages sent on behalf of a Telegram Business account.</summary>
            <param name="text">Label text on the button</param>
            <param name="switchInlineQueryChosenChat">If set, pressing the button will prompt the user to select one of their chats of the specified type, open that chat and insert the bot's username and the specified inline query in the input field. Not supported for messages sent on behalf of a Telegram Business account.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithCopyText(System.String,Telegram.Bot.Types.CopyTextButton)">
            <summary>Creates an inline keyboard button with description of the button that copies the specified text to the clipboard.</summary>
            <param name="text">Label text on the button</param>
            <param name="copyText">Description of the button that copies the specified text to the clipboard.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithCallbackGame(System.String)">
            <summary>Creates an inline keyboard button with description of the game that will be launched when the user presses the button.<br/><br/><b>NOTE:</b> This type of button <b>must</b> always be the first button in the first row.</summary>
            <param name="text">Label text on the button</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton.WithPay(System.String)">
            <summary>Creates an inline keyboard button <a href="https://core.telegram.org/bots/api#payments">Pay button</a>. Substrings “⭐” and “XTR” in the buttons's text will be replaced with a Telegram Star icon.<br/><br/><b>NOTE:</b> This type of button <b>must</b> always be the first button in the first row and can only be used in invoice messages.</summary>
            <param name="text">Label text on the button</param>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButton">
            <summary>This object represents one button of the reply keyboard. At most one of the optional fields must be used to specify type of the button. For simple text buttons, <em>String</em> can be used instead of this object to specify the button text.<br/><b>Note:</b> <see cref="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestUsers">RequestUsers</see> and <see cref="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestChat">RequestChat</see> options will only work in Telegram versions released after 3 February, 2023. Older clients will display <em>unsupported message</em>.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.op_Implicit(System.String)~Telegram.Bot.Types.ReplyMarkups.KeyboardButton">
            <summary>Generate a keyboard button from text</summary>
            <param name="text">Button's text</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithRequestUsers(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>Generate a keyboard button to request users</summary>
            <param name="text">Button's text</param>
            <param name="requestId">Signed 32-bit identifier of the request that will be received back in the <see cref="T:Telegram.Bot.Types.UsersShared"/> object. Must be unique within the message</param>
            <param name="maxQuantity"><em>Optional</em>. The maximum number of users to be selected; 1-10. Defaults to 1.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithRequestChat(System.String,System.Int32,System.Boolean)">
            <summary>Creates a keyboard button. Pressing the button will open a list of suitable chats. Tapping on a chat will send its identifier to the bot in a <see cref="T:Telegram.Bot.Types.ChatShared"/> service message. Available in private chats only.</summary>
            <param name="text">Button's text</param>
            <param name="requestId">Signed 32-bit identifier of the request, which will be received back in the <see cref="T:Telegram.Bot.Types.ChatShared"/> object. Must be unique within the message</param>
            <param name="chatIsChannel">Pass <see langword="true"/> to request a channel chat, pass <see langword="false"/> to request a group or a supergroup chat.</param>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.Text">
            <summary>Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestUsers">
            <summary><em>Optional.</em> If specified, pressing the button will open a list of suitable users. Identifiers of selected users will be sent to the bot in a <see cref="T:Telegram.Bot.Types.UsersShared"/> service message. Available in private chats only.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestChat">
            <summary><em>Optional.</em> If specified, pressing the button will open a list of suitable chats. Tapping on a chat will send its identifier to the bot in a <see cref="T:Telegram.Bot.Types.ChatShared"/> service message. Available in private chats only.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestContact">
            <summary><em>Optional</em>. If <see langword="true"/>, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestLocation">
            <summary><em>Optional</em>. If <see langword="true"/>, the user's current location will be sent when the button is pressed. Available in private chats only.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.RequestPoll">
            <summary><em>Optional</em>. If specified, the user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WebApp">
            <summary><em>Optional</em>. If specified, the described <a href="https://core.telegram.org/bots/webapps">Web App</a> will be launched when the button is pressed. The Web App will be able to send a <see cref="T:Telegram.Bot.Types.WebAppData"/> service message. Available in private chats only.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.#ctor(System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButton"/></summary>
            <param name="text">Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButton"/></summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithRequestUsers(System.String,Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers)">
            <summary>Creates a keyboard button. Pressing the button will open a list of suitable users. Identifiers of selected users will be sent to the bot in a <see cref="T:Telegram.Bot.Types.UsersShared"/> service message. Available in private chats only.</summary>
            <param name="text">Button's text</param>
            <param name="requestUsers">If specified, pressing the button will open a list of suitable users. Identifiers of selected users will be sent to the bot in a <see cref="T:Telegram.Bot.Types.UsersShared"/> service message. Available in private chats only.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithRequestChat(System.String,Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat)">
            <summary>Creates a keyboard button. Pressing the button will open a list of suitable chats. Tapping on a chat will send its identifier to the bot in a <see cref="T:Telegram.Bot.Types.ChatShared"/> service message. Available in private chats only.</summary>
            <param name="text">Button's text</param>
            <param name="requestChat">If specified, pressing the button will open a list of suitable chats. Tapping on a chat will send its identifier to the bot in a <see cref="T:Telegram.Bot.Types.ChatShared"/> service message. Available in private chats only.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithRequestContact(System.String)">
            <summary>Creates a keyboard button. The user's phone number will be sent as a contact when the button is pressed. Available in private chats only.</summary>
            <param name="text">Button's text</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithRequestLocation(System.String)">
            <summary>Creates a keyboard button. The user's current location will be sent when the button is pressed. Available in private chats only.</summary>
            <param name="text">Button's text</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithRequestPoll(System.String,Telegram.Bot.Types.ReplyMarkups.KeyboardButtonPollType)">
            <summary>Creates a keyboard button. The user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only.</summary>
            <param name="text">Button's text</param>
            <param name="requestPoll">If specified, the user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButton.WithWebApp(System.String,Telegram.Bot.Types.WebAppInfo)">
            <summary>Creates a keyboard button. The described <a href="https://core.telegram.org/bots/webapps">Web App</a> will be launched when the button is pressed. The Web App will be able to send a <see cref="T:Telegram.Bot.Types.WebAppData"/> service message. Available in private chats only.</summary>
            <param name="text">Button's text</param>
            <param name="webApp">If specified, the described <a href="https://core.telegram.org/bots/webapps">Web App</a> will be launched when the button is pressed. The Web App will be able to send a <see cref="T:Telegram.Bot.Types.WebAppData"/> service message. Available in private chats only.</param>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup">
            <summary>Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice <a href="https://core.telegram.org/bots/features#privacy-mode">privacy mode</a>. Not supported in channels and for messages sent on behalf of a Telegram Business account.</summary>
            <remarks><p><b>Example:</b> A <a href="https://t.me/PollBot">poll bot</a> for groups runs in privacy mode (only receives commands, replies to its messages and mentions). There could be two ways to create a new poll:</p><ul><li>Explain the user how to send a command with parameters (e.g. /newpoll question answer1 answer2). May be appealing for hardcore users but lacks modern day polish.</li><li>Guide the user through a step-by-step process. 'Please send me your question', 'Cool, now let's add the first answer option', 'Great. Keep adding answer options, then send /done when you're ready'.</li></ul><p>The last option is definitely more attractive. And if you use <a href="https://core.telegram.org/bots/api#forcereply">ForceReply</a> in your bot's questions, it will receive the user's answers even if it only receives replies, commands and mentions - without any extra work for the user.</p></remarks>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup.ForceReply">
            <summary>Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup.InputFieldPlaceholder">
            <summary><em>Optional</em>. The placeholder to be shown in the input field when the reply is active; 1-64 characters</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ForceReplyMarkup.Selective">
            <summary><em>Optional</em>. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the <em>text</em> of the <see cref="T:Telegram.Bot.Types.Message"/> object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.IKeyboardButton">
            <summary>Marker interface for a regular or inline button of the reply keyboard</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.IKeyboardButton.Text">
            <summary>Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.IReplyMarkup">
            <summary>A marker interface for reply markups that define how a <see cref="T:Telegram.Bot.Types.User"/> can reply to the sent <see cref="T:Telegram.Bot.Types.Message"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonPollType">
            <summary>This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonPollType.Type">
            <summary><em>Optional</em>. If <em>quiz</em> is passed, the user will be allowed to create only polls in the quiz mode. If <em>regular</em> is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonPollType.op_Implicit(Telegram.Bot.Types.ReplyMarkups.KeyboardButtonPollType)~System.Nullable{Telegram.Bot.Types.Enums.PollType}">
            <summary>Implicit conversion to PollType (Type)</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonPollType.op_Implicit(System.Nullable{Telegram.Bot.Types.Enums.PollType})~Telegram.Bot.Types.ReplyMarkups.KeyboardButtonPollType">
            <summary>Implicit conversion from PollType (Type)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat">
            <summary>This object defines the criteria used to request a suitable chat. Information about the selected chat will be shared with the bot when the corresponding button is pressed. The bot will be granted requested rights in the chat if appropriate. <a href="https://core.telegram.org/bots/features#chat-and-user-selection">More about requesting chats »</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.RequestId">
            <summary>Signed 32-bit identifier of the request, which will be received back in the <see cref="T:Telegram.Bot.Types.ChatShared"/> object. Must be unique within the message</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.ChatIsChannel">
            <summary>Pass <see langword="true"/> to request a channel chat, pass <see langword="false"/> to request a group or a supergroup chat.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.ChatIsForum">
            <summary><em>Optional</em>. Pass <see langword="true"/> to request a forum supergroup, pass <see langword="false"/> to request a non-forum chat. If not specified, no additional restrictions are applied.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.ChatHasUsername">
            <summary><em>Optional</em>. Pass <see langword="true"/> to request a supergroup or a channel with a username, pass <see langword="false"/> to request a chat without a username. If not specified, no additional restrictions are applied.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.ChatIsCreated">
            <summary><em>Optional</em>. Pass <see langword="true"/> to request a chat owned by the user. Otherwise, no additional restrictions are applied.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.UserAdministratorRights">
            <summary><em>Optional</em>. An object listing the required administrator rights of the user in the chat. The rights must be a superset of <see cref="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.BotAdministratorRights">BotAdministratorRights</see>. If not specified, no additional restrictions are applied.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.BotAdministratorRights">
            <summary><em>Optional</em>. An object listing the required administrator rights of the bot in the chat. The rights must be a subset of <see cref="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.UserAdministratorRights">UserAdministratorRights</see>. If not specified, no additional restrictions are applied.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.BotIsMember">
            <summary><em>Optional</em>. Pass <see langword="true"/> to request a chat with the bot as a member. Otherwise, no additional restrictions are applied.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.RequestTitle">
            <summary><em>Optional</em>. Pass <see langword="true"/> to request the chat's title</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.RequestUsername">
            <summary><em>Optional</em>. Pass <see langword="true"/> to request the chat's username</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.RequestPhoto">
            <summary><em>Optional</em>. Pass <see langword="true"/> to request the chat's photo</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.#ctor(System.Int32,System.Boolean)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat"/></summary>
            <param name="requestId">Signed 32-bit identifier of the request, which will be received back in the <see cref="T:Telegram.Bot.Types.ChatShared"/> object. Must be unique within the message</param>
            <param name="chatIsChannel">Pass <see langword="true"/> to request a channel chat, pass <see langword="false"/> to request a group or a supergroup chat.</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers">
            <summary>This object defines the criteria used to request suitable users. Information about the selected users will be shared with the bot when the corresponding button is pressed. <a href="https://core.telegram.org/bots/features#chat-and-user-selection">More about requesting users »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers.RequestId">
            <summary>Signed 32-bit identifier of the request that will be received back in the <see cref="T:Telegram.Bot.Types.UsersShared"/> object. Must be unique within the message</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers.UserIsBot">
            <summary><em>Optional</em>. Pass <see langword="true"/> to request bots, pass <see langword="false"/> to request regular users. If not specified, no additional restrictions are applied.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers.UserIsPremium">
            <summary><em>Optional</em>. Pass <see langword="true"/> to request premium users, pass <see langword="false"/> to request non-premium users. If not specified, no additional restrictions are applied.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers.MaxQuantity">
            <summary><em>Optional</em>. The maximum number of users to be selected; 1-10. Defaults to 1.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers.RequestName">
            <summary><em>Optional</em>. Pass <see langword="true"/> to request the users' first and last names</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers.RequestUsername">
            <summary><em>Optional</em>. Pass <see langword="true"/> to request the users' usernames</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers.RequestPhoto">
            <summary><em>Optional</em>. Pass <see langword="true"/> to request the users' photos</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers.#ctor(System.Int32)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers"/></summary>
            <param name="requestId">Signed 32-bit identifier of the request that will be received back in the <see cref="T:Telegram.Bot.Types.UsersShared"/> object. Must be unique within the message</param>
        </member>
        <member name="M:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove">
            <summary>Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup"/>). Not supported in channels and for messages sent on behalf of a Telegram Business account.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove.RemoveKeyboard">
            <summary>Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use <em>OneTimeKeyboard</em> in <see cref="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup"/>)</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardRemove.Selective">
            <summary><em>Optional</em>. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the <em>text</em> of the <see cref="T:Telegram.Bot.Types.Message"/> object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message.<br/><br/><em>Example:</em> A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Animation">
            <summary>This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Animation.Width">
            <summary>Video width as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Animation.Height">
            <summary>Video height as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Animation.Duration">
            <summary>Duration of the video in seconds as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Animation.Thumbnail">
            <summary><em>Optional</em>. Animation thumbnail as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Animation.FileName">
            <summary><em>Optional</em>. Original animation filename as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Animation.MimeType">
            <summary><em>Optional</em>. MIME type of the file as defined by the sender</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ApiResponse`1">
            <summary>Represents a successful Bot API response with result</summary>
            <typeparam name="TResult">Expected type of operation result</typeparam>
        </member>
        <member name="P:Telegram.Bot.Types.ApiResponse`1.Result">
            <summary>Gets the result object.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Audio">
            <summary>This object represents an audio file to be treated as music by the Telegram clients.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.Duration">
            <summary>Duration of the audio in seconds as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.Performer">
            <summary><em>Optional</em>. Performer of the audio as defined by the sender or by audio tags</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.Title">
            <summary><em>Optional</em>. Title of the audio as defined by the sender or by audio tags</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.FileName">
            <summary><em>Optional</em>. Original filename as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.MimeType">
            <summary><em>Optional</em>. MIME type of the file as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.Thumbnail">
            <summary><em>Optional</em>. Thumbnail of the album cover to which the music file belongs</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BackgroundFill">
            <summary>This object describes the way a background is filled based on the selected colors. Currently, it can be one of<br/><see cref="T:Telegram.Bot.Types.BackgroundFillSolid"/>, <see cref="T:Telegram.Bot.Types.BackgroundFillGradient"/>, <see cref="T:Telegram.Bot.Types.BackgroundFillFreeformGradient"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundFill.Type">
            <summary>Type of the background fill</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BackgroundFillSolid">
            <summary>The background is filled using the selected color.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundFillSolid.Type">
            <summary>Type of the background fill, always <see cref="F:Telegram.Bot.Types.Enums.BackgroundFillType.Solid"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundFillSolid.Color">
            <summary>The color of the background fill in the RGB24 format</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BackgroundFillGradient">
            <summary>The background is a gradient fill.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundFillGradient.Type">
            <summary>Type of the background fill, always <see cref="F:Telegram.Bot.Types.Enums.BackgroundFillType.Gradient"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundFillGradient.TopColor">
            <summary>Top color of the gradient in the RGB24 format</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundFillGradient.BottomColor">
            <summary>Bottom color of the gradient in the RGB24 format</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundFillGradient.RotationAngle">
            <summary>Clockwise rotation angle of the background fill in degrees; 0-359</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BackgroundFillFreeformGradient">
            <summary>The background is a freeform gradient that rotates after every message in the chat.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundFillFreeformGradient.Type">
            <summary>Type of the background fill, always <see cref="F:Telegram.Bot.Types.Enums.BackgroundFillType.FreeformGradient"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundFillFreeformGradient.Colors">
            <summary>A list of the 3 or 4 base colors that are used to generate the freeform gradient in the RGB24 format</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BackgroundType">
            <summary>This object describes the type of a background. Currently, it can be one of<br/><see cref="T:Telegram.Bot.Types.BackgroundTypeFill"/>, <see cref="T:Telegram.Bot.Types.BackgroundTypeWallpaper"/>, <see cref="T:Telegram.Bot.Types.BackgroundTypePattern"/>, <see cref="T:Telegram.Bot.Types.BackgroundTypeChatTheme"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundType.Type">
            <summary>Type of the background</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BackgroundTypeFill">
            <summary>The background is automatically filled based on the selected colors.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundTypeFill.Type">
            <summary>Type of the background, always <see cref="F:Telegram.Bot.Types.Enums.BackgroundTypeKind.Fill"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundTypeFill.Fill">
            <summary>The background fill</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundTypeFill.DarkThemeDimming">
            <summary>Dimming of the background in dark themes, as a percentage; 0-100</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BackgroundTypeWallpaper">
            <summary>The background is a wallpaper in the JPEG format.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundTypeWallpaper.Type">
            <summary>Type of the background, always <see cref="F:Telegram.Bot.Types.Enums.BackgroundTypeKind.Wallpaper"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundTypeWallpaper.Document">
            <summary>Document with the wallpaper</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundTypeWallpaper.DarkThemeDimming">
            <summary>Dimming of the background in dark themes, as a percentage; 0-100</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundTypeWallpaper.IsBlurred">
            <summary><em>Optional</em>. <see langword="true"/>, if the wallpaper is downscaled to fit in a 450x450 square and then box-blurred with radius 12</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundTypeWallpaper.IsMoving">
            <summary><em>Optional</em>. <see langword="true"/>, if the background moves slightly when the device is tilted</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BackgroundTypePattern">
            <summary>The background is a PNG or TGV (gzipped subset of SVG with MIME type “application/x-tgwallpattern”) pattern to be combined with the background fill chosen by the user.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundTypePattern.Type">
            <summary>Type of the background, always <see cref="F:Telegram.Bot.Types.Enums.BackgroundTypeKind.Pattern"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundTypePattern.Document">
            <summary>Document with the pattern</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundTypePattern.Fill">
            <summary>The background fill that is combined with the pattern</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundTypePattern.Intensity">
            <summary>Intensity of the pattern when it is shown above the filled background; 0-100</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundTypePattern.IsInverted">
            <summary><em>Optional</em>. <see langword="true"/>, if the background fill must be applied only to the pattern itself. All other pixels are black in this case. For dark themes only</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundTypePattern.IsMoving">
            <summary><em>Optional</em>. <see langword="true"/>, if the background moves slightly when the device is tilted</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BackgroundTypeChatTheme">
            <summary>The background is taken directly from a built-in chat theme.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundTypeChatTheme.Type">
            <summary>Type of the background, always <see cref="F:Telegram.Bot.Types.Enums.BackgroundTypeKind.ChatTheme"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.BackgroundTypeChatTheme.ThemeName">
            <summary>Name of the chat theme, which is usually an emoji</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatBackground">
            <summary>This object represents a chat background.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBackground.Type">
            <summary>Type of the background</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ChatBackground.op_Implicit(Telegram.Bot.Types.ChatBackground)~Telegram.Bot.Types.BackgroundType">
            <summary>Implicit conversion to BackgroundType (Type)</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ChatBackground.op_Implicit(Telegram.Bot.Types.BackgroundType)~Telegram.Bot.Types.ChatBackground">
            <summary>Implicit conversion from BackgroundType (Type)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Birthdate">
            <summary>Describes the birthdate of a user.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Birthdate.Day">
            <summary>Day of the user's birth; 1-31</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Birthdate.Month">
            <summary>Month of the user's birth; 1-12</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Birthdate.Year">
            <summary><em>Optional</em>. Year of the user's birth</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotCommand">
            <summary>This object represents a bot command.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommand.Command">
            <summary>Text of the command; 1-32 characters. Can contain only lowercase English letters, digits and underscores.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommand.Description">
            <summary>Description of the command; 1-256 characters.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeDefault">
            <summary>Represents the default <see cref="T:Telegram.Bot.Types.BotCommandScope">scope</see> of bot commands. Default commands are used if no commands with a <a href="https://core.telegram.org/bots/api#determining-list-of-commands">narrower scope</a> are specified for the user.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeDefault.Type">
            <summary>Scope type, always <see cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.Default"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeAllPrivateChats">
            <summary>Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope">scope</see> of bot commands, covering all private chats.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeAllPrivateChats.Type">
            <summary>Scope type, always <see cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.AllPrivateChats"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeAllGroupChats">
            <summary>Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope">scope</see> of bot commands, covering all group and supergroup chats.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeAllGroupChats.Type">
            <summary>Scope type, always <see cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.AllGroupChats"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeAllChatAdministrators">
            <summary>Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope">scope</see> of bot commands, covering all group and supergroup chat administrators.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeAllChatAdministrators.Type">
            <summary>Scope type, always <see cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.AllChatAdministrators"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeChat">
            <summary>Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope">scope</see> of bot commands, covering a specific chat.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChat.Type">
            <summary>Scope type, always <see cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.Chat"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChat.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeChatAdministrators">
            <summary>Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope">scope</see> of bot commands, covering all administrators of a specific group or supergroup chat.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChatAdministrators.Type">
            <summary>Scope type, always <see cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.ChatAdministrators"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChatAdministrators.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotCommandScopeChatMember">
            <summary>Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope">scope</see> of bot commands, covering a specific member of a group or supergroup chat.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChatMember.Type">
            <summary>Scope type, always <see cref="F:Telegram.Bot.Types.Enums.BotCommandScopeType.ChatMember"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChatMember.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotCommandScopeChatMember.UserId">
            <summary>Unique identifier of the target user</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotDescription">
            <summary>This object represents the bot's description.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotDescription.Description">
            <summary>The bot's description</summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotDescription.op_Implicit(Telegram.Bot.Types.BotDescription)~System.String">
            <summary>Implicit conversion to string (Description)</summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotDescription.op_Implicit(System.String)~Telegram.Bot.Types.BotDescription">
            <summary>Implicit conversion from string (Description)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotName">
            <summary>This object represents the bot's name.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotName.Name">
            <summary>The bot's name</summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotName.op_Implicit(Telegram.Bot.Types.BotName)~System.String">
            <summary>Implicit conversion to string (Name)</summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotName.op_Implicit(System.String)~Telegram.Bot.Types.BotName">
            <summary>Implicit conversion from string (Name)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BotShortDescription">
            <summary>This object represents the bot's short description.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BotShortDescription.ShortDescription">
            <summary>The bot's short description</summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotShortDescription.op_Implicit(Telegram.Bot.Types.BotShortDescription)~System.String">
            <summary>Implicit conversion to string (ShortDescription)</summary>
        </member>
        <member name="M:Telegram.Bot.Types.BotShortDescription.op_Implicit(System.String)~Telegram.Bot.Types.BotShortDescription">
            <summary>Implicit conversion from string (ShortDescription)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BusinessConnection">
            <summary>Describes the connection of the bot with a business account.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessConnection.Id">
            <summary>Unique identifier of the business connection</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessConnection.User">
            <summary>Business account user that created the business connection</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessConnection.UserChatId">
            <summary>Identifier of a private chat with the user who created the business connection.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessConnection.Date">
            <summary>Date the connection was established</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessConnection.CanReply">
            <summary><see langword="true"/>, if the bot can act on behalf of the business account in chats that were active in the last 24 hours</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessConnection.IsEnabled">
            <summary><see langword="true"/>, if the connection is active</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BusinessIntro">
            <summary>Contains information about the start page settings of a Telegram Business account.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessIntro.Title">
            <summary><em>Optional</em>. Title text of the business intro</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessIntro.Message">
            <summary><em>Optional</em>. Message text of the business intro</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessIntro.Sticker">
            <summary><em>Optional</em>. Sticker of the business intro</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BusinessLocation">
            <summary>Contains information about the location of a Telegram Business account.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessLocation.Address">
            <summary>Address of the business</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessLocation.Location">
            <summary><em>Optional</em>. Location of the business</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BusinessMessagesDeleted">
            <summary>This object is received when messages are deleted from a connected business account.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessMessagesDeleted.BusinessConnectionId">
            <summary>Unique identifier of the business connection</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessMessagesDeleted.Chat">
            <summary>Information about a chat in the business account. The bot may not have access to the chat or the corresponding user.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessMessagesDeleted.MessageIds">
            <summary>The list of identifiers of deleted messages in the chat of the business account</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BusinessOpeningHours">
            <summary>Describes the opening hours of a business.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessOpeningHours.TimeZoneName">
            <summary>Unique name of the time zone for which the opening hours are defined</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessOpeningHours.OpeningHours">
            <summary>List of time intervals describing business opening hours</summary>
        </member>
        <member name="T:Telegram.Bot.Types.BusinessOpeningHoursInterval">
            <summary>Describes an interval of time during which a business is open.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessOpeningHoursInterval.OpeningMinute">
            <summary>The minute's sequence number in a week, starting on Monday, marking the start of the time interval during which the business is open; 0 - 7 * 24 * 60</summary>
        </member>
        <member name="P:Telegram.Bot.Types.BusinessOpeningHoursInterval.ClosingMinute">
            <summary>The minute's sequence number in a week, starting on Monday, marking the end of the time interval during which the business is open; 0 - 8 * 24 * 60</summary>
        </member>
        <member name="T:Telegram.Bot.Types.CallbackGame">
            <summary>A placeholder, currently holds no information. Use <a href="https://t.me/botfather">@BotFather</a> to set up your game.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.CallbackQuery">
            <summary>This object represents an incoming callback query from a callback button in an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>. If the button that originated the query was attached to a message sent by the bot, the field <see cref="P:Telegram.Bot.Types.CallbackQuery.Message">Message</see> will be present. If the button was attached to a message sent via the bot (in <a href="https://core.telegram.org/bots/api#inline-mode">inline mode</a>), the field <see cref="P:Telegram.Bot.Types.CallbackQuery.InlineMessageId">InlineMessageId</see> will be present. Exactly one of the fields <see cref="P:Telegram.Bot.Types.CallbackQuery.Data">Data</see> or <see cref="P:Telegram.Bot.Types.CallbackQuery.GameShortName">GameShortName</see> will be present.</summary>
            <remarks><b>NOTE:</b> After the user presses a callback button, Telegram clients will display a progress bar until you call <see cref="M:Telegram.Bot.TelegramBotClientExtensions.AnswerCallbackQuery(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Boolean,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">AnswerCallbackQuery</see>. It is, therefore, necessary to react by calling <see cref="M:Telegram.Bot.TelegramBotClientExtensions.AnswerCallbackQuery(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Boolean,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">AnswerCallbackQuery</see> even if no notification to the user is needed (e.g., without specifying any of the optional parameters).</remarks>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.Id">
            <summary>Unique identifier for this query</summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.From">
            <summary>Sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.Message">
            <summary><em>Optional</em>. Message sent by the bot with the callback button that originated the query</summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.InlineMessageId">
            <summary><em>Optional</em>. Identifier of the message sent via the bot in inline mode, that originated the query.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.ChatInstance">
            <summary>Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in <a href="https://core.telegram.org/bots/api#games">games</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.Data">
            <summary><em>Optional</em>. Data associated with the callback button. Be aware that the message originated the query can contain no callback buttons with this data.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.GameShortName">
            <summary><em>Optional</em>. Short name of a <a href="https://core.telegram.org/bots/api#games">Game</a> to be returned, serves as the unique identifier for the game</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatFullInfo">
            <summary>This object contains full information about a chat.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.AccentColorId">
            <summary>Identifier of the accent color for the chat name and backgrounds of the chat photo, reply header, and link preview. See <a href="https://core.telegram.org/bots/api#accent-colors">accent colors</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.MaxReactionCount">
            <summary>The maximum number of reactions that can be set on a message in the chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.Photo">
            <summary><em>Optional</em>. Chat photo</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.ActiveUsernames">
            <summary><em>Optional</em>. If non-empty, the list of all <a href="https://telegram.org/blog/topics-in-groups-collectible-usernames#collectible-usernames">active chat usernames</a>; for private chats, supergroups and channels</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.Birthdate">
            <summary><em>Optional</em>. For private chats, the date of birth of the user</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.BusinessIntro">
            <summary><em>Optional</em>. For private chats with business accounts, the intro of the business</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.BusinessLocation">
            <summary><em>Optional</em>. For private chats with business accounts, the location of the business</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.BusinessOpeningHours">
            <summary><em>Optional</em>. For private chats with business accounts, the opening hours of the business</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.PersonalChat">
            <summary><em>Optional</em>. For private chats, the personal channel of the user</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.AvailableReactions">
            <summary><em>Optional</em>. List of available reactions allowed in the chat. If omitted, then all <see cref="T:Telegram.Bot.Types.ReactionTypeEmoji">emoji reactions</see> are allowed.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.BackgroundCustomEmojiId">
            <summary><em>Optional</em>. Custom emoji identifier of the emoji chosen by the chat for the reply header and link preview background</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.ProfileAccentColorId">
            <summary><em>Optional</em>. Identifier of the accent color for the chat's profile background. See <a href="https://core.telegram.org/bots/api#profile-accent-colors">profile accent colors</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.ProfileBackgroundCustomEmojiId">
            <summary><em>Optional</em>. Custom emoji identifier of the emoji chosen by the chat for its profile background</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.EmojiStatusCustomEmojiId">
            <summary><em>Optional</em>. Custom emoji identifier of the emoji status of the chat or the other party in a private chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.EmojiStatusExpirationDate">
            <summary><em>Optional</em>. Expiration date of the emoji status of the chat or the other party in a private chat,, if any</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.Bio">
            <summary><em>Optional</em>. Bio of the other party in a private chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.HasPrivateForwards">
            <summary><em>Optional</em>. <see langword="true"/>, if privacy settings of the other party in the private chat allows to use <c>tg://user?id=&lt;UserId&gt;</c> links only in chats with the user</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.HasRestrictedVoiceAndVideoMessages">
            <summary><em>Optional</em>. <see langword="true"/>, if the privacy settings of the other party restrict sending voice and video note messages in the private chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.JoinToSendMessages">
            <summary><em>Optional</em>. <see langword="true"/>, if users need to join the supergroup before they can send messages</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.JoinByRequest">
            <summary><em>Optional</em>. <see langword="true"/>, if all users directly joining the supergroup without using an invite link need to be approved by supergroup administrators</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.Description">
            <summary><em>Optional</em>. Description, for groups, supergroups and channel chats</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.InviteLink">
            <summary><em>Optional</em>. Primary invite link, for groups, supergroups and channel chats</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.PinnedMessage">
            <summary><em>Optional</em>. The most recent pinned message (by sending date)</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.Permissions">
            <summary><em>Optional</em>. Default chat member permissions, for groups and supergroups</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.CanSendPaidMedia">
            <summary><em>Optional</em>. <see langword="true"/>, if paid media messages can be sent or forwarded to the channel chat. The field is available only for channel chats.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.SlowModeDelay">
            <summary><em>Optional</em>. For supergroups, the minimum allowed delay between consecutive messages sent by each unprivileged user; in seconds</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.UnrestrictBoostCount">
            <summary><em>Optional</em>. For supergroups, the minimum number of boosts that a non-administrator user needs to add in order to ignore slow mode and chat permissions</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.MessageAutoDeleteTime">
            <summary><em>Optional</em>. The time after which all messages sent to the chat will be automatically deleted; in seconds</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.HasAggressiveAntiSpamEnabled">
            <summary><em>Optional</em>. <see langword="true"/>, if aggressive anti-spam checks are enabled in the supergroup. The field is only available to chat administrators.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.HasHiddenMembers">
            <summary><em>Optional</em>. <see langword="true"/>, if non-administrators can only get the list of bots and administrators in the chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.HasProtectedContent">
            <summary><em>Optional</em>. <see langword="true"/>, if messages from the chat can't be forwarded to other chats</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.HasVisibleHistory">
            <summary><em>Optional</em>. <see langword="true"/>, if new chat members will have access to old messages; available only to chat administrators</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.StickerSetName">
            <summary><em>Optional</em>. For supergroups, name of the group sticker set</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.CanSetStickerSet">
            <summary><em>Optional</em>. <see langword="true"/>, if the bot can change the group sticker set</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.CustomEmojiStickerSetName">
            <summary><em>Optional</em>. For supergroups, the name of the group's custom emoji sticker set. Custom emoji from this set can be used by all users and bots in the group.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.LinkedChatId">
            <summary><em>Optional</em>. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatFullInfo.Location">
            <summary><em>Optional</em>. For supergroups, the location to which the supergroup is connected</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatAdministratorRights">
            <summary>Represents the rights of an administrator in a chat.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.IsAnonymous">
            <summary><see langword="true"/>, if the user's presence in the chat is hidden</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageChat">
            <summary><see langword="true"/>, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanDeleteMessages">
            <summary><see langword="true"/>, if the administrator can delete messages of other users</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageVideoChats">
            <summary><see langword="true"/>, if the administrator can manage video chats</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanRestrictMembers">
            <summary><see langword="true"/>, if the administrator can restrict, ban or unban chat members, or access supergroup statistics</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanPromoteMembers">
            <summary><see langword="true"/>, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user)</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanChangeInfo">
            <summary><see langword="true"/>, if the user is allowed to change the chat title, photo and other settings</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanInviteUsers">
            <summary><see langword="true"/>, if the user is allowed to invite new users to the chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanPostStories">
            <summary><see langword="true"/>, if the administrator can post stories to the chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanEditStories">
            <summary><see langword="true"/>, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanDeleteStories">
            <summary><see langword="true"/>, if the administrator can delete stories posted by other users</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanPostMessages">
            <summary><em>Optional</em>. <see langword="true"/>, if the administrator can post messages in the channel, or access channel statistics; for channels only</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanEditMessages">
            <summary><em>Optional</em>. <see langword="true"/>, if the administrator can edit messages of other users and can pin messages; for channels only</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanPinMessages">
            <summary><em>Optional</em>. <see langword="true"/>, if the user is allowed to pin messages; for groups and supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatAdministratorRights.CanManageTopics">
            <summary><em>Optional</em>. <see langword="true"/>, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatBoost">
            <summary>This object contains information about a chat boost.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoost.BoostId">
            <summary>Unique identifier of the boost</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoost.AddDate">
            <summary>Point in time when the chat was boosted</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoost.ExpirationDate">
            <summary>Point in time when the boost will automatically expire, unless the booster's Telegram Premium subscription is prolonged</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoost.Source">
            <summary>Source of the added boost</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatBoostAdded">
            <summary>This object represents a service message about a user boosting a chat.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostAdded.BoostCount">
            <summary>Number of boosts added by the user</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ChatBoostAdded.op_Implicit(Telegram.Bot.Types.ChatBoostAdded)~System.Int32">
            <summary>Implicit conversion to int (BoostCount)</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ChatBoostAdded.op_Implicit(System.Int32)~Telegram.Bot.Types.ChatBoostAdded">
            <summary>Implicit conversion from int (BoostCount)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatBoostRemoved">
            <summary>This object represents a boost removed from a chat.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostRemoved.Chat">
            <summary>Chat which was boosted</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostRemoved.BoostId">
            <summary>Unique identifier of the boost</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostRemoved.RemoveDate">
            <summary>Point in time when the boost was removed</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostRemoved.Source">
            <summary>Source of the removed boost</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatBoostSource">
            <summary>This object describes the source of a chat boost. It can be one of<br/><see cref="T:Telegram.Bot.Types.ChatBoostSourcePremium"/>, <see cref="T:Telegram.Bot.Types.ChatBoostSourceGiftCode"/>, <see cref="T:Telegram.Bot.Types.ChatBoostSourceGiveaway"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostSource.Source">
            <summary>Source of the boost</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatBoostSourcePremium">
            <summary>The boost was obtained by subscribing to Telegram Premium or by gifting a Telegram Premium subscription to another user.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostSourcePremium.Source">
            <summary>Source of the boost, always <see cref="F:Telegram.Bot.Types.Enums.ChatBoostSourceType.Premium"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostSourcePremium.User">
            <summary>User that boosted the chat</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatBoostSourceGiftCode">
            <summary>The boost was obtained by the creation of Telegram Premium gift codes to boost a chat. Each such code boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostSourceGiftCode.Source">
            <summary>Source of the boost, always <see cref="F:Telegram.Bot.Types.Enums.ChatBoostSourceType.GiftCode"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostSourceGiftCode.User">
            <summary>User for which the gift code was created</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatBoostSourceGiveaway">
            <summary>The boost was obtained by the creation of a Telegram Premium or a Telegram Star giveaway. This boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription for Telegram Premium giveaways and <see cref="P:Telegram.Bot.Types.ChatBoostSourceGiveaway.PrizeStarCount">PrizeStarCount</see> / 500 times for one year for Telegram Star giveaways.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostSourceGiveaway.Source">
            <summary>Source of the boost, always <see cref="F:Telegram.Bot.Types.Enums.ChatBoostSourceType.Giveaway"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostSourceGiveaway.GiveawayMessageId">
            <summary>Identifier of a message in the chat with the giveaway; the message could have been deleted already. May be 0 if the message isn't sent yet.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostSourceGiveaway.User">
            <summary><em>Optional</em>. User that won the prize in the giveaway if any; for Telegram Premium giveaways only</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostSourceGiveaway.PrizeStarCount">
            <summary><em>Optional</em>. The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostSourceGiveaway.IsUnclaimed">
            <summary><em>Optional</em>. <see langword="true"/>, if the giveaway was completed, but there was no user to win the prize</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatBoostUpdated">
            <summary>This object represents a boost added to a chat or changed.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostUpdated.Chat">
            <summary>Chat which was boosted</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatBoostUpdated.Boost">
            <summary>Information about the chat boost</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatId">
            <summary>Represents a ChatId</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatId.Identifier">
            <summary>Unique identifier for the chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatId.Username">
            <summary>Username of the supergroup or channel (in the format @channelusername)</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.#ctor(System.Int64)">
            <summary>Create a <see cref="T:Telegram.Bot.Types.ChatId"/> using unique identifier for the chat</summary>
            <param name="identifier">Unique identifier for the chat</param>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.#ctor(System.String)">
            <summary>Create a <see cref="T:Telegram.Bot.Types.ChatId"/> using unique identifier for the chat or username of the supergroup or channel (in the format @channelusername)</summary>
            <param name="username">Unique identifier for the chat or username of the supergroup or channel (in the format @channelusername)</param>
            <exception cref="T:System.ArgumentException">Thrown when string value isn`t number and doesn't start with @</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when string value is <see langword="null"/></exception>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.Equals(Telegram.Bot.Types.ChatId)">
            <inheritdoc/>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.GetHashCode">
            <summary>Gets the hash code of this object</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.ToString">
            <summary>Create a string out of a <see cref="T:Telegram.Bot.Types.ChatId"/>/// </summary>
            <returns>The <see cref="T:Telegram.Bot.Types.ChatId"/> as <see langword="string"/></returns>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.op_Implicit(System.Int64)~Telegram.Bot.Types.ChatId">
            <summary>Create a <see cref="T:Telegram.Bot.Types.ChatId"/> using unique identifier for the chat</summary>
            <param name="identifier">Unique identifier for the chat</param>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.op_Implicit(System.String)~Telegram.Bot.Types.ChatId">
            <summary>Create a <see cref="T:Telegram.Bot.Types.ChatId"/> using unique identifier for the chat or username of the supergroup or channel (in the format @channelusername)</summary>
            <param name="username">Unique identifier for the chat or username of the supergroup or channel (in the format @channelusername)</param>
            <exception cref="T:System.ArgumentException">Thrown when string value isn`t number and doesn't start with @</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when string value is <see langword="null"/></exception>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.op_Implicit(Telegram.Bot.Types.Chat)~Telegram.Bot.Types.ChatId">
            <summary>Convert a <see cref="T:Telegram.Bot.Types.Chat"/> object to a <see cref="T:Telegram.Bot.Types.ChatId"/></summary>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.op_Implicit(Telegram.Bot.Types.ChatFullInfo)~Telegram.Bot.Types.ChatId">
            <summary>Convert a <see cref="T:Telegram.Bot.Types.ChatFullInfo"/> Object to a <see cref="T:Telegram.Bot.Types.ChatId"/></summary>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.op_Equality(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId)">
            <summary>Compares two ChatId objects</summary>
        </member>
        <member name="M:Telegram.Bot.Types.ChatId.op_Inequality(Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId)">
            <summary>Compares two ChatId objects</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatInviteLink">
            <summary>Represents an invite link for a chat.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.InviteLink">
            <summary>The invite link. If the link was created by another chat administrator, then the second part of the link will be replaced with “…”.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.Creator">
            <summary>Creator of the link</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.CreatesJoinRequest">
            <summary><see langword="true"/>, if users joining the chat via the link need to be approved by chat administrators</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.IsPrimary">
            <summary><see langword="true"/>, if the link is primary</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.IsRevoked">
            <summary><see langword="true"/>, if the link is revoked</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.Name">
            <summary><em>Optional</em>. Invite link name</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.ExpireDate">
            <summary><em>Optional</em>. Point in time when the link will expire or has been expired</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.MemberLimit">
            <summary><em>Optional</em>. The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.PendingJoinRequestCount">
            <summary><em>Optional</em>. Number of pending join requests created using this link</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.SubscriptionPeriod">
            <summary><em>Optional</em>. The number of seconds the subscription will be active for before the next payment</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatInviteLink.SubscriptionPrice">
            <summary><em>Optional</em>. The amount of Telegram Stars a user must pay initially and after each subsequent subscription period to be a member of the chat using the link</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatJoinRequest">
            <summary>Represents a join request sent to a chat.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatJoinRequest.Chat">
            <summary>Chat to which the request was sent</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatJoinRequest.From">
            <summary>User that sent the join request</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatJoinRequest.UserChatId">
            <summary>Identifier of a private chat with the user who sent the join request. The bot can use this identifier for 5 minutes to send messages until the join request is processed, assuming no other administrator contacted the user.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatJoinRequest.Date">
            <summary>Date the request was sent</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatJoinRequest.Bio">
            <summary><em>Optional</em>. Bio of the user.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatJoinRequest.InviteLink">
            <summary><em>Optional</em>. Chat invite link that was used by the user to send the join request</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatLocation">
            <summary>Represents a location to which a chat is connected.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatLocation.Location">
            <summary>The location to which the supergroup is connected. Can't be a live location.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatLocation.Address">
            <summary>Location address; 1-64 characters, as defined by the chat owner</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMember">
            <summary>This object contains information about one member of a chat. Currently, the following 6 types of chat members are supported:<br/><see cref="T:Telegram.Bot.Types.ChatMemberOwner"/>, <see cref="T:Telegram.Bot.Types.ChatMemberAdministrator"/>, <see cref="T:Telegram.Bot.Types.ChatMemberMember"/>, <see cref="T:Telegram.Bot.Types.ChatMemberRestricted"/>, <see cref="T:Telegram.Bot.Types.ChatMemberLeft"/>, <see cref="T:Telegram.Bot.Types.ChatMemberBanned"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMember.Status">
            <summary>The member's status in the chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMember.User">
            <summary>Information about the user</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberOwner">
            <summary>Represents a <see cref="T:Telegram.Bot.Types.ChatMember">chat member</see> that owns the chat and has all administrator privileges.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberOwner.Status">
            <summary>The member's status in the chat, always <see cref="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Creator"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberOwner.IsAnonymous">
            <summary><see langword="true"/>, if the user's presence in the chat is hidden</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberOwner.CustomTitle">
            <summary><em>Optional</em>. Custom title for this user</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberAdministrator">
            <summary>Represents a <see cref="T:Telegram.Bot.Types.ChatMember">chat member</see> that has some additional privileges.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.Status">
            <summary>The member's status in the chat, always <see cref="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Administrator"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanBeEdited">
            <summary><see langword="true"/>, if the bot is allowed to edit administrator privileges of that user</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.IsAnonymous">
            <summary><see langword="true"/>, if the user's presence in the chat is hidden</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanManageChat">
            <summary><see langword="true"/>, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanDeleteMessages">
            <summary><see langword="true"/>, if the administrator can delete messages of other users</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanManageVideoChats">
            <summary><see langword="true"/>, if the administrator can manage video chats</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanRestrictMembers">
            <summary><see langword="true"/>, if the administrator can restrict, ban or unban chat members, or access supergroup statistics</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanPromoteMembers">
            <summary><see langword="true"/>, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user)</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanChangeInfo">
            <summary><see langword="true"/>, if the user is allowed to change the chat title, photo and other settings</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanInviteUsers">
            <summary><see langword="true"/>, if the user is allowed to invite new users to the chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanPostStories">
            <summary><see langword="true"/>, if the administrator can post stories to the chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanEditStories">
            <summary><see langword="true"/>, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanDeleteStories">
            <summary><see langword="true"/>, if the administrator can delete stories posted by other users</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanPostMessages">
            <summary><em>Optional</em>. <see langword="true"/>, if the administrator can post messages in the channel, or access channel statistics; for channels only</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanEditMessages">
            <summary><em>Optional</em>. <see langword="true"/>, if the administrator can edit messages of other users and can pin messages; for channels only</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanPinMessages">
            <summary><em>Optional</em>. <see langword="true"/>, if the user is allowed to pin messages; for groups and supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CanManageTopics">
            <summary><em>Optional</em>. <see langword="true"/>, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberAdministrator.CustomTitle">
            <summary><em>Optional</em>. Custom title for this user</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberMember">
            <summary>Represents a <see cref="T:Telegram.Bot.Types.ChatMember">chat member</see> that has no additional privileges or restrictions.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberMember.Status">
            <summary>The member's status in the chat, always <see cref="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Member"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberMember.UntilDate">
            <summary><em>Optional</em>. Date when the user's subscription will expire; Unix time</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberRestricted">
            <summary>Represents a <see cref="T:Telegram.Bot.Types.ChatMember">chat member</see> that is under certain restrictions in the chat. Supergroups only.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.Status">
            <summary>The member's status in the chat, always <see cref="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Restricted"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.IsMember">
            <summary><see langword="true"/>, if the user is a member of the chat at the moment of the request</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendMessages">
            <summary><see langword="true"/>, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendAudios">
            <summary><see langword="true"/>, if the user is allowed to send audios</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendDocuments">
            <summary><see langword="true"/>, if the user is allowed to send documents</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendPhotos">
            <summary><see langword="true"/>, if the user is allowed to send photos</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendVideos">
            <summary><see langword="true"/>, if the user is allowed to send videos</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendVideoNotes">
            <summary><see langword="true"/>, if the user is allowed to send video notes</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendVoiceNotes">
            <summary><see langword="true"/>, if the user is allowed to send voice notes</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendPolls">
            <summary><see langword="true"/>, if the user is allowed to send polls</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanSendOtherMessages">
            <summary><see langword="true"/>, if the user is allowed to send animations, games, stickers and use inline bots</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanAddWebPagePreviews">
            <summary><see langword="true"/>, if the user is allowed to add web page previews to their messages</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanChangeInfo">
            <summary><see langword="true"/>, if the user is allowed to change the chat title, photo and other settings</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanInviteUsers">
            <summary><see langword="true"/>, if the user is allowed to invite new users to the chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanPinMessages">
            <summary><see langword="true"/>, if the user is allowed to pin messages</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.CanManageTopics">
            <summary><see langword="true"/>, if the user is allowed to create forum topics</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberRestricted.UntilDate">
            <summary>Date when restrictions will be lifted for this user, in UTC. If unset, then the user is restricted forever</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberLeft">
            <summary>Represents a <see cref="T:Telegram.Bot.Types.ChatMember">chat member</see> that isn't currently a member of the chat, but may join it themselves.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberLeft.Status">
            <summary>The member's status in the chat, always <see cref="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Left"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberBanned">
            <summary>Represents a <see cref="T:Telegram.Bot.Types.ChatMember">chat member</see> that was banned in the chat and can't return to the chat or view chat messages.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberBanned.Status">
            <summary>The member's status in the chat, always <see cref="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Kicked"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberBanned.UntilDate">
            <summary>Date when restrictions will be lifted for this user, in UTC. If unset, then the user is banned forever</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMemberUpdated">
            <summary>This object represents changes in the status of a chat member.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.Chat">
            <summary>Chat the user belongs to</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.From">
            <summary>Performer of the action, which resulted in the change</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.Date">
            <summary>Date the change was done</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.OldChatMember">
            <summary>Previous information about the chat member</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.NewChatMember">
            <summary>New information about the chat member</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.InviteLink">
            <summary><em>Optional</em>. Chat invite link, which was used by the user to join the chat; for joining by invite link events only.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.ViaJoinRequest">
            <summary><em>Optional</em>. <see langword="true"/>, if the user joined the chat after sending a direct join request without using an invite link and being approved by an administrator</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMemberUpdated.ViaChatFolderInviteLink">
            <summary><em>Optional</em>. <see langword="true"/>, if the user joined the chat via a chat folder invite link</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatPermissions">
            <summary>Describes actions that a non-administrator user is allowed to take in a chat.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendMessages">
            <summary><em>Optional</em>. <see langword="true"/>, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendAudios">
            <summary><em>Optional</em>. <see langword="true"/>, if the user is allowed to send audios</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendDocuments">
            <summary><em>Optional</em>. <see langword="true"/>, if the user is allowed to send documents</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendPhotos">
            <summary><em>Optional</em>. <see langword="true"/>, if the user is allowed to send photos</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendVideos">
            <summary><em>Optional</em>. <see langword="true"/>, if the user is allowed to send videos</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendVideoNotes">
            <summary><em>Optional</em>. <see langword="true"/>, if the user is allowed to send video notes</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendVoiceNotes">
            <summary><em>Optional</em>. <see langword="true"/>, if the user is allowed to send voice notes</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendPolls">
            <summary><em>Optional</em>. <see langword="true"/>, if the user is allowed to send polls</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanSendOtherMessages">
            <summary><em>Optional</em>. <see langword="true"/>, if the user is allowed to send animations, games, stickers and use inline bots</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanAddWebPagePreviews">
            <summary><em>Optional</em>. <see langword="true"/>, if the user is allowed to add web page previews to their messages</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanChangeInfo">
            <summary><em>Optional</em>. <see langword="true"/>, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanInviteUsers">
            <summary><em>Optional</em>. <see langword="true"/>, if the user is allowed to invite new users to the chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanPinMessages">
            <summary><em>Optional</em>. <see langword="true"/>, if the user is allowed to pin messages. Ignored in public supergroups</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPermissions.CanManageTopics">
            <summary><em>Optional</em>. <see langword="true"/>, if the user is allowed to create forum topics. If omitted defaults to the value of <see cref="P:Telegram.Bot.Types.ChatPermissions.CanPinMessages">CanPinMessages</see></summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatPhoto">
            <summary>This object represents a chat photo.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPhoto.SmallFileId">
            <summary>File identifier of small (160x160) chat photo. This FileId can be used only for photo download and only for as long as the photo is not changed.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPhoto.SmallFileUniqueId">
            <summary>Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPhoto.BigFileId">
            <summary>File identifier of big (640x640) chat photo. This FileId can be used only for photo download and only for as long as the photo is not changed.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatPhoto.BigFileUniqueId">
            <summary>Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatShared">
            <summary>This object contains information about a chat that was shared with the bot using a <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestChat"/> button.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatShared.RequestId">
            <summary>Identifier of the request</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatShared.ChatId">
            <summary>Identifier of the shared chat. The bot may not have access to the chat and could be unable to use this identifier, unless the chat is already known to the bot by some other means.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatShared.Title">
            <summary><em>Optional</em>. Title of the chat, if the title was requested by the bot.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatShared.Username">
            <summary><em>Optional</em>. Username of the chat, if the username was requested by the bot and available.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatShared.Photo">
            <summary><em>Optional</em>. Available sizes of the chat photo, if the photo was requested by the bot</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChosenInlineResult">
            <summary>Represents a <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult">result</see> of an inline query that was chosen by the user and sent to their chat partner.<br/><b>Note:</b> It is necessary to enable <a href="https://core.telegram.org/bots/inline#collecting-feedback">inline feedback</a> via <a href="https://t.me/botfather">@BotFather</a> in order to receive these objects in updates.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChosenInlineResult.ResultId">
            <summary>The unique identifier for the result that was chosen</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChosenInlineResult.From">
            <summary>The user that chose the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChosenInlineResult.Location">
            <summary><em>Optional</em>. Sender location, only for bots that require user location</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChosenInlineResult.InlineMessageId">
            <summary><em>Optional</em>. Identifier of the sent inline message. Available only if there is an <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see> attached to the message. Will be also received in <see cref="T:Telegram.Bot.Types.CallbackQuery">callback queries</see> and can be used to <a href="https://core.telegram.org/bots/api#updating-messages">edit</a> the message.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChosenInlineResult.Query">
            <summary>The query that was used to obtain the result</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Color">
            <summary>Standard Telegram colors</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Color.BlueColor">
            <summary>Blue color</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Color.YellowColor">
            <summary>Yellow color</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Color.VioletColor">
            <summary>Violet color</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Color.GreenColor">
            <summary>Green color</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Color.PinkColor">
            <summary>Pink color</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Color.RedColor">
            <summary>Red color</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Contact">
            <summary>This object represents a phone contact.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Contact.PhoneNumber">
            <summary>Contact's phone number</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Contact.FirstName">
            <summary>Contact's first name</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Contact.LastName">
            <summary><em>Optional</em>. Contact's last name</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Contact.UserId">
            <summary><em>Optional</em>. Contact's user identifier in Telegram.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Contact.Vcard">
            <summary><em>Optional</em>. Additional data about the contact in the form of a <a href="https://en.wikipedia.org/wiki/VCard">vCard</a></summary>
        </member>
        <member name="T:Telegram.Bot.Types.CopyTextButton">
            <summary>This object represents an inline keyboard button that copies specified text to the clipboard.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.CopyTextButton.Text">
            <summary>The text to be copied to the clipboard; 1-256 characters</summary>
        </member>
        <member name="M:Telegram.Bot.Types.CopyTextButton.op_Implicit(Telegram.Bot.Types.CopyTextButton)~System.String">
            <summary>Implicit conversion to string (Text)</summary>
        </member>
        <member name="M:Telegram.Bot.Types.CopyTextButton.op_Implicit(System.String)~Telegram.Bot.Types.CopyTextButton">
            <summary>Implicit conversion from string (Text)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Dice">
            <summary>This object represents an animated emoji that displays a random value.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Dice.Emoji">
            <summary>Emoji on which the dice throw animation is based</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Dice.Value">
            <summary>Value of the dice, 1-6 for “🎲”, “🎯” and “🎳” base emoji, 1-5 for “🏀” and “⚽” base emoji, 1-64 for “🎰” base emoji</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Document">
            <summary>This object represents a general file (as opposed to <see cref="T:Telegram.Bot.Types.PhotoSize">photos</see>, <see cref="T:Telegram.Bot.Types.Voice">voice messages</see> and <see cref="T:Telegram.Bot.Types.Audio">audio files</see>).</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Document.Thumbnail">
            <summary><em>Optional</em>. Document thumbnail as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Document.FileName">
            <summary><em>Optional</em>. Original filename as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Document.MimeType">
            <summary><em>Optional</em>. MIME type of the file as defined by the sender</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.BackgroundFillType">
            <summary>Type of the background fill</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BackgroundFillType.Solid">
            <summary>The background is filled using the selected color.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.BackgroundFill"/> can be cast into <see cref="T:Telegram.Bot.Types.BackgroundFillSolid"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BackgroundFillType.Gradient">
            <summary>The background is a gradient fill.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.BackgroundFill"/> can be cast into <see cref="T:Telegram.Bot.Types.BackgroundFillGradient"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BackgroundFillType.FreeformGradient">
            <summary>The background is a freeform gradient that rotates after every message in the chat.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.BackgroundFill"/> can be cast into <see cref="T:Telegram.Bot.Types.BackgroundFillFreeformGradient"/>)</i></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.BackgroundTypeKind">
            <summary>Type of the background</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BackgroundTypeKind.Fill">
            <summary>The background is automatically filled based on the selected colors.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.BackgroundType"/> can be cast into <see cref="T:Telegram.Bot.Types.BackgroundTypeFill"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BackgroundTypeKind.Wallpaper">
            <summary>The background is a wallpaper in the JPEG format.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.BackgroundType"/> can be cast into <see cref="T:Telegram.Bot.Types.BackgroundTypeWallpaper"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BackgroundTypeKind.Pattern">
            <summary>The background is a PNG or TGV (gzipped subset of SVG with MIME type “application/x-tgwallpattern”) pattern to be combined with the background fill chosen by the user.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.BackgroundType"/> can be cast into <see cref="T:Telegram.Bot.Types.BackgroundTypePattern"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BackgroundTypeKind.ChatTheme">
            <summary>The background is taken directly from a built-in chat theme.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.BackgroundType"/> can be cast into <see cref="T:Telegram.Bot.Types.BackgroundTypeChatTheme"/>)</i></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.BotCommandScopeType">
            <summary>Scope type</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.Default">
            <summary>Represents the default <see cref="T:Telegram.Bot.Types.BotCommandScope">scope</see> of bot commands. Default commands are used if no commands with a <a href="https://core.telegram.org/bots/api#determining-list-of-commands">narrower scope</a> are specified for the user.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.BotCommandScope"/> can be cast into <see cref="T:Telegram.Bot.Types.BotCommandScopeDefault"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.AllPrivateChats">
            <summary>Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope">scope</see> of bot commands, covering all private chats.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.BotCommandScope"/> can be cast into <see cref="T:Telegram.Bot.Types.BotCommandScopeAllPrivateChats"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.AllGroupChats">
            <summary>Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope">scope</see> of bot commands, covering all group and supergroup chats.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.BotCommandScope"/> can be cast into <see cref="T:Telegram.Bot.Types.BotCommandScopeAllGroupChats"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.AllChatAdministrators">
            <summary>Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope">scope</see> of bot commands, covering all group and supergroup chat administrators.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.BotCommandScope"/> can be cast into <see cref="T:Telegram.Bot.Types.BotCommandScopeAllChatAdministrators"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.Chat">
            <summary>Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope">scope</see> of bot commands, covering a specific chat.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.BotCommandScope"/> can be cast into <see cref="T:Telegram.Bot.Types.BotCommandScopeChat"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.ChatAdministrators">
            <summary>Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope">scope</see> of bot commands, covering all administrators of a specific group or supergroup chat.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.BotCommandScope"/> can be cast into <see cref="T:Telegram.Bot.Types.BotCommandScopeChatAdministrators"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.BotCommandScopeType.ChatMember">
            <summary>Represents the <see cref="T:Telegram.Bot.Types.BotCommandScope">scope</see> of bot commands, covering a specific member of a group or supergroup chat.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.BotCommandScope"/> can be cast into <see cref="T:Telegram.Bot.Types.BotCommandScopeChatMember"/>)</i></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.ChatAction">
            <summary>Type of action to broadcast</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.Typing">
            <summary>Typing some text</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.UploadPhoto">
            <summary>Uploading a <see cref="T:Telegram.Bot.Types.PhotoSize"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.RecordVideo">
            <summary>Recording a <see cref="T:Telegram.Bot.Types.Video"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.UploadVideo">
            <summary>Uploading a <see cref="T:Telegram.Bot.Types.Video"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.RecordVoice">
            <summary>Recording a <see cref="T:Telegram.Bot.Types.Voice"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.UploadVoice">
            <summary>Uploading a <see cref="T:Telegram.Bot.Types.Voice"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.UploadDocument">
            <summary>Uploading a <see cref="T:Telegram.Bot.Types.Document"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.FindLocation">
            <summary>Finding a <see cref="T:Telegram.Bot.Types.Location"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.RecordVideoNote">
            <summary>Recording a <see cref="T:Telegram.Bot.Types.VideoNote"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.UploadVideoNote">
            <summary>Uploading a <see cref="T:Telegram.Bot.Types.VideoNote"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatAction.ChooseSticker">
            <summary>Choosing a <see cref="T:Telegram.Bot.Types.Sticker"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.ChatBoostSourceType">
            <summary>Source of the boost</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatBoostSourceType.Premium">
            <summary>The boost was obtained by subscribing to Telegram Premium or by gifting a Telegram Premium subscription to another user.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.ChatBoostSource"/> can be cast into <see cref="T:Telegram.Bot.Types.ChatBoostSourcePremium"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatBoostSourceType.GiftCode">
            <summary>The boost was obtained by the creation of Telegram Premium gift codes to boost a chat. Each such code boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.ChatBoostSource"/> can be cast into <see cref="T:Telegram.Bot.Types.ChatBoostSourceGiftCode"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatBoostSourceType.Giveaway">
            <summary>The boost was obtained by the creation of a Telegram Premium or a Telegram Star giveaway. This boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription for Telegram Premium giveaways and <see cref="P:Telegram.Bot.Types.ChatBoostSourceGiveaway.PrizeStarCount">PrizeStarCount</see> / 500 times for one year for Telegram Star giveaways.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.ChatBoostSource"/> can be cast into <see cref="T:Telegram.Bot.Types.ChatBoostSourceGiveaway"/>)</i></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.ChatMemberStatus">
            <summary>The member's status in the chat</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Creator">
            <summary>Represents a <see cref="T:Telegram.Bot.Types.ChatMember">chat member</see> that owns the chat and has all administrator privileges.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.ChatMember"/> can be cast into <see cref="T:Telegram.Bot.Types.ChatMemberOwner"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Administrator">
            <summary>Represents a <see cref="T:Telegram.Bot.Types.ChatMember">chat member</see> that has some additional privileges.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.ChatMember"/> can be cast into <see cref="T:Telegram.Bot.Types.ChatMemberAdministrator"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Member">
            <summary>Represents a <see cref="T:Telegram.Bot.Types.ChatMember">chat member</see> that has no additional privileges or restrictions.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.ChatMember"/> can be cast into <see cref="T:Telegram.Bot.Types.ChatMemberMember"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Left">
            <summary>Represents a <see cref="T:Telegram.Bot.Types.ChatMember">chat member</see> that isn't currently a member of the chat, but may join it themselves.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.ChatMember"/> can be cast into <see cref="T:Telegram.Bot.Types.ChatMemberLeft"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Kicked">
            <summary>Represents a <see cref="T:Telegram.Bot.Types.ChatMember">chat member</see> that was banned in the chat and can't return to the chat or view chat messages.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.ChatMember"/> can be cast into <see cref="T:Telegram.Bot.Types.ChatMemberBanned"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatMemberStatus.Restricted">
            <summary>Represents a <see cref="T:Telegram.Bot.Types.ChatMember">chat member</see> that is under certain restrictions in the chat. Supergroups only.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.ChatMember"/> can be cast into <see cref="T:Telegram.Bot.Types.ChatMemberRestricted"/>)</i></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.ChatType">
            <summary>Type of the <see cref="T:Telegram.Bot.Types.Chat"/>, from which the inline query was sent</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatType.Private">
            <summary>Normal one-to-one chat with a user or bot</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatType.Group">
            <summary>Normal group chat</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatType.Channel">
            <summary>A channel</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatType.Supergroup">
            <summary>A supergroup</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ChatType.Sender">
            <summary>Value possible only in <see cref="P:Telegram.Bot.Types.InlineQuery.ChatType"/>: private chat with the inline query sender</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.Emoji">
            <summary>Emoji on which the dice throw animation is based</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.Emoji.Dice">
            <summary>Dice. Resulting value is 1-6</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.Emoji.Darts">
            <summary>Darts. Resulting value is 1-6</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.Emoji.Basketball">
            <summary>Basketball. Resulting value is 1-5</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.Emoji.Football">
            <summary>Football. Resulting value is 1-5</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.Emoji.SlotMachine">
            <summary>Slot machine. Resulting value is 1-64</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.Emoji.Bowling">
            <summary>Bowling. Result value is 1-6</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.FileIdType">
            <summary>Type of file referenced by a FileId string</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.FileType">
            <summary>Type of a <see cref="T:Telegram.Bot.Types.InputFile"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.FileType.Stream">
            <summary>FileStream</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.FileType.Id">
            <summary>FileId</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.FileType.Url">
            <summary>File URL</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.InputMediaType">
            <summary>Type of the result</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.InputMediaType.Photo">
            <summary>Represents a photo to be sent.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.InputMedia"/> can be cast into <see cref="T:Telegram.Bot.Types.InputMediaPhoto"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.InputMediaType.Video">
            <summary>Represents a video to be sent.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.InputMedia"/> can be cast into <see cref="T:Telegram.Bot.Types.InputMediaVideo"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.InputMediaType.Animation">
            <summary>Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.InputMedia"/> can be cast into <see cref="T:Telegram.Bot.Types.InputMediaAnimation"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.InputMediaType.Audio">
            <summary>Represents an audio file to be treated as music to be sent.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.InputMedia"/> can be cast into <see cref="T:Telegram.Bot.Types.InputMediaAudio"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.InputMediaType.Document">
            <summary>Represents a general file to be sent.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.InputMedia"/> can be cast into <see cref="T:Telegram.Bot.Types.InputMediaDocument"/>)</i></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.InputPaidMediaType">
            <summary>Type of the media</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.InputPaidMediaType.Photo">
            <summary>The paid media to send is a photo.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.InputPaidMedia"/> can be cast into <see cref="T:Telegram.Bot.Types.InputPaidMediaPhoto"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.InputPaidMediaType.Video">
            <summary>The paid media to send is a video.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.InputPaidMedia"/> can be cast into <see cref="T:Telegram.Bot.Types.InputPaidMediaVideo"/>)</i></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji">
            <summary>Reaction emoji.</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ThumbsUp">
            <summary>Thumbs Up Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ThumbsDown">
            <summary>Thumbs Down Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.RedHeart">
            <summary>Red Heart Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Fire">
            <summary>Fire Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SmilingFaceWithHearts">
            <summary>Smiling Face with Hearts Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ClappingHands">
            <summary>Clapping Hands Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.BeamingFaceWithSmilingEyes">
            <summary>Beaming Face with Smiling Eyes Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ThinkingFace">
            <summary>Thinking Face Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ExplodingHead">
            <summary>Exploding Head Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.FaceScreamingInFear">
            <summary>Face Screaming in Fear Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.FaceWithSymbolsOnMouth">
            <summary>Face with Symbols on Mouth Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.CryingFace">
            <summary>Crying Face Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.PartyPopper">
            <summary>Party Popper Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.StarStruck">
            <summary>Star-Struck Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.FaceVomiting">
            <summary>Face Vomiting Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.PileOfPoo">
            <summary>Pile of Poo Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.FoldedHands">
            <summary>Folded Hands Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.OkHand">
            <summary>OK Hand Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Dove">
            <summary>Dove Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ClownFace">
            <summary>Clown Face Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.YawningFace">
            <summary>Yawning Face Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.WoozyFace">
            <summary>Woozy Face Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SmilingFaceWithHeartEyes">
            <summary>Smiling Face with Heart-Eyes Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SpoutingWhale">
            <summary>Spouting Whale Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.HeartOnFire">
            <summary>Heart on Fire Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.NewMoonFace">
            <summary>New Moon Face Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.HotDog">
            <summary>Hot Dog Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.HundredPoints">
            <summary>Hundred Points Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.RollingOnTheFloorLaughing">
            <summary>Rolling on the Floor Laughing Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.HighVoltage">
            <summary>High Voltage Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Banana">
            <summary>Banana Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Trophy">
            <summary>Trophy Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.BrokenHeart">
            <summary>Broken Heart Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.FaceWithRaisedEyebrow">
            <summary>Face with Raised Eyebrow Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.NeutralFace">
            <summary>Neutral Face Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Strawberry">
            <summary> Strawberry Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.BottleWithPoppingCork">
            <summary>Bottle with Popping Cork Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.KissMark">
            <summary> Kiss Mark Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.MiddleFinger">
            <summary> Middle Finger Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SmilingFaceWithHorns">
            <summary>Smiling Face with Horns Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SleepingFace">
            <summary>Sleeping Face Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.LoudlyCryingFace">
            <summary>Loudly Crying Face Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.NerdFace">
            <summary>Nerd Face Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Ghost">
            <summary>Ghost Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ManTechnologist">
            <summary>Man Technologist Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Eyes">
            <summary>Eyes Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.JackOLantern">
            <summary>Jack-O-Lantern Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SeeNoEvilMonkey">
            <summary>See-No-Evil Monkey Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SmilingFaceWithHalo">
            <summary>Smiling Face with Halo Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.FearfulFace">
            <summary>Fearful Face Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Handshake">
            <summary>Handshake Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.WritingHand">
            <summary>Writing Hand Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SmilingFaceWithOpenHands">
            <summary>Smiling Face with Open Hands Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SalutingFace">
            <summary>Saluting Face Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SantaClaus">
            <summary>Santa Claus Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ChristmasTree">
            <summary>Christmas Tree Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Snowman">
            <summary>Snowman Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.NailPolish">
            <summary>Nail Polish Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ZanyFace">
            <summary>Zany Face Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Moai">
            <summary>Moai Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.CoolButton">
            <summary>Cool Button Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.HeartWithArrow">
            <summary>Heart with Arrow Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.HearNoEvilMonkey">
            <summary>Hear-No-Evil Monkey Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Unicorn">
            <summary>Unicorn Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.FaceBlowingAKiss">
            <summary>Face Blowing a Kiss Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.Pill">
            <summary>Pill Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SpeakNoEvilMonkey">
            <summary>Speak-No-Evil Monkey Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.SmilingFaceWithSunglasses">
            <summary>Smiling Face with Sunglasses Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.AlienMonster">
            <summary>Alien Monster Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ManShrugging">
            <summary>Man Shrugging Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.ShruggingPerson">
            <summary>Shrugging Person Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.WomanShrugging">
            <summary>Woman Shrugging Emoji</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.KnownReactionTypeEmoji.EnragedFace">
            <summary>Enraged Face Emoji</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.MaskPositionPoint">
            <summary><see cref="T:Telegram.Bot.Types.MaskPosition"/>: The part of the face relative to which the mask should be placed. One of <see cref="F:Telegram.Bot.Types.Enums.MaskPositionPoint.Forehead">Forehead</see>, <see cref="F:Telegram.Bot.Types.Enums.MaskPositionPoint.Eyes">Eyes</see>, <see cref="F:Telegram.Bot.Types.Enums.MaskPositionPoint.Mouth">Mouth</see>, or <see cref="F:Telegram.Bot.Types.Enums.MaskPositionPoint.Chin">Chin</see>.</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MaskPositionPoint.Forehead">
            <summary>“forehead” point</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MaskPositionPoint.Eyes">
            <summary>“eyes” point</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MaskPositionPoint.Mouth">
            <summary>“mouth” point</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MaskPositionPoint.Chin">
            <summary>“chin” point</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.MenuButtonType">
            <summary>Type of the button</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MenuButtonType.Default">
            <summary>Describes that no specific value for the menu button was set.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.MenuButton"/> can be cast into <see cref="T:Telegram.Bot.Types.MenuButtonDefault"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MenuButtonType.Commands">
            <summary>Represents a menu button, which opens the bot's list of commands.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.MenuButton"/> can be cast into <see cref="T:Telegram.Bot.Types.MenuButtonCommands"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MenuButtonType.WebApp">
            <summary>Represents a menu button, which launches a <a href="https://core.telegram.org/bots/webapps">Web App</a>.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.MenuButton"/> can be cast into <see cref="T:Telegram.Bot.Types.MenuButtonWebApp"/>)</i></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.MessageEntityType">
            <summary>Type of a <see cref="T:Telegram.Bot.Types.MessageEntity"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Mention">
            <summary>A mentioned <see cref="T:Telegram.Bot.Types.User"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Hashtag">
            <summary>A searchable Hashtag</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.BotCommand">
            <summary>A Bot command</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Url">
            <summary>An URL</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Email">
            <summary>An email</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Bold">
            <summary>Bold text</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Italic">
            <summary>Italic text</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Code">
            <summary>Monowidth string</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Pre">
            <summary>Monowidth block</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.TextLink">
            <summary>Clickable text URLs</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.TextMention">
            <summary>Mentions for a <see cref="T:Telegram.Bot.Types.User"/> without <see cref="P:Telegram.Bot.Types.User.Username"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.PhoneNumber">
            <summary>Phone number</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Cashtag">
            <summary>A cashtag (e.g. $EUR, $USD) - $ followed by the short currency code</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Underline">
            <summary>Underlined text</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Strikethrough">
            <summary>Strikethrough text</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Spoiler">
            <summary>Spoiler message</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.CustomEmoji">
            <summary>Inline custom emoji stickers</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.Blockquote">
            <summary>Block quotation</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageEntityType.ExpandableBlockquote">
            <summary>Collapsed-by-default block quotation</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.MessageOriginType">
            <summary>Type of the message origin</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageOriginType.User">
            <summary>The message was originally sent by a known user.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.MessageOrigin"/> can be cast into <see cref="T:Telegram.Bot.Types.MessageOriginUser"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageOriginType.HiddenUser">
            <summary>The message was originally sent by an unknown user.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.MessageOrigin"/> can be cast into <see cref="T:Telegram.Bot.Types.MessageOriginHiddenUser"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageOriginType.Chat">
            <summary>The message was originally sent on behalf of a chat to a group chat.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.MessageOrigin"/> can be cast into <see cref="T:Telegram.Bot.Types.MessageOriginChat"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageOriginType.Channel">
            <summary>The message was originally sent to a channel chat.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.MessageOrigin"/> can be cast into <see cref="T:Telegram.Bot.Types.MessageOriginChannel"/>)</i></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.MessageType">
            <summary>The type of <see cref="T:Telegram.Bot.Types.Message"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Unknown">
            <summary><see cref="T:Telegram.Bot.Types.Message"/> type is unknown</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Text">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Text"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Photo">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Photo"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Audio">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains an <see cref="P:Telegram.Bot.Types.Message.Audio"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Video">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Video"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Voice">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Voice"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Document">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Document"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Sticker">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Sticker"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Location">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Location"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Contact">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Contact"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Venue">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Venue"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Game">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Game"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.VideoNote">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.VideoNote"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Invoice">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains an <see cref="P:Telegram.Bot.Types.Message.Invoice"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.SuccessfulPayment">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.SuccessfulPayment"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ConnectedWebsite">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.ConnectedWebsite"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.NewChatMembers">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.NewChatMembers"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.LeftChatMember">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.LeftChatMember"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.NewChatTitle">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.NewChatTitle"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.NewChatPhoto">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.NewChatPhoto"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.PinnedMessage">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.PinnedMessage"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.DeleteChatPhoto">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.DeleteChatPhoto"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.GroupChatCreated">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.GroupChatCreated"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.SupergroupChatCreated">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.SupergroupChatCreated"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ChannelChatCreated">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.ChannelChatCreated"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.MigrateFromChatId">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.MigrateFromChatId"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.MigrateToChatId">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.MigrateToChatId"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Poll">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Poll"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Dice">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Dice"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.MessageAutoDeleteTimerChanged">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.MessageAutoDeleteTimerChanged"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ProximityAlertTriggered">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.ProximityAlertTriggered"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.WebAppData">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.WebAppData"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.VideoChatScheduled">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.VideoChatScheduled"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.VideoChatStarted">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.VideoChatStarted"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.VideoChatEnded">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.VideoChatEnded"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.VideoChatParticipantsInvited">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.VideoChatParticipantsInvited"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Animation">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains an <see cref="P:Telegram.Bot.Types.Message.Animation"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ForumTopicCreated">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.ForumTopicCreated"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ForumTopicClosed">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.ForumTopicClosed"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ForumTopicReopened">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.ForumTopicReopened"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ForumTopicEdited">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.ForumTopicEdited"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.GeneralForumTopicHidden">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.GeneralForumTopicHidden"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.GeneralForumTopicUnhidden">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.GeneralForumTopicUnhidden"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.WriteAccessAllowed">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.WriteAccessAllowed"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.UsersShared">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains an <see cref="P:Telegram.Bot.Types.Message.UsersShared"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ChatShared">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.ChatShared"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Story">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Story"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.PassportData">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.PassportData"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.GiveawayCreated">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.GiveawayCreated"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.Giveaway">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.Giveaway"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.GiveawayWinners">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.GiveawayWinners"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.GiveawayCompleted">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.GiveawayCompleted"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.BoostAdded">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.BoostAdded"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.ChatBackgroundSet">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.ChatBackgroundSet"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.PaidMedia">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.PaidMedia"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.MessageType.RefundedPayment">
            <summary>The <see cref="T:Telegram.Bot.Types.Message"/> contains a <see cref="P:Telegram.Bot.Types.Message.RefundedPayment"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.PaidMediaType">
            <summary>Type of the paid media, always <see cref="T:Telegram.Bot.Types.PaidMedia"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.PaidMediaType.Preview">
            <summary>The paid media isn't available before the payment.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.PaidMedia"/> can be cast into <see cref="T:Telegram.Bot.Types.PaidMediaPreview"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.PaidMediaType.Photo">
            <summary>The paid media is a photo.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.PaidMedia"/> can be cast into <see cref="T:Telegram.Bot.Types.PaidMediaPhoto"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.PaidMediaType.Video">
            <summary>The paid media is a video.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.PaidMedia"/> can be cast into <see cref="T:Telegram.Bot.Types.PaidMediaVideo"/>)</i></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.ParseMode">
            <summary>Text parsing mode. See <a href="https://core.telegram.org/bots/api#formatting-options"/>
            <para>The Bot API supports basic formatting for messages. You can use bold, italic, underlined, strikethrough,
            spoiler text, block quotations as well as inline links and pre-formatted code in your bots' messages.
            Telegram clients will render them accordingly.
            You can specify text entities directly, or use markdown-style or HTML-style formatting.</para>
            </summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ParseMode.None">
            <summary>The message text is plain text, possibly with explicit entities</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ParseMode.Markdown">
            <summary>The message text is Markdown-formatted</summary>
            <remarks>This is a legacy mode, retained for backward compatibility</remarks>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ParseMode.Html">
            <summary>The message text is HTML-formatted</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ParseMode.MarkdownV2">
            <summary>The message text is MarkdownV2-formatted</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.PollType">
            <summary>Type of <see cref="T:Telegram.Bot.Types.Poll"/></summary>
            <remarks>This enum is used only in the library APIs and is not present in types that are coming from Telegram servers for compatibility reasons</remarks>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.PollType.Regular">
            <summary>Regular poll</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.PollType.Quiz">
            <summary>Quiz</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.ReactionTypeKind">
            <summary>Type of the reaction</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ReactionTypeKind.Emoji">
            <summary>The reaction is based on an emoji.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.ReactionType"/> can be cast into <see cref="T:Telegram.Bot.Types.ReactionTypeEmoji"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ReactionTypeKind.CustomEmoji">
            <summary>The reaction is based on a custom emoji.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.ReactionType"/> can be cast into <see cref="T:Telegram.Bot.Types.ReactionTypeCustomEmoji"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.ReactionTypeKind.Paid">
            <summary>The reaction is paid.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.ReactionType"/> can be cast into <see cref="T:Telegram.Bot.Types.ReactionTypePaid"/>)</i></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.StickerFormat">
            <summary><see cref="T:Telegram.Bot.Types.Sticker"/>: Format of the added sticker, must be one of <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Static">Static</see> for a <b>.WEBP</b> or <b>.PNG</b> image, <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Animated">Animated</see> for a <b>.TGS</b> animation, <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Video">Video</see> for a <b>WEBM</b> video</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.StickerFormat.Static">
            <summary>“static” format</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.StickerFormat.Animated">
            <summary>“animated” format</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.StickerFormat.Video">
            <summary>“video” format</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.StickerType">
            <summary><see cref="T:Telegram.Bot.Types.Sticker"/>: Type of the sticker, currently one of <see cref="F:Telegram.Bot.Types.Enums.StickerType.Regular">Regular</see>, <see cref="F:Telegram.Bot.Types.Enums.StickerType.Mask">Mask</see>, <see cref="F:Telegram.Bot.Types.Enums.StickerType.CustomEmoji">CustomEmoji</see>. The type of the sticker is independent from its format, which is determined by the fields <em>IsAnimated</em> and <em>IsVideo</em>.</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.StickerType.Regular">
            <summary>“regular” type</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.StickerType.Mask">
            <summary>“mask” type</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.StickerType.CustomEmoji">
            <summary>“CustomEmoji” type</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.UpdateType">
            <summary>The type of <see cref="T:Telegram.Bot.Types.Update"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.Unknown">
            <summary><see cref="T:Telegram.Bot.Types.Update"/> type is unknown</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.Message">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.Message"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.InlineQuery">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains an <see cref="P:Telegram.Bot.Types.Update.InlineQuery"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.ChosenInlineResult">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.ChosenInlineResult"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.CallbackQuery">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.CallbackQuery"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.EditedMessage">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains an <see cref="P:Telegram.Bot.Types.Update.EditedMessage"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.ChannelPost">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.ChannelPost"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.EditedChannelPost">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains an <see cref="P:Telegram.Bot.Types.Update.EditedChannelPost"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.ShippingQuery">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.ShippingQuery"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.PreCheckoutQuery">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.PreCheckoutQuery"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.Poll">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.Poll"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.PollAnswer">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.PollAnswer"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.MyChatMember">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.MyChatMember"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.ChatMember">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.ChatMember"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.ChatJoinRequest">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.ChatJoinRequest"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.MessageReaction">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.MessageReaction"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.MessageReactionCount">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.MessageReactionCount"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.ChatBoost">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.ChatBoost"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.RemovedChatBoost">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.RemovedChatBoost"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.BusinessConnection">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.BusinessConnection"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.BusinessMessage">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.BusinessMessage"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.EditedBusinessMessage">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains an <see cref="P:Telegram.Bot.Types.Update.EditedBusinessMessage"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.DeletedBusinessMessages">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.DeletedBusinessMessages"/></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Enums.UpdateType.PurchasedPaidMedia">
            <summary>The <see cref="T:Telegram.Bot.Types.Update"/> contains a <see cref="P:Telegram.Bot.Types.Update.PurchasedPaidMedia"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.ExternalReplyInfo">
            <summary>This object contains information about a message that is being replied to, which may come from another chat or forum topic.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Origin">
            <summary>Origin of the message replied to by the given message</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Chat">
            <summary><em>Optional</em>. Chat the original message belongs to. Available only if the chat is a supergroup or a channel.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.MessageId">
            <summary><em>Optional</em>. Unique message identifier inside the original chat. Available only if the original chat is a supergroup or a channel.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.LinkPreviewOptions">
            <summary><em>Optional</em>. Options used for link preview generation for the original message, if it is a text message</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Animation">
            <summary><em>Optional</em>. Message is an animation, information about the animation</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Audio">
            <summary><em>Optional</em>. Message is an audio file, information about the file</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Document">
            <summary><em>Optional</em>. Message is a general file, information about the file</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.PaidMedia">
            <summary><em>Optional</em>. Message contains paid media; information about the paid media</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Photo">
            <summary><em>Optional</em>. Message is a photo, available sizes of the photo</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Sticker">
            <summary><em>Optional</em>. Message is a sticker, information about the sticker</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Story">
            <summary><em>Optional</em>. Message is a forwarded story</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Video">
            <summary><em>Optional</em>. Message is a video, information about the video</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.VideoNote">
            <summary><em>Optional</em>. Message is a <a href="https://telegram.org/blog/video-messages-and-telescope">video note</a>, information about the video message</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Voice">
            <summary><em>Optional</em>. Message is a voice message, information about the file</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.HasMediaSpoiler">
            <summary><em>Optional</em>. <see langword="true"/>, if the message media is covered by a spoiler animation</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Contact">
            <summary><em>Optional</em>. Message is a shared contact, information about the contact</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Dice">
            <summary><em>Optional</em>. Message is a dice with random value</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Game">
            <summary><em>Optional</em>. Message is a game, information about the game. <a href="https://core.telegram.org/bots/api#games">More about games »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Giveaway">
            <summary><em>Optional</em>. Message is a scheduled giveaway, information about the giveaway</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.GiveawayWinners">
            <summary><em>Optional</em>. A giveaway with public winners was completed</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Invoice">
            <summary><em>Optional</em>. Message is an invoice for a <a href="https://core.telegram.org/bots/api#payments">payment</a>, information about the invoice. <a href="https://core.telegram.org/bots/api#payments">More about payments »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Location">
            <summary><em>Optional</em>. Message is a shared location, information about the location</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Poll">
            <summary><em>Optional</em>. Message is a native poll, information about the poll</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ExternalReplyInfo.Venue">
            <summary><em>Optional</em>. Message is a venue, information about the venue</summary>
        </member>
        <member name="T:Telegram.Bot.Types.File">
            <summary>This object represents a file ready to be downloaded. The file can be downloaded via <see cref="M:Telegram.Bot.TelegramBotClient.DownloadFile(System.String,System.IO.Stream,System.Threading.CancellationToken)">DownloadFile</see>. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetFile(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">GetFile</see>.</summary>
            <remarks>The maximum file size to download is 20 MB</remarks>
        </member>
        <member name="P:Telegram.Bot.Types.File.FilePath">
            <summary><em>Optional</em>. File path. Use <see cref="M:Telegram.Bot.TelegramBotClient.DownloadFile(System.String,System.IO.Stream,System.Threading.CancellationToken)">DownloadFile</see> to get the file.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.FileBase">
            <summary>Base class for file objects</summary>
        </member>
        <member name="P:Telegram.Bot.Types.FileBase.FileId">
            <summary>Identifier for this file, which can be used to download or reuse the file</summary>
        </member>
        <member name="P:Telegram.Bot.Types.FileBase.FileUniqueId">
            <summary>Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.FileBase.FileSize">
            <summary><em>Optional</em>. File size in bytes.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ForumTopic">
            <summary>This object represents a forum topic.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ForumTopic.MessageThreadId">
            <summary>Unique identifier of the forum topic</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ForumTopic.Name">
            <summary>Name of the topic</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ForumTopic.IconColor">
            <summary>Color of the topic icon in RGB format</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ForumTopic.IconCustomEmojiId">
            <summary><em>Optional</em>. Unique identifier of the custom emoji shown as the topic icon</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ForumTopicClosed">
            <summary>This object represents a service message about a forum topic closed in the chat. Currently holds no information.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ForumTopicCreated">
            <summary>This object represents a service message about a new forum topic created in the chat.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ForumTopicCreated.Name">
            <summary>Name of the topic</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ForumTopicCreated.IconColor">
            <summary>Color of the topic icon in RGB format</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ForumTopicCreated.IconCustomEmojiId">
            <summary><em>Optional</em>. Unique identifier of the custom emoji shown as the topic icon</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ForumTopicEdited">
            <summary>This object represents a service message about an edited forum topic.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ForumTopicEdited.Name">
            <summary><em>Optional</em>. New name of the topic, if it was edited</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ForumTopicEdited.IconCustomEmojiId">
            <summary><em>Optional</em>. New identifier of the custom emoji shown as the topic icon, if it was edited; an empty string if the icon was removed</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ForumTopicReopened">
            <summary>This object represents a service message about a forum topic reopened in the chat. Currently holds no information.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Game">
            <summary>This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Game.Title">
            <summary>Title of the game</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Game.Description">
            <summary>Description of the game</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Game.Photo">
            <summary>Photo that will be displayed in the game message in chats.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Game.Text">
            <summary><em>Optional</em>. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetGameScore(Telegram.Bot.ITelegramBotClient,System.Int64,System.Int32,System.Int64,System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)">SetGameScore</see>, or manually edited using <see cref="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageText(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},Telegram.Bot.Types.LinkPreviewOptions,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">EditMessageText</see>. 0-4096 characters.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Game.TextEntities">
            <summary><em>Optional</em>. Special entities that appear in <see cref="P:Telegram.Bot.Types.Game.Text">Text</see>, such as usernames, URLs, bot commands, etc.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Game.Animation">
            <summary><em>Optional</em>. Animation that will be displayed in the game message in chats. Upload via <a href="https://t.me/botfather">@BotFather</a></summary>
        </member>
        <member name="T:Telegram.Bot.Types.GameHighScore">
            <summary>This object represents one row of the high scores table for a game.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GameHighScore.Position">
            <summary>Position in high score table for the game</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GameHighScore.User">
            <summary>User</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GameHighScore.Score">
            <summary>Score</summary>
        </member>
        <member name="T:Telegram.Bot.Types.GeneralForumTopicHidden">
            <summary>This object represents a service message about General forum topic hidden in the chat. Currently holds no information.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.GeneralForumTopicUnhidden">
            <summary>This object represents a service message about General forum topic unhidden in the chat. Currently holds no information.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Gift">
            <summary>This object represents a gift that can be sent by the bot.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Gift.Id">
            <summary>Unique identifier of the gift</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Gift.Sticker">
            <summary>The sticker that represents the gift</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Gift.StarCount">
            <summary>The number of Telegram Stars that must be paid to send the sticker</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Gift.TotalCount">
            <summary><em>Optional</em>. The total number of the gifts of this type that can be sent; for limited gifts only</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Gift.RemainingCount">
            <summary><em>Optional</em>. The number of remaining gifts of this type that can be sent; for limited gifts only</summary>
        </member>
        <member name="T:Telegram.Bot.Types.GiftList">
            <summary>This object represent a list of gifts.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiftList.Gifts">
            <summary>The list of gifts</summary>
        </member>
        <member name="M:Telegram.Bot.Types.GiftList.op_Implicit(Telegram.Bot.Types.GiftList)~Telegram.Bot.Types.Gift[]">
            <summary>Implicit conversion to Gift[] (Gifts)</summary>
        </member>
        <member name="M:Telegram.Bot.Types.GiftList.op_Implicit(Telegram.Bot.Types.Gift[])~Telegram.Bot.Types.GiftList">
            <summary>Implicit conversion from Gift[] (Gifts)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Giveaway">
            <summary>This object represents a message about a scheduled giveaway.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Giveaway.Chats">
            <summary>The list of chats which the user must join to participate in the giveaway</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Giveaway.WinnersSelectionDate">
            <summary>Point in time when winners of the giveaway will be selected</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Giveaway.WinnerCount">
            <summary>The number of users which are supposed to be selected as winners of the giveaway</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Giveaway.OnlyNewMembers">
            <summary><em>Optional</em>. <see langword="true"/>, if only users who join the chats after the giveaway started should be eligible to win</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Giveaway.HasPublicWinners">
            <summary><em>Optional</em>. <see langword="true"/>, if the list of giveaway winners will be visible to everyone</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Giveaway.PrizeDescription">
            <summary><em>Optional</em>. Description of additional giveaway prize</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Giveaway.CountryCodes">
            <summary><em>Optional</em>. A list of two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> country codes indicating the countries from which eligible users for the giveaway must come. If empty, then all users can participate in the giveaway. Users with a phone number that was bought on Fragment can always participate in giveaways.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Giveaway.PrizeStarCount">
            <summary><em>Optional</em>. The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Giveaway.PremiumSubscriptionMonthCount">
            <summary><em>Optional</em>. The number of months the Telegram Premium subscription won from the giveaway will be active for; for Telegram Premium giveaways only</summary>
        </member>
        <member name="T:Telegram.Bot.Types.GiveawayCompleted">
            <summary>This object represents a service message about the completion of a giveaway without public winners.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayCompleted.WinnerCount">
            <summary>Number of winners in the giveaway</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayCompleted.UnclaimedPrizeCount">
            <summary><em>Optional</em>. Number of undistributed prizes</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayCompleted.GiveawayMessage">
            <summary><em>Optional</em>. Message with the giveaway that was completed, if it wasn't deleted</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayCompleted.IsStarGiveaway">
            <summary><em>Optional</em>. <see langword="true"/>, if the giveaway is a Telegram Star giveaway. Otherwise, currently, the giveaway is a Telegram Premium giveaway.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.GiveawayCreated">
            <summary>This object represents a service message about the creation of a scheduled giveaway.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayCreated.PrizeStarCount">
            <summary><em>Optional</em>. The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only</summary>
        </member>
        <member name="M:Telegram.Bot.Types.GiveawayCreated.op_Implicit(Telegram.Bot.Types.GiveawayCreated)~System.Nullable{System.Int32}">
            <summary>Implicit conversion to int (PrizeStarCount)</summary>
        </member>
        <member name="M:Telegram.Bot.Types.GiveawayCreated.op_Implicit(System.Nullable{System.Int32})~Telegram.Bot.Types.GiveawayCreated">
            <summary>Implicit conversion from int (PrizeStarCount)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.GiveawayWinners">
            <summary>This object represents a message about the completion of a giveaway with public winners.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.Chat">
            <summary>The chat that created the giveaway</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.GiveawayMessageId">
            <summary>Identifier of the message with the giveaway in the chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.WinnersSelectionDate">
            <summary>Point in time when winners of the giveaway were selected</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.WinnerCount">
            <summary>Total number of winners in the giveaway</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.Winners">
            <summary>List of up to 100 winners of the giveaway</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.AdditionalChatCount">
            <summary><em>Optional</em>. The number of other chats the user had to join in order to be eligible for the giveaway</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.PrizeStarCount">
            <summary><em>Optional</em>. The number of Telegram Stars that were split between giveaway winners; for Telegram Star giveaways only</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.PremiumSubscriptionMonthCount">
            <summary><em>Optional</em>. The number of months the Telegram Premium subscription won from the giveaway will be active for; for Telegram Premium giveaways only</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.UnclaimedPrizeCount">
            <summary><em>Optional</em>. Number of undistributed prizes</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.OnlyNewMembers">
            <summary><em>Optional</em>. <see langword="true"/>, if only users who had joined the chats after the giveaway started were eligible to win</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.WasRefunded">
            <summary><em>Optional</em>. <see langword="true"/>, if the giveaway was canceled because the payment for it was refunded</summary>
        </member>
        <member name="P:Telegram.Bot.Types.GiveawayWinners.PrizeDescription">
            <summary><em>Optional</em>. Description of additional giveaway prize</summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQuery">
            <summary>This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.Id">
            <summary>Unique identifier for this query</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.From">
            <summary>Sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.Query">
            <summary>Text of the query (up to 256 characters)</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.Offset">
            <summary>Offset of the results to be returned, can be controlled by the bot</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.ChatType">
            <summary><em>Optional</em>. Type of the chat from which the inline query was sent. Can be either <see cref="F:Telegram.Bot.Types.Enums.ChatType.Sender">Sender</see> for a private chat with the inline query sender, <see cref="F:Telegram.Bot.Types.Enums.ChatType.Private">Private</see>, <see cref="F:Telegram.Bot.Types.Enums.ChatType.Group">Group</see>, <see cref="F:Telegram.Bot.Types.Enums.ChatType.Supergroup">Supergroup</see>, or <see cref="F:Telegram.Bot.Types.Enums.ChatType.Channel">Channel</see>. The chat type should be always known for requests sent from official clients and most third-party clients, unless the request was sent from a secret chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.Location">
            <summary><em>Optional</em>. Sender location, only for bots that request user location</summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult">
            <summary>This object represents one result of an inline query. Telegram clients currently support results of the following 20 types:<br/><see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGame"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice"/><br/><b>Note:</b> All URLs passed in inline query results will be available to end users and therefore must be assumed to be <b>public</b>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult.Type">
            <summary>Type of the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult.Id">
            <summary>Unique identifier for this result, 1-64 bytes</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult.ReplyMarkup">
            <summary><em>Optional</em>. <a href="https://core.telegram.org/bots/features#inline-keyboards">Inline keyboard</a> attached to the message</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult.#ctor(System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle">
            <summary>Represents a link to an article or web page.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Article"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.Title">
            <summary>Title of the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.InputMessageContent">
            <summary>Content of the message to be sent</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.Url">
            <summary><em>Optional</em>. URL of the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.HideUrl">
            <summary><em>Optional</em>. Pass <see langword="true"/> if you don't want the URL to be shown in the message</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.Description">
            <summary><em>Optional</em>. Short description of the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.ThumbnailUrl">
            <summary><em>Optional</em>. Url of the thumbnail for the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.ThumbnailWidth">
            <summary><em>Optional</em>. Thumbnail width</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.ThumbnailHeight">
            <summary><em>Optional</em>. Thumbnail height</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.#ctor(System.String,System.String,Telegram.Bot.Types.InlineQueryResults.InputMessageContent)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
            <param name="title">Title of the result</param>
            <param name="inputMessageContent">Content of the message to be sent</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto">
            <summary>Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the photo.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Photo"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.PhotoUrl">
            <summary>A valid URL of the photo. Photo must be in <b>JPEG</b> format. Photo size must not exceed 5MB</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.ThumbnailUrl">
            <summary>URL of the thumbnail for the photo</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.PhotoWidth">
            <summary><em>Optional</em>. Width of the photo</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.PhotoHeight">
            <summary><em>Optional</em>. Height of the photo</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.Title">
            <summary><em>Optional</em>. Title for the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.Description">
            <summary><em>Optional</em>. Short description of the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.Caption">
            <summary><em>Optional</em>. Caption of the photo to be sent, 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.ParseMode">
            <summary><em>Optional</em>. Mode for parsing entities in the photo caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.CaptionEntities">
            <summary><em>Optional</em>. List of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.ShowCaptionAboveMedia">
            <summary><em>Optional</em>. Pass <see langword="true"/>, if the caption must be shown above the message media</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.InputMessageContent">
            <summary><em>Optional</em>. Content of the message to be sent instead of the photo</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.#ctor(System.String,System.String,System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
            <param name="photoUrl">A valid URL of the photo. Photo must be in <b>JPEG</b> format. Photo size must not exceed 5MB</param>
            <param name="thumbnailUrl">URL of the thumbnail for the photo</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif">
            <summary>Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the animation.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Gif"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.GifUrl">
            <summary>A valid URL for the GIF file. File size must not exceed 1MB</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.GifWidth">
            <summary><em>Optional</em>. Width of the GIF</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.GifHeight">
            <summary><em>Optional</em>. Height of the GIF</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.GifDuration">
            <summary><em>Optional</em>. Duration of the GIF in seconds</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.ThumbnailUrl">
            <summary>URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.ThumbnailMimeType">
            <summary><em>Optional</em>. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.Title">
            <summary><em>Optional</em>. Title for the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.Caption">
            <summary><em>Optional</em>. Caption of the GIF file to be sent, 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.ParseMode">
            <summary><em>Optional</em>. Mode for parsing entities in the caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.CaptionEntities">
            <summary><em>Optional</em>. List of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.ShowCaptionAboveMedia">
            <summary><em>Optional</em>. Pass <see langword="true"/>, if the caption must be shown above the message media</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.InputMessageContent">
            <summary><em>Optional</em>. Content of the message to be sent instead of the GIF animation</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.#ctor(System.String,System.String,System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
            <param name="gifUrl">A valid URL for the GIF file. File size must not exceed 1MB</param>
            <param name="thumbnailUrl">URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif">
            <summary>Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the animation.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Mpeg4Gif"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Mpeg4Url">
            <summary>A valid URL for the MPEG4 file. File size must not exceed 1MB</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Mpeg4Width">
            <summary><em>Optional</em>. Video width</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Mpeg4Height">
            <summary><em>Optional</em>. Video height</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Mpeg4Duration">
            <summary><em>Optional</em>. Video duration in seconds</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.ThumbnailUrl">
            <summary>URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.ThumbnailMimeType">
            <summary><em>Optional</em>. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Title">
            <summary><em>Optional</em>. Title for the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Caption">
            <summary><em>Optional</em>. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.ParseMode">
            <summary><em>Optional</em>. Mode for parsing entities in the caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.CaptionEntities">
            <summary><em>Optional</em>. List of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.ShowCaptionAboveMedia">
            <summary><em>Optional</em>. Pass <see langword="true"/>, if the caption must be shown above the message media</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.InputMessageContent">
            <summary><em>Optional</em>. Content of the message to be sent instead of the video animation</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.#ctor(System.String,System.String,System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
            <param name="mpeg4Url">A valid URL for the MPEG4 file. File size must not exceed 1MB</param>
            <param name="thumbnailUrl">URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo">
            <summary>Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the video.</summary>
            <remarks>If an InlineQueryResultVideo message contains an embedded video (e.g., YouTube), you <b>must</b> replace its content using <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.InputMessageContent">InputMessageContent</see>.</remarks>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Video"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.VideoUrl">
            <summary>A valid URL for the embedded video player or video file</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.MimeType">
            <summary>MIME type of the content of the video URL, “text/html” or “video/mp4”</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.ThumbnailUrl">
            <summary>URL of the thumbnail (JPEG only) for the video</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.Title">
            <summary>Title for the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.Caption">
            <summary><em>Optional</em>. Caption of the video to be sent, 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.ParseMode">
            <summary><em>Optional</em>. Mode for parsing entities in the video caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.CaptionEntities">
            <summary><em>Optional</em>. List of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.ShowCaptionAboveMedia">
            <summary><em>Optional</em>. Pass <see langword="true"/>, if the caption must be shown above the message media</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.VideoWidth">
            <summary><em>Optional</em>. Video width</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.VideoHeight">
            <summary><em>Optional</em>. Video height</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.VideoDuration">
            <summary><em>Optional</em>. Video duration in seconds</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.Description">
            <summary><em>Optional</em>. Short description of the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.InputMessageContent">
            <summary><em>Optional</em>. Content of the message to be sent instead of the video. This field is <b>required</b> if InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video).</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.#ctor(System.String,System.String,System.String,System.String,Telegram.Bot.Types.InlineQueryResults.InputMessageContent)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
            <param name="videoUrl">A valid URL for the embedded video player or video file</param>
            <param name="thumbnailUrl">URL of the thumbnail (JPEG only) for the video</param>
            <param name="title">Title for the result</param>
            <param name="inputMessageContent"><em>Optional</em>. Content of the message to be sent instead of the video. This field is <b>required</b> if InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video).</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio">
            <summary>Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the audio.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Audio"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.AudioUrl">
            <summary>A valid URL for the audio file</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.Title">
            <summary>Title</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.Caption">
            <summary><em>Optional</em>. Caption, 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.ParseMode">
            <summary><em>Optional</em>. Mode for parsing entities in the audio caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.CaptionEntities">
            <summary><em>Optional</em>. List of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.Performer">
            <summary><em>Optional</em>. Performer</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.AudioDuration">
            <summary><em>Optional</em>. Audio duration in seconds</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.InputMessageContent">
            <summary><em>Optional</em>. Content of the message to be sent instead of the audio</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.#ctor(System.String,System.String,System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
            <param name="audioUrl">A valid URL for the audio file</param>
            <param name="title">Title</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice">
            <summary>Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the the voice message.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Voice"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.VoiceUrl">
            <summary>A valid URL for the voice recording</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.Title">
            <summary>Recording title</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.Caption">
            <summary><em>Optional</em>. Caption, 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.ParseMode">
            <summary><em>Optional</em>. Mode for parsing entities in the voice message caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.CaptionEntities">
            <summary><em>Optional</em>. List of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.VoiceDuration">
            <summary><em>Optional</em>. Recording duration in seconds</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.InputMessageContent">
            <summary><em>Optional</em>. Content of the message to be sent instead of the voice recording</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.#ctor(System.String,System.String,System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
            <param name="voiceUrl">A valid URL for the voice recording</param>
            <param name="title">Recording title</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument">
            <summary>Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the file. Currently, only <b>.PDF</b> and <b>.ZIP</b> files can be sent using this method.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Document"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.DocumentUrl">
            <summary>A valid URL for the file</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.Title">
            <summary>Title for the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.Caption">
            <summary><em>Optional</em>. Caption of the document to be sent, 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.ParseMode">
            <summary><em>Optional</em>. Mode for parsing entities in the document caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.CaptionEntities">
            <summary><em>Optional</em>. List of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.MimeType">
            <summary>MIME type of the content of the file, either “application/pdf” or “application/zip”</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.Description">
            <summary><em>Optional</em>. Short description of the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.InputMessageContent">
            <summary><em>Optional</em>. Content of the message to be sent instead of the file</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.ThumbnailUrl">
            <summary><em>Optional</em>. URL of the thumbnail (JPEG only) for the file</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.ThumbnailWidth">
            <summary><em>Optional</em>. Thumbnail width</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.ThumbnailHeight">
            <summary><em>Optional</em>. Thumbnail height</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
            <param name="documentUrl">A valid URL for the file</param>
            <param name="title">Title for the result</param>
            <param name="mimeType">MIME type of the content of the file, either “application/pdf” or “application/zip”</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation">
            <summary>Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the location.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Location"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.Latitude">
            <summary>Location latitude in degrees</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.Longitude">
            <summary>Location longitude in degrees</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.Title">
            <summary>Location title</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.HorizontalAccuracy">
            <summary><em>Optional</em>. The radius of uncertainty for the location, measured in meters; 0-1500</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.LivePeriod">
            <summary><em>Optional</em>. Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.Heading">
            <summary><em>Optional</em>. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.ProximityAlertRadius">
            <summary><em>Optional</em>. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.InputMessageContent">
            <summary><em>Optional</em>. Content of the message to be sent instead of the location</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.ThumbnailUrl">
            <summary><em>Optional</em>. Url of the thumbnail for the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.ThumbnailWidth">
            <summary><em>Optional</em>. Thumbnail width</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.ThumbnailHeight">
            <summary><em>Optional</em>. Thumbnail height</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.#ctor(System.String,System.Double,System.Double,System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
            <param name="latitude">Location latitude in degrees</param>
            <param name="longitude">Location longitude in degrees</param>
            <param name="title">Location title</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue">
            <summary>Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the venue.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Venue"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.Latitude">
            <summary>Latitude of the venue location in degrees</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.Longitude">
            <summary>Longitude of the venue location in degrees</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.Title">
            <summary>Title of the venue</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.Address">
            <summary>Address of the venue</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.FoursquareId">
            <summary><em>Optional</em>. Foursquare identifier of the venue if known</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.FoursquareType">
            <summary><em>Optional</em>. Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.GooglePlaceId">
            <summary><em>Optional</em>. Google Places identifier of the venue</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.GooglePlaceType">
            <summary><em>Optional</em>. Google Places type of the venue. (See <a href="https://developers.google.com/places/web-service/supported_types">supported types</a>.)</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.InputMessageContent">
            <summary><em>Optional</em>. Content of the message to be sent instead of the venue</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.ThumbnailUrl">
            <summary><em>Optional</em>. Url of the thumbnail for the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.ThumbnailWidth">
            <summary><em>Optional</em>. Thumbnail width</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.ThumbnailHeight">
            <summary><em>Optional</em>. Thumbnail height</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.#ctor(System.String,System.Double,System.Double,System.String,System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
            <param name="latitude">Latitude of the venue location in degrees</param>
            <param name="longitude">Longitude of the venue location in degrees</param>
            <param name="title">Title of the venue</param>
            <param name="address">Address of the venue</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact">
            <summary>Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the contact.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Contact"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.PhoneNumber">
            <summary>Contact's phone number</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.FirstName">
            <summary>Contact's first name</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.LastName">
            <summary><em>Optional</em>. Contact's last name</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.Vcard">
            <summary><em>Optional</em>. Additional data about the contact in the form of a <a href="https://en.wikipedia.org/wiki/VCard">vCard</a>, 0-2048 bytes</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.InputMessageContent">
            <summary><em>Optional</em>. Content of the message to be sent instead of the contact</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.ThumbnailUrl">
            <summary><em>Optional</em>. Url of the thumbnail for the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.ThumbnailWidth">
            <summary><em>Optional</em>. Thumbnail width</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.ThumbnailHeight">
            <summary><em>Optional</em>. Thumbnail height</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.#ctor(System.String,System.String,System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
            <param name="phoneNumber">Contact's phone number</param>
            <param name="firstName">Contact's first name</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGame">
            <summary>Represents a <a href="https://core.telegram.org/bots/api#games">Game</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGame.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Game"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGame.GameShortName">
            <summary>Short name of the game</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGame.#ctor(System.String,System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGame"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
            <param name="gameShortName">Short name of the game</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGame.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGame"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto">
            <summary>Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the photo.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Photo"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.PhotoFileId">
            <summary>A valid file identifier of the photo</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.Title">
            <summary><em>Optional</em>. Title for the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.Description">
            <summary><em>Optional</em>. Short description of the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.Caption">
            <summary><em>Optional</em>. Caption of the photo to be sent, 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.ParseMode">
            <summary><em>Optional</em>. Mode for parsing entities in the photo caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.CaptionEntities">
            <summary><em>Optional</em>. List of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.ShowCaptionAboveMedia">
            <summary><em>Optional</em>. Pass <see langword="true"/>, if the caption must be shown above the message media</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.InputMessageContent">
            <summary><em>Optional</em>. Content of the message to be sent instead of the photo</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.#ctor(System.String,System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
            <param name="photoFileId">A valid file identifier of the photo</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif">
            <summary>Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.InputMessageContent">InputMessageContent</see> to send a message with specified content instead of the animation.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Gif"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.GifFileId">
            <summary>A valid file identifier for the GIF file</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.Title">
            <summary><em>Optional</em>. Title for the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.Caption">
            <summary><em>Optional</em>. Caption of the GIF file to be sent, 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.ParseMode">
            <summary><em>Optional</em>. Mode for parsing entities in the caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.CaptionEntities">
            <summary><em>Optional</em>. List of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.ShowCaptionAboveMedia">
            <summary><em>Optional</em>. Pass <see langword="true"/>, if the caption must be shown above the message media</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.InputMessageContent">
            <summary><em>Optional</em>. Content of the message to be sent instead of the GIF animation</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.#ctor(System.String,System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
            <param name="gifFileId">A valid file identifier for the GIF file</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif">
            <summary>Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the animation.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Mpeg4Gif"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.Mpeg4FileId">
            <summary>A valid file identifier for the MPEG4 file</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.Title">
            <summary><em>Optional</em>. Title for the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.Caption">
            <summary><em>Optional</em>. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.ParseMode">
            <summary><em>Optional</em>. Mode for parsing entities in the caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.CaptionEntities">
            <summary><em>Optional</em>. List of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.ShowCaptionAboveMedia">
            <summary><em>Optional</em>. Pass <see langword="true"/>, if the caption must be shown above the message media</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.InputMessageContent">
            <summary><em>Optional</em>. Content of the message to be sent instead of the video animation</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.#ctor(System.String,System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
            <param name="mpeg4FileId">A valid file identifier for the MPEG4 file</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker">
            <summary>Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the sticker.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Sticker"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker.StickerFileId">
            <summary>A valid file identifier of the sticker</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker.InputMessageContent">
            <summary><em>Optional</em>. Content of the message to be sent instead of the sticker</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker.#ctor(System.String,System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
            <param name="stickerFileId">A valid file identifier of the sticker</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument">
            <summary>Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the file.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Document"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.DocumentFileId">
            <summary>A valid file identifier for the file</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.Title">
            <summary>Title for the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.Description">
            <summary><em>Optional</em>. Short description of the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.Caption">
            <summary><em>Optional</em>. Caption of the document to be sent, 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.ParseMode">
            <summary><em>Optional</em>. Mode for parsing entities in the document caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.CaptionEntities">
            <summary><em>Optional</em>. List of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.InputMessageContent">
            <summary><em>Optional</em>. Content of the message to be sent instead of the file</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.#ctor(System.String,System.String,System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
            <param name="documentFileId">A valid file identifier for the file</param>
            <param name="title">Title for the result</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo">
            <summary>Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the video.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Video"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.VideoFileId">
            <summary>A valid file identifier for the video file</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.Title">
            <summary>Title for the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.Description">
            <summary><em>Optional</em>. Short description of the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.Caption">
            <summary><em>Optional</em>. Caption of the video to be sent, 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.ParseMode">
            <summary><em>Optional</em>. Mode for parsing entities in the video caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.CaptionEntities">
            <summary><em>Optional</em>. List of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.ShowCaptionAboveMedia">
            <summary><em>Optional</em>. Pass <see langword="true"/>, if the caption must be shown above the message media</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.InputMessageContent">
            <summary><em>Optional</em>. Content of the message to be sent instead of the video</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.#ctor(System.String,System.String,System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
            <param name="videoFileId">A valid file identifier for the video file</param>
            <param name="title">Title for the result</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice">
            <summary>Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the voice message.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Voice"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.VoiceFileId">
            <summary>A valid file identifier for the voice message</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.Title">
            <summary>Voice message title</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.Caption">
            <summary><em>Optional</em>. Caption, 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.ParseMode">
            <summary><em>Optional</em>. Mode for parsing entities in the voice message caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.CaptionEntities">
            <summary><em>Optional</em>. List of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.InputMessageContent">
            <summary><em>Optional</em>. Content of the message to be sent instead of the voice message</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.#ctor(System.String,System.String,System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
            <param name="voiceFileId">A valid file identifier for the voice message</param>
            <param name="title">Voice message title</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio">
            <summary>Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the audio.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Audio"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.AudioFileId">
            <summary>A valid file identifier for the audio file</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.Caption">
            <summary><em>Optional</em>. Caption, 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.ParseMode">
            <summary><em>Optional</em>. Mode for parsing entities in the audio caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.CaptionEntities">
            <summary><em>Optional</em>. List of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.InputMessageContent">
            <summary><em>Optional</em>. Content of the message to be sent instead of the audio</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.#ctor(System.String,System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio"/></summary>
            <param name="id">Unique identifier for this result, 1-64 bytes</param>
            <param name="audioFileId">A valid file identifier for the audio file</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton">
            <summary>This object represents a button to be shown above inline query results. You <b>must</b> use exactly one of the optional fields.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton.Text">
            <summary>Label text on the button</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton.WebApp">
            <summary><em>Optional</em>. Description of the <a href="https://core.telegram.org/bots/webapps">Web App</a> that will be launched when the user presses the button. The Web App will be able to switch back to the inline mode using the method <a href="https://core.telegram.org/bots/webapps#initializing-mini-apps">switchInlineQuery</a> inside the Web App.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton.StartParameter">
            <summary><em>Optional</em>. <a href="https://core.telegram.org/bots/features#deep-linking">Deep-linking</a> parameter for the /start message sent to the bot when a user presses the button. 1-64 characters, only <c>A-Z</c>, <c>a-z</c>, <c>0-9</c>, <c>_</c> and <c>-</c> are allowed.<br/><br/><em>Example:</em> An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an OAuth link. Once done, the bot can offer a <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup"><em>SwitchInline</em></see> button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton.#ctor(System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton"/></summary>
            <param name="text">Label text on the button</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType">
            <summary>Type of the result</summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Article">
            <summary>Represents a link to an article or web page.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult"/> can be cast into <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Photo">
            <summary>Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the photo.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult"/> can be cast into <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto"/> or <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Gif">
            <summary>Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the animation.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult"/> can be cast into <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif"/> or <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Mpeg4Gif">
            <summary>Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the animation.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult"/> can be cast into <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif"/> or <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Video">
            <summary>Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the video.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult"/> can be cast into <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo"/> or <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Audio">
            <summary>Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the audio.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult"/> can be cast into <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio"/> or <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Contact">
            <summary>Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the contact.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult"/> can be cast into <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Document">
            <summary>Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the file. Currently, only <b>.PDF</b> and <b>.ZIP</b> files can be sent using this method.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult"/> can be cast into <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument"/> or <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Location">
            <summary>Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the location.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult"/> can be cast into <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Venue">
            <summary>Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the venue.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult"/> can be cast into <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Voice">
            <summary>Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the the voice message.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult"/> can be cast into <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice"/> or <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Game">
            <summary>Represents a <a href="https://core.telegram.org/bots/api#games">Game</a>.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult"/> can be cast into <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGame"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType.Sticker">
            <summary>Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputMessageContent">InputMessageContent</see> to send a message with the specified content instead of the sticker.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult"/> can be cast into <see cref="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker"/>)</i></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InputMessageContent">
            <summary>This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 5 types:<br/><see cref="T:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent"/>, <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent">
            <summary>Represents the <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputMessageContent">content</see> of a text message to be sent as the result of an inline query.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.MessageText">
            <summary>Text of the message to be sent, 1-4096 characters</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.ParseMode">
            <summary><em>Optional</em>. Mode for parsing entities in the message text. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.Entities">
            <summary><em>Optional</em>. List of special entities that appear in message text, which can be specified instead of <see cref="P:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.LinkPreviewOptions">
            <summary><em>Optional</em>. Link preview generation options for the message</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.#ctor(System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent"/></summary>
            <param name="messageText">Text of the message to be sent, 1-4096 characters</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputTextMessageContent"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent">
            <summary>Represents the <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputMessageContent">content</see> of a location message to be sent as the result of an inline query.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.Latitude">
            <summary>Latitude of the location in degrees</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.Longitude">
            <summary>Longitude of the location in degrees</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.HorizontalAccuracy">
            <summary><em>Optional</em>. The radius of uncertainty for the location, measured in meters; 0-1500</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.LivePeriod">
            <summary><em>Optional</em>. Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.Heading">
            <summary><em>Optional</em>. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.ProximityAlertRadius">
            <summary><em>Optional</em>. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.#ctor(System.Double,System.Double)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent"/></summary>
            <param name="latitude">Latitude of the location in degrees</param>
            <param name="longitude">Longitude of the location in degrees</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputLocationMessageContent"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent">
            <summary>Represents the <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputMessageContent">content</see> of a venue message to be sent as the result of an inline query.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.Latitude">
            <summary>Latitude of the venue in degrees</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.Longitude">
            <summary>Longitude of the venue in degrees</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.Title">
            <summary>Name of the venue</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.Address">
            <summary>Address of the venue</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.FoursquareId">
            <summary><em>Optional</em>. Foursquare identifier of the venue, if known</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.FoursquareType">
            <summary><em>Optional</em>. Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.GooglePlaceId">
            <summary><em>Optional</em>. Google Places identifier of the venue</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.GooglePlaceType">
            <summary><em>Optional</em>. Google Places type of the venue. (See <a href="https://developers.google.com/places/web-service/supported_types">supported types</a>.)</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.#ctor(System.Double,System.Double,System.String,System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent"/></summary>
            <param name="latitude">Latitude of the venue in degrees</param>
            <param name="longitude">Longitude of the venue in degrees</param>
            <param name="title">Name of the venue</param>
            <param name="address">Address of the venue</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputVenueMessageContent"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent">
            <summary>Represents the <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputMessageContent">content</see> of a contact message to be sent as the result of an inline query.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent.PhoneNumber">
            <summary>Contact's phone number</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent.FirstName">
            <summary>Contact's first name</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent.LastName">
            <summary><em>Optional</em>. Contact's last name</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent.Vcard">
            <summary><em>Optional</em>. Additional data about the contact in the form of a <a href="https://en.wikipedia.org/wiki/VCard">vCard</a>, 0-2048 bytes</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent.#ctor(System.String,System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent"/></summary>
            <param name="phoneNumber">Contact's phone number</param>
            <param name="firstName">Contact's first name</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputContactMessageContent"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent">
            <summary>Represents the <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputMessageContent">content</see> of an invoice message to be sent as the result of an inline query.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.Title">
            <summary>Product name, 1-32 characters</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.Description">
            <summary>Product description, 1-255 characters</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.Payload">
            <summary>Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.ProviderToken">
            <summary><em>Optional</em>. Payment provider token, obtained via <a href="https://t.me/botfather">@BotFather</a>. Pass an empty string for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.Currency">
            <summary>Three-letter ISO 4217 currency code, see <a href="https://core.telegram.org/bots/payments#supported-currencies">more on currencies</a>. Pass “XTR” for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.Prices">
            <summary>Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.MaxTipAmount">
            <summary><em>Optional</em>. The maximum accepted amount for tips in the <em>smallest units</em> of the currency (integer, <b>not</b> float/double). For example, for a maximum tip of <c>US$ 1.45</c> pass <c><see cref="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.MaxTipAmount">MaxTipAmount</see> = 145</c>. See the <em>exp</em> parameter in <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.SuggestedTipAmounts">
            <summary><em>Optional</em>. A array of suggested amounts of tip in the <em>smallest units</em> of the currency (integer, <b>not</b> float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed <see cref="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.MaxTipAmount">MaxTipAmount</see>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.ProviderData">
            <summary><em>Optional</em>. A JSON-serialized object for data about the invoice, which will be shared with the payment provider. A detailed description of the required fields should be provided by the payment provider.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.PhotoUrl">
            <summary><em>Optional</em>. URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.PhotoSize">
            <summary><em>Optional</em>. Photo size in bytes</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.PhotoWidth">
            <summary><em>Optional</em>. Photo width</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.PhotoHeight">
            <summary><em>Optional</em>. Photo height</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.NeedName">
            <summary><em>Optional</em>. Pass <see langword="true"/> if you require the user's full name to complete the order. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.NeedPhoneNumber">
            <summary><em>Optional</em>. Pass <see langword="true"/> if you require the user's phone number to complete the order. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.NeedEmail">
            <summary><em>Optional</em>. Pass <see langword="true"/> if you require the user's email address to complete the order. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.NeedShippingAddress">
            <summary><em>Optional</em>. Pass <see langword="true"/> if you require the user's shipping address to complete the order. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.SendPhoneNumberToProvider">
            <summary><em>Optional</em>. Pass <see langword="true"/> if the user's phone number should be sent to the provider. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.SendEmailToProvider">
            <summary><em>Optional</em>. Pass <see langword="true"/> if the user's email address should be sent to the provider. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.IsFlexible">
            <summary><em>Optional</em>. Pass <see langword="true"/> if the final price depends on the shipping method. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.LabeledPrice})">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent"/></summary>
            <param name="title">Product name, 1-32 characters</param>
            <param name="description">Product description, 1-255 characters</param>
            <param name="payload">Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.</param>
            <param name="currency">Three-letter ISO 4217 currency code, see <a href="https://core.telegram.org/bots/payments#supported-currencies">more on currencies</a>. Pass “XTR” for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="prices">Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
        </member>
        <member name="M:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InlineQueryResults.InputInvoiceMessageContent"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.IAlbumInputMedia">
            <summary>A marker for input media types that can be used in sendMediaGroup method.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.IInputMediaThumb">
            <summary>Indicates that an <see cref="T:Telegram.Bot.Types.InputMedia"/> has a thumbnail.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.IInputMediaThumb.Thumbnail">
            <summary>Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. Thumbnails can't be reused and can be only uploaded as a new file, so you can use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files �</a></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputFile">
            <summary>A file to send</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputFile.FileType">
            <summary>Type of file to send</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFile.FromString(System.String)">
            <summary>Creates an instance of <see cref="T:Telegram.Bot.Types.InputFile"/> from a string containing a file's URL or file id</summary>
            <param name="urlOrFileId">A file's URL or a file id</param>
            <returns>An instance of a class that implements <see cref="T:Telegram.Bot.Types.InputFile"/></returns>
        </member>
        <member name="M:Telegram.Bot.Types.InputFile.FromStream(System.IO.Stream,System.String)">
            <summary>Creates an <see cref="T:Telegram.Bot.Types.InputFileStream"/> from an instance <see cref="T:System.IO.Stream"/></summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> with file data to upload</param>
            <param name="fileName">An optional file name. If unspecified, it may be extracted from FileStream</param>
            <returns>An instance of <see cref="T:Telegram.Bot.Types.InputFileStream"/></returns>
        </member>
        <member name="M:Telegram.Bot.Types.InputFile.FromUri(System.Uri)">
            <summary>Creates an <see cref="T:Telegram.Bot.Types.InputFileUrl"/> from an <see cref="T:System.Uri"/></summary>
            <param name="url">A URL of a file</param>
            <returns>An instance of <see cref="T:Telegram.Bot.Types.InputFileUrl"/></returns>
        </member>
        <member name="M:Telegram.Bot.Types.InputFile.FromUri(System.String)">
            <summary>Creates an <see cref="T:Telegram.Bot.Types.InputFileUrl"/> from a URL passed as a <see cref="T:System.String"/></summary>
            <param name="url">A URL of a file</param>
            <returns>An instance of <see cref="T:Telegram.Bot.Types.InputFileUrl"/></returns>
        </member>
        <member name="M:Telegram.Bot.Types.InputFile.FromFileId(System.String)">
            <summary>Creates an <see cref="T:Telegram.Bot.Types.InputFileId"/> from a file id</summary>
            <param name="fileId">An ID of a file</param>
            <returns>An instance of <see cref="T:Telegram.Bot.Types.InputFileId"/></returns>
        </member>
        <member name="M:Telegram.Bot.Types.InputFile.op_Implicit(System.IO.Stream)~Telegram.Bot.Types.InputFile">
            <summary>Implicit operator, same as <see cref="M:Telegram.Bot.Types.InputFile.FromStream(System.IO.Stream,System.String)"/></summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFile.op_Implicit(System.String)~Telegram.Bot.Types.InputFile">
            <summary>Implicit operator, same as <see cref="M:Telegram.Bot.Types.InputFile.FromString(System.String)"/></summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFile.op_Implicit(Telegram.Bot.Types.FileBase)~Telegram.Bot.Types.InputFile">
            <summary>Implicit operator, using <see cref="P:Telegram.Bot.Types.FileBase.FileId"/> property</summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputFileId">
            <summary>This object represents a file that is already stored somewhere on the Telegram servers</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputFileId.FileType">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.Types.InputFileId.Id">
            <summary>A file identifier</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFileId.#ctor">
            <summary>This object represents a file that is already stored somewhere on the Telegram servers</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFileId.#ctor(System.String)">
            <summary>This object represents a file that is already stored somewhere on the Telegram servers</summary>
            <param name="id">A file identifier</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputFileId.op_Implicit(System.String)~Telegram.Bot.Types.InputFileId">
            <summary>Implicit operator, same as <see cref="M:Telegram.Bot.Types.InputFileId.#ctor(System.String)"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputFileStream">
            <summary>This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputFileStream.FileType">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.Types.InputFileStream.Content">
            <summary>File content to upload</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputFileStream.FileName">
            <summary>Name of a file to upload using multipart/form-data</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)">
            <summary>This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.</summary>
            <param name="content">File content to upload</param>
            <param name="fileName">Name of a file to upload using multipart/form-data</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputFileStream.#ctor">
            <summary>This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFileStream.op_Implicit(System.IO.Stream)~Telegram.Bot.Types.InputFileStream">
            <summary>Implicit operator, same as <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> without given filename</summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputFileUrl">
            <summary>This object represents an HTTP URL for the file to be sent</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputFileUrl.FileType">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.Types.InputFileUrl.Url">
            <summary>HTTP URL for the file to be sent</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFileUrl.#ctor(System.String)">
            <summary>This object represents an HTTP URL for the file to be sent</summary>
            <param name="url">HTTP URL for the file to be sent</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputFileUrl.#ctor(System.Uri)">
            <summary>This object represents an HTTP URL for the file to be sent</summary>
            <param name="uri">HTTP URL for the file to be sent</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputFileUrl.#ctor">
            <summary>This object represents an HTTP URL for the file to be sent</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputFileUrl.op_Implicit(System.String)~Telegram.Bot.Types.InputFileUrl">
            <summary>Implicit operator, same as <see cref="M:Telegram.Bot.Types.InputFileUrl.#ctor(System.String)"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputMedia">
            <summary>This object represents the content of a media message to be sent. It should be one of<br/><see cref="T:Telegram.Bot.Types.InputMediaAnimation"/>, <see cref="T:Telegram.Bot.Types.InputMediaDocument"/>, <see cref="T:Telegram.Bot.Types.InputMediaAudio"/>, <see cref="T:Telegram.Bot.Types.InputMediaPhoto"/>, <see cref="T:Telegram.Bot.Types.InputMediaVideo"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMedia.Type">
            <summary>Type of the result</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMedia.Media">
            <summary>File to send. Pass a FileId to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMedia.Caption">
            <summary><em>Optional</em>. Caption of the InputMedia to be sent, 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMedia.ParseMode">
            <summary><em>Optional</em>. Mode for parsing entities in the InputMedia caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMedia.CaptionEntities">
            <summary><em>Optional</em>. List of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Types.InputMedia.ParseMode">ParseMode</see></summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputMedia.#ctor(Telegram.Bot.Types.InputFile)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InputMedia"/></summary>
            <param name="media">File to send. Pass a FileId to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></param>
        </member>
        <member name="M:Telegram.Bot.Types.InputMedia.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InputMedia"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputMediaPhoto">
            <summary>Represents a photo to be sent.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaPhoto.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.Enums.InputMediaType.Photo"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaPhoto.ShowCaptionAboveMedia">
            <summary><em>Optional</em>. Pass <see langword="true"/>, if the caption must be shown above the message media</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaPhoto.HasSpoiler">
            <summary><em>Optional</em>. Pass <see langword="true"/> if the photo needs to be covered with a spoiler animation</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaPhoto.#ctor(Telegram.Bot.Types.InputFile)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InputMediaPhoto"/></summary>
            <param name="media">File to send. Pass a FileId to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></param>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaPhoto.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InputMediaPhoto"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputMediaVideo">
            <summary>Represents a video to be sent.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.Enums.InputMediaType.Video"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.Thumbnail">
            <summary><em>Optional</em>. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. Thumbnails can't be reused and can be only uploaded as a new file, so you can use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.ShowCaptionAboveMedia">
            <summary><em>Optional</em>. Pass <see langword="true"/>, if the caption must be shown above the message media</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.Width">
            <summary><em>Optional</em>. Video width</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.Height">
            <summary><em>Optional</em>. Video height</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.Duration">
            <summary><em>Optional</em>. Video duration in seconds</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.SupportsStreaming">
            <summary><em>Optional</em>. Pass <see langword="true"/> if the uploaded video is suitable for streaming</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaVideo.HasSpoiler">
            <summary><em>Optional</em>. Pass <see langword="true"/> if the video needs to be covered with a spoiler animation</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaVideo.#ctor(Telegram.Bot.Types.InputFile)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InputMediaVideo"/></summary>
            <param name="media">File to send. Pass a FileId to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></param>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaVideo.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InputMediaVideo"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputMediaAnimation">
            <summary>Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAnimation.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.Enums.InputMediaType.Animation"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAnimation.Thumbnail">
            <summary><em>Optional</em>. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. Thumbnails can't be reused and can be only uploaded as a new file, so you can use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAnimation.ShowCaptionAboveMedia">
            <summary><em>Optional</em>. Pass <see langword="true"/>, if the caption must be shown above the message media</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAnimation.Width">
            <summary><em>Optional</em>. Animation width</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAnimation.Height">
            <summary><em>Optional</em>. Animation height</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAnimation.Duration">
            <summary><em>Optional</em>. Animation duration in seconds</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAnimation.HasSpoiler">
            <summary><em>Optional</em>. Pass <see langword="true"/> if the animation needs to be covered with a spoiler animation</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaAnimation.#ctor(Telegram.Bot.Types.InputFile)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InputMediaAnimation"/></summary>
            <param name="media">File to send. Pass a FileId to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></param>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaAnimation.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InputMediaAnimation"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputMediaAudio">
            <summary>Represents an audio file to be treated as music to be sent.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAudio.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.Enums.InputMediaType.Audio"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAudio.Thumbnail">
            <summary><em>Optional</em>. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. Thumbnails can't be reused and can be only uploaded as a new file, so you can use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAudio.Duration">
            <summary><em>Optional</em>. Duration of the audio in seconds</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAudio.Performer">
            <summary><em>Optional</em>. Performer of the audio</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaAudio.Title">
            <summary><em>Optional</em>. Title of the audio</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaAudio.#ctor(Telegram.Bot.Types.InputFile)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InputMediaAudio"/></summary>
            <param name="media">File to send. Pass a FileId to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></param>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaAudio.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InputMediaAudio"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputMediaDocument">
            <summary>Represents a general file to be sent.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaDocument.Type">
            <summary>Type of the result, always <see cref="F:Telegram.Bot.Types.Enums.InputMediaType.Document"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaDocument.Thumbnail">
            <summary><em>Optional</em>. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. Thumbnails can't be reused and can be only uploaded as a new file, so you can use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMediaDocument.DisableContentTypeDetection">
            <summary><em>Optional</em>. Disables automatic server-side content type detection for files uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. Always <see langword="true"/>, if the document is sent as part of an album.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaDocument.#ctor(Telegram.Bot.Types.InputFile)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InputMediaDocument"/></summary>
            <param name="media">File to send. Pass a FileId to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></param>
        </member>
        <member name="M:Telegram.Bot.Types.InputMediaDocument.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InputMediaDocument"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputPaidMedia">
            <summary>This object describes the paid media to be sent. Currently, it can be one of<br/><see cref="T:Telegram.Bot.Types.InputPaidMediaPhoto"/>, <see cref="T:Telegram.Bot.Types.InputPaidMediaVideo"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputPaidMedia.Type">
            <summary>Type of the media</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputPaidMedia.Media">
            <summary>File to send. Pass a FileId to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputPaidMediaPhoto">
            <summary>The paid media to send is a photo.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputPaidMediaPhoto.Type">
            <summary>Type of the media, always <see cref="F:Telegram.Bot.Types.Enums.InputPaidMediaType.Photo"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputPaidMediaVideo">
            <summary>The paid media to send is a video.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputPaidMediaVideo.Type">
            <summary>Type of the media, always <see cref="F:Telegram.Bot.Types.Enums.InputPaidMediaType.Video"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputPaidMediaVideo.Thumbnail">
            <summary><em>Optional</em>. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. Thumbnails can't be reused and can be only uploaded as a new file, so you can use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputPaidMediaVideo.Width">
            <summary><em>Optional</em>. Video width</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputPaidMediaVideo.Height">
            <summary><em>Optional</em>. Video height</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputPaidMediaVideo.Duration">
            <summary><em>Optional</em>. Video duration in seconds</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputPaidMediaVideo.SupportsStreaming">
            <summary><em>Optional</em>. Pass <see langword="true"/> if the uploaded video is suitable for streaming</summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputSticker">
            <summary>This object describes a sticker to be added to a sticker set.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputSticker.Sticker">
            <summary>The added sticker. Pass a <em>FileId</em> as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, upload a new one using <see cref="T:Telegram.Bot.Types.InputFileStream"/>, or use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. Animated and video stickers can't be uploaded via HTTP URL. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputSticker.Format">
            <summary>Format of the added sticker, must be one of <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Static">Static</see> for a <b>.WEBP</b> or <b>.PNG</b> image, <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Animated">Animated</see> for a <b>.TGS</b> animation, <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Video">Video</see> for a <b>WEBM</b> video</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputSticker.EmojiList">
            <summary>List of 1-20 emoji associated with the sticker</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputSticker.MaskPosition">
            <summary><em>Optional</em>. Position where the mask should be placed on faces. For “mask” stickers only.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputSticker.Keywords">
            <summary><em>Optional</em>. List of 0-20 search keywords for the sticker with total length of up to 64 characters. For “regular” and “CustomEmoji” stickers only.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.InputSticker.#ctor(Telegram.Bot.Types.InputFile,Telegram.Bot.Types.Enums.StickerFormat,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.InputSticker"/></summary>
            <param name="sticker">The added sticker. Pass a <em>FileId</em> as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, upload a new one using <see cref="T:Telegram.Bot.Types.InputFileStream"/>, or use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. Animated and video stickers can't be uploaded via HTTP URL. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></param>
            <param name="format">Format of the added sticker, must be one of <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Static">Static</see> for a <b>.WEBP</b> or <b>.PNG</b> image, <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Animated">Animated</see> for a <b>.TGS</b> animation, <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Video">Video</see> for a <b>WEBM</b> video</param>
            <param name="emojiList">List of 1-20 emoji associated with the sticker</param>
        </member>
        <member name="M:Telegram.Bot.Types.InputSticker.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.InputSticker"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Location">
            <summary>This object represents a point on the map.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Location.Latitude">
            <summary>Latitude as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Location.Longitude">
            <summary>Longitude as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Location.HorizontalAccuracy">
            <summary><em>Optional</em>. The radius of uncertainty for the location, measured in meters; 0-1500</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Location.LivePeriod">
            <summary><em>Optional</em>. Time relative to the message sending date, during which the location can be updated; in seconds. For active live locations only.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Location.Heading">
            <summary><em>Optional</em>. The direction in which user is moving, in degrees; 1-360. For active live locations only.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Location.ProximityAlertRadius">
            <summary><em>Optional</em>. The maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.LoginUrl">
            <summary>This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the <a href="https://core.telegram.org/widgets/login">Telegram Login Widget</a> when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:<br/><a href="https://core.telegram.org/file/811140015/1734/8VZFkwWXalM.97872/6127fa62d8a0bf2b3c"/><br/><br/>Telegram apps support these buttons as of <a href="https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots">version 5.7</a>.</summary>
            <remarks>Sample bot: <a href="https://t.me/discussbot">@discussbot</a></remarks>
        </member>
        <member name="P:Telegram.Bot.Types.LoginUrl.Url">
            <summary>An HTTPS URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in <a href="https://core.telegram.org/widgets/login#receiving-authorization-data">Receiving authorization data</a>.<br/><br/><b>NOTE:</b> You <b>must</b> always check the hash of the received data to verify the authentication and the integrity of the data as described in <a href="https://core.telegram.org/widgets/login#checking-authorization">Checking authorization</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.LoginUrl.ForwardText">
            <summary><em>Optional</em>. New text of the button in forwarded messages.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.LoginUrl.BotUsername">
            <summary><em>Optional</em>. Username of a bot, which will be used for user authorization. See <a href="https://core.telegram.org/widgets/login#setting-up-a-bot">Setting up a bot</a> for more details. If not specified, the current bot's username will be assumed. The <see cref="P:Telegram.Bot.Types.LoginUrl.Url">Url</see>'s domain must be the same as the domain linked with the bot. See <a href="https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot">Linking your domain to the bot</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.LoginUrl.RequestWriteAccess">
            <summary><em>Optional</em>. Pass <see langword="true"/> to request the permission for your bot to send messages to the user.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.MaskPosition">
            <summary>This object describes the position on faces where a mask should be placed by default.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MaskPosition.Point">
            <summary>The part of the face relative to which the mask should be placed. One of <see cref="F:Telegram.Bot.Types.Enums.MaskPositionPoint.Forehead">Forehead</see>, <see cref="F:Telegram.Bot.Types.Enums.MaskPositionPoint.Eyes">Eyes</see>, <see cref="F:Telegram.Bot.Types.Enums.MaskPositionPoint.Mouth">Mouth</see>, or <see cref="F:Telegram.Bot.Types.Enums.MaskPositionPoint.Chin">Chin</see>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MaskPosition.XShift">
            <summary>Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MaskPosition.YShift">
            <summary>Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MaskPosition.Scale">
            <summary>Mask scaling coefficient. For example, 2.0 means double size.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.MenuButton">
            <summary>This object describes the bot's menu button in a private chat. It should be one of<br/><see cref="T:Telegram.Bot.Types.MenuButtonDefault"/>, <see cref="T:Telegram.Bot.Types.MenuButtonCommands"/>, <see cref="T:Telegram.Bot.Types.MenuButtonWebApp"/><br/>If a menu button other than <see cref="T:Telegram.Bot.Types.MenuButtonDefault"/> is set for a private chat, then it is applied in the chat. Otherwise the default menu button is applied. By default, the menu button opens the list of bot commands.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MenuButton.Type">
            <summary>Type of the button</summary>
        </member>
        <member name="T:Telegram.Bot.Types.MenuButtonCommands">
            <summary>Represents a menu button, which opens the bot's list of commands.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MenuButtonCommands.Type">
            <summary>Type of the button, always <see cref="F:Telegram.Bot.Types.Enums.MenuButtonType.Commands"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.MenuButtonWebApp">
            <summary>Represents a menu button, which launches a <a href="https://core.telegram.org/bots/webapps">Web App</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MenuButtonWebApp.Type">
            <summary>Type of the button, always <see cref="F:Telegram.Bot.Types.Enums.MenuButtonType.WebApp"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.MenuButtonWebApp.Text">
            <summary>Text on the button</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MenuButtonWebApp.WebApp">
            <summary>Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.AnswerWebAppQuery(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.InlineQueryResults.InlineQueryResult,System.Threading.CancellationToken)">AnswerWebAppQuery</see>. Alternatively, a <c>t.me</c> link to a Web App of the bot can be specified in the object instead of the Web App's URL, in which case the Web App will be opened as if the user pressed the link.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.MenuButtonDefault">
            <summary>Describes that no specific value for the menu button was set.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MenuButtonDefault.Type">
            <summary>Type of the button, always <see cref="F:Telegram.Bot.Types.Enums.MenuButtonType.Default"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageAutoDeleteTimerChanged">
            <summary>This object represents a service message about a change in auto-delete timer settings.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageAutoDeleteTimerChanged.MessageAutoDeleteTime">
            <summary>New auto-delete time for messages in the chat; in seconds</summary>
        </member>
        <member name="M:Telegram.Bot.Types.MessageAutoDeleteTimerChanged.op_Implicit(Telegram.Bot.Types.MessageAutoDeleteTimerChanged)~System.Int32">
            <summary>Implicit conversion to int (MessageAutoDeleteTime)</summary>
        </member>
        <member name="M:Telegram.Bot.Types.MessageAutoDeleteTimerChanged.op_Implicit(System.Int32)~Telegram.Bot.Types.MessageAutoDeleteTimerChanged">
            <summary>Implicit conversion from int (MessageAutoDeleteTime)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageEntity">
            <summary>This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageEntity.Type">
            <summary>Type of the entity. Currently, can be “mention” (<c>@username</c>), “hashtag” (<c>#hashtag</c>), “cashtag” (<c>$USD</c>), <see cref="T:Telegram.Bot.Types.BotCommand"/> (<c>/start@JobsBot</c>), “url” (<c>https://telegram.org</c>), “email” (<c>do-not-reply@telegram.org</c>), “PhoneNumber” (<c>+1-212-555-0123</c>), “bold” (<b>bold text</b>), “italic” (<em>italic text</em>), “underline” (underlined text), “strikethrough” (strikethrough text), “spoiler” (spoiler message), “blockquote” (block quotation), “ExpandableBlockquote” (collapsed-by-default block quotation), “code” (monowidth string), “pre” (monowidth block), “TextLink” (for clickable text URLs), “TextMention” (for users <a href="https://telegram.org/blog/edit#new-mentions">without usernames</a>), “CustomEmoji” (for inline custom emoji stickers)</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageEntity.Offset">
            <summary>Offset in <a href="https://core.telegram.org/api/entities#entity-length">UTF-16 code units</a> to the start of the entity</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageEntity.Length">
            <summary>Length of the entity in <a href="https://core.telegram.org/api/entities#entity-length">UTF-16 code units</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageEntity.Url">
            <summary><em>Optional</em>. For <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.TextLink"/> only, URL that will be opened after user taps on the text</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageEntity.User">
            <summary><em>Optional</em>. For <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.TextMention"/> only, the mentioned user</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageEntity.Language">
            <summary><em>Optional</em>. For <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Pre"/> only, the programming language of the entity text</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageEntity.CustomEmojiId">
            <summary><em>Optional</em>. For <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.CustomEmoji"/> only, unique identifier of the custom emoji. Use <see csref="TelegramBotClientExtensions.GetCustomEmojiStickersAsync">GetCustomEmojiStickers</see> to get full information about the sticker</summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageOrigin">
            <summary>This object describes the origin of a message. It can be one of<br/><see cref="T:Telegram.Bot.Types.MessageOriginUser"/>, <see cref="T:Telegram.Bot.Types.MessageOriginHiddenUser"/>, <see cref="T:Telegram.Bot.Types.MessageOriginChat"/>, <see cref="T:Telegram.Bot.Types.MessageOriginChannel"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOrigin.Type">
            <summary>Type of the message origin</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOrigin.Date">
            <summary>Date the message was sent originally</summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageOriginUser">
            <summary>The message was originally sent by a known user.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginUser.Type">
            <summary>Type of the message origin, always <see cref="F:Telegram.Bot.Types.Enums.MessageOriginType.User"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginUser.SenderUser">
            <summary>User that sent the message originally</summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageOriginHiddenUser">
            <summary>The message was originally sent by an unknown user.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginHiddenUser.Type">
            <summary>Type of the message origin, always <see cref="F:Telegram.Bot.Types.Enums.MessageOriginType.HiddenUser"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginHiddenUser.SenderUserName">
            <summary>Name of the user that sent the message originally</summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageOriginChat">
            <summary>The message was originally sent on behalf of a chat to a group chat.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginChat.Type">
            <summary>Type of the message origin, always <see cref="F:Telegram.Bot.Types.Enums.MessageOriginType.Chat"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginChat.SenderChat">
            <summary>Chat that sent the message originally</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginChat.AuthorSignature">
            <summary><em>Optional</em>. For messages originally sent by an anonymous chat administrator, original message author signature</summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageOriginChannel">
            <summary>The message was originally sent to a channel chat.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginChannel.Type">
            <summary>Type of the message origin, always <see cref="F:Telegram.Bot.Types.Enums.MessageOriginType.Channel"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginChannel.Chat">
            <summary>Channel chat to which the message was originally sent</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginChannel.MessageId">
            <summary>Unique message identifier inside the chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageOriginChannel.AuthorSignature">
            <summary><em>Optional</em>. Signature of the original post author</summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageReactionCountUpdated">
            <summary>This object represents reaction changes on a message with anonymous reactions.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionCountUpdated.Chat">
            <summary>The chat containing the message</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionCountUpdated.MessageId">
            <summary>Unique message identifier inside the chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionCountUpdated.Date">
            <summary>Date of the change</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionCountUpdated.Reactions">
            <summary>List of reactions that are present on the message</summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageReactionUpdated">
            <summary>This object represents a change of a reaction on a message performed by a user.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionUpdated.Chat">
            <summary>The chat containing the message the user reacted to</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionUpdated.MessageId">
            <summary>Unique identifier of the message inside the chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionUpdated.User">
            <summary><em>Optional</em>. The user that changed the reaction, if the user isn't anonymous</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionUpdated.ActorChat">
            <summary><em>Optional</em>. The chat on behalf of which the reaction was changed, if the user is anonymous</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionUpdated.Date">
            <summary>Date of the change</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionUpdated.OldReaction">
            <summary>Previous list of reaction types that were set by the user</summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageReactionUpdated.NewReaction">
            <summary>New list of reaction types that have been set by the user</summary>
        </member>
        <member name="T:Telegram.Bot.Types.PaidMedia">
            <summary>This object describes paid media. Currently, it can be one of<br/><see cref="T:Telegram.Bot.Types.PaidMediaPreview"/>, <see cref="T:Telegram.Bot.Types.PaidMediaPhoto"/>, <see cref="T:Telegram.Bot.Types.PaidMediaVideo"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.PaidMedia.Type">
            <summary>Type of the paid media, always <see cref="T:Telegram.Bot.Types.PaidMedia"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.PaidMediaPreview">
            <summary>The paid media isn't available before the payment.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.PaidMediaPreview.Type">
            <summary>Type of the paid media, always <see cref="F:Telegram.Bot.Types.Enums.PaidMediaType.Preview"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.PaidMediaPreview.Width">
            <summary><em>Optional</em>. Media width as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.PaidMediaPreview.Height">
            <summary><em>Optional</em>. Media height as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.PaidMediaPreview.Duration">
            <summary><em>Optional</em>. Duration of the media in seconds as defined by the sender</summary>
        </member>
        <member name="T:Telegram.Bot.Types.PaidMediaPhoto">
            <summary>The paid media is a photo.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.PaidMediaPhoto.Type">
            <summary>Type of the paid media, always <see cref="F:Telegram.Bot.Types.Enums.PaidMediaType.Photo"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.PaidMediaPhoto.Photo">
            <summary>The photo</summary>
        </member>
        <member name="T:Telegram.Bot.Types.PaidMediaVideo">
            <summary>The paid media is a video.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.PaidMediaVideo.Type">
            <summary>Type of the paid media, always <see cref="F:Telegram.Bot.Types.Enums.PaidMediaType.Video"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.PaidMediaVideo.Video">
            <summary>The video</summary>
        </member>
        <member name="T:Telegram.Bot.Types.PaidMediaInfo">
            <summary>Describes the paid media added to a message.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.PaidMediaInfo.StarCount">
            <summary>The number of Telegram Stars that must be paid to buy access to the media</summary>
        </member>
        <member name="P:Telegram.Bot.Types.PaidMediaInfo.PaidMedia">
            <summary>Information about the paid media</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.EncryptedCredentials">
            <summary>Describes data required for decrypting and authenticating <see cref="T:Telegram.Bot.Types.Passport.EncryptedPassportElement"/>. See the <a href="https://core.telegram.org/passport#receiving-information">Telegram Passport Documentation</a> for a complete description of the data decryption and authentication processes.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedCredentials.Data">
            <summary>Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for <see cref="T:Telegram.Bot.Types.Passport.EncryptedPassportElement"/> decryption and authentication</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedCredentials.Hash">
            <summary>Base64-encoded data hash for data authentication</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedCredentials.Secret">
            <summary>Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.EncryptedPassportElement">
            <summary>Describes documents or other Telegram Passport elements shared with the bot by the user.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Type">
            <summary>Element type. One of <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PersonalDetails">PersonalDetails</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.Passport">Passport</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.DriverLicense">DriverLicense</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.IdentityCard">IdentityCard</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.InternalPassport">InternalPassport</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.Address">Address</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.UtilityBill">UtilityBill</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.BankStatement">BankStatement</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.RentalAgreement">RentalAgreement</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PassportRegistration">PassportRegistration</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.TemporaryRegistration">TemporaryRegistration</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PhoneNumber">PhoneNumber</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.Email">Email</see>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Data">
            <summary><em>Optional</em>. Base64-encoded encrypted Telegram Passport element data provided by the user; available only for “PersonalDetails”, “passport”, “DriverLicense”, “IdentityCard”, “InternalPassport” and “address” types. Can be decrypted and verified using the accompanying <see cref="T:Telegram.Bot.Types.Passport.EncryptedCredentials"/>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.PhoneNumber">
            <summary><em>Optional</em>. User's verified phone number; available only for “<see cref="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.PhoneNumber">PhoneNumber</see>” type</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Email">
            <summary><em>Optional</em>. User's verified email address; available only for “email” type</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Files">
            <summary><em>Optional</em>. Array of encrypted files with documents provided by the user; available only for “UtilityBill”, “BankStatement”, “RentalAgreement”, “PassportRegistration” and “TemporaryRegistration” types. Files can be decrypted and verified using the accompanying <see cref="T:Telegram.Bot.Types.Passport.EncryptedCredentials"/>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.FrontSide">
            <summary><em>Optional</em>. Encrypted file with the front side of the document, provided by the user; available only for “passport”, “DriverLicense”, “IdentityCard” and “InternalPassport”. The file can be decrypted and verified using the accompanying <see cref="T:Telegram.Bot.Types.Passport.EncryptedCredentials"/>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.ReverseSide">
            <summary><em>Optional</em>. Encrypted file with the reverse side of the document, provided by the user; available only for “DriverLicense” and “IdentityCard”. The file can be decrypted and verified using the accompanying <see cref="T:Telegram.Bot.Types.Passport.EncryptedCredentials"/>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Selfie">
            <summary><em>Optional</em>. Encrypted file with the selfie of the user holding a document, provided by the user; available if requested for “passport”, “DriverLicense”, “IdentityCard” and “InternalPassport”. The file can be decrypted and verified using the accompanying <see cref="T:Telegram.Bot.Types.Passport.EncryptedCredentials"/>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Translation">
            <summary><em>Optional</em>. Array of encrypted files with translated versions of documents provided by the user; available if requested for “passport”, “DriverLicense”, “IdentityCard”, “InternalPassport”, “UtilityBill”, “BankStatement”, “RentalAgreement”, “PassportRegistration” and “TemporaryRegistration” types. Files can be decrypted and verified using the accompanying <see cref="T:Telegram.Bot.Types.Passport.EncryptedCredentials"/>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.EncryptedPassportElement.Hash">
            <summary>Base64-encoded element hash for using in <see cref="T:Telegram.Bot.Types.Passport.PassportElementErrorUnspecified"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.EncryptedPassportElementType">
            <summary><see cref="T:Telegram.Bot.Types.Passport.EncryptedPassportElement"/>: Element type. One of <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PersonalDetails">PersonalDetails</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.Passport">Passport</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.DriverLicense">DriverLicense</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.IdentityCard">IdentityCard</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.InternalPassport">InternalPassport</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.Address">Address</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.UtilityBill">UtilityBill</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.BankStatement">BankStatement</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.RentalAgreement">RentalAgreement</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PassportRegistration">PassportRegistration</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.TemporaryRegistration">TemporaryRegistration</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PhoneNumber">PhoneNumber</see>, <see cref="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.Email">Email</see>.</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PersonalDetails">
            <summary>“PersonalDetails” type</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.Passport">
            <summary>“passport” type</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.DriverLicense">
            <summary>“DriverLicense” type</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.IdentityCard">
            <summary>“IdentityCard” type</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.InternalPassport">
            <summary>“InternalPassport” type</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.Address">
            <summary>“address” type</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.UtilityBill">
            <summary>“UtilityBill” type</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.BankStatement">
            <summary>“BankStatement” type</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.RentalAgreement">
            <summary>“RentalAgreement” type</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PassportRegistration">
            <summary>“PassportRegistration” type</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.TemporaryRegistration">
            <summary>“TemporaryRegistration” type</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.PhoneNumber">
            <summary>“PhoneNumber” type</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.EncryptedPassportElementType.Email">
            <summary>“email” type</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.PassportData">
            <summary>Describes Telegram Passport data shared with the bot by the user.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportData.Data">
            <summary>Array with information about documents and other Telegram Passport elements that was shared with the bot</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportData.Credentials">
            <summary>Encrypted credentials required to decrypt the data</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.PassportElementError">
            <summary>This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user. It should be one of:<br/><see cref="T:Telegram.Bot.Types.Passport.PassportElementErrorDataField"/>, <see cref="T:Telegram.Bot.Types.Passport.PassportElementErrorFrontSide"/>, <see cref="T:Telegram.Bot.Types.Passport.PassportElementErrorReverseSide"/>, <see cref="T:Telegram.Bot.Types.Passport.PassportElementErrorSelfie"/>, <see cref="T:Telegram.Bot.Types.Passport.PassportElementErrorFile"/>, <see cref="T:Telegram.Bot.Types.Passport.PassportElementErrorFiles"/>, <see cref="T:Telegram.Bot.Types.Passport.PassportElementErrorTranslationFile"/>, <see cref="T:Telegram.Bot.Types.Passport.PassportElementErrorTranslationFiles"/>, <see cref="T:Telegram.Bot.Types.Passport.PassportElementErrorUnspecified"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementError.Source">
            <summary>Error source</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementError.Type">
            <summary>Type of element of the user's Telegram Passport which has the issue</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementError.Message">
            <summary>Error message</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.PassportElementErrorDataField">
            <summary>Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementErrorDataField.Source">
            <summary>Error source, always <see cref="F:Telegram.Bot.Types.Passport.PassportElementErrorSource.Data"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementErrorDataField.FieldName">
            <summary>Name of the data field which has the error</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementErrorDataField.DataHash">
            <summary>Base64-encoded data hash</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.PassportElementErrorFrontSide">
            <summary>Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementErrorFrontSide.Source">
            <summary>Error source, always <see cref="F:Telegram.Bot.Types.Passport.PassportElementErrorSource.FrontSide"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementErrorFrontSide.FileHash">
            <summary>Base64-encoded hash of the file with the front side of the document</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.PassportElementErrorReverseSide">
            <summary>Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementErrorReverseSide.Source">
            <summary>Error source, always <see cref="F:Telegram.Bot.Types.Passport.PassportElementErrorSource.ReverseSide"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementErrorReverseSide.FileHash">
            <summary>Base64-encoded hash of the file with the reverse side of the document</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.PassportElementErrorSelfie">
            <summary>Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementErrorSelfie.Source">
            <summary>Error source, always <see cref="F:Telegram.Bot.Types.Passport.PassportElementErrorSource.Selfie"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementErrorSelfie.FileHash">
            <summary>Base64-encoded hash of the file with the selfie</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.PassportElementErrorFile">
            <summary>Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementErrorFile.Source">
            <summary>Error source, always <see cref="F:Telegram.Bot.Types.Passport.PassportElementErrorSource.File"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementErrorFile.FileHash">
            <summary>Base64-encoded file hash</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.PassportElementErrorFiles">
            <summary>Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementErrorFiles.Source">
            <summary>Error source, always <see cref="F:Telegram.Bot.Types.Passport.PassportElementErrorSource.Files"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementErrorFiles.FileHashes">
            <summary>List of base64-encoded file hashes</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.PassportElementErrorTranslationFile">
            <summary>Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementErrorTranslationFile.Source">
            <summary>Error source, always <see cref="F:Telegram.Bot.Types.Passport.PassportElementErrorSource.TranslationFile"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementErrorTranslationFile.FileHash">
            <summary>Base64-encoded file hash</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.PassportElementErrorTranslationFiles">
            <summary>Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementErrorTranslationFiles.Source">
            <summary>Error source, always <see cref="F:Telegram.Bot.Types.Passport.PassportElementErrorSource.TranslationFiles"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementErrorTranslationFiles.FileHashes">
            <summary>List of base64-encoded file hashes</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.PassportElementErrorUnspecified">
            <summary>Represents an issue in an unspecified place. The error is considered resolved when new data is added.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementErrorUnspecified.Source">
            <summary>Error source, always <see cref="F:Telegram.Bot.Types.Passport.PassportElementErrorSource.Unspecified"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportElementErrorUnspecified.ElementHash">
            <summary>Base64-encoded element hash</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.PassportElementErrorSource">
            <summary>Error source</summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.PassportElementErrorSource.Data">
            <summary>Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.Passport.PassportElementError"/> can be cast into <see cref="T:Telegram.Bot.Types.Passport.PassportElementErrorDataField"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.PassportElementErrorSource.FrontSide">
            <summary>Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.Passport.PassportElementError"/> can be cast into <see cref="T:Telegram.Bot.Types.Passport.PassportElementErrorFrontSide"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.PassportElementErrorSource.ReverseSide">
            <summary>Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.Passport.PassportElementError"/> can be cast into <see cref="T:Telegram.Bot.Types.Passport.PassportElementErrorReverseSide"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.PassportElementErrorSource.Selfie">
            <summary>Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.Passport.PassportElementError"/> can be cast into <see cref="T:Telegram.Bot.Types.Passport.PassportElementErrorSelfie"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.PassportElementErrorSource.File">
            <summary>Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.Passport.PassportElementError"/> can be cast into <see cref="T:Telegram.Bot.Types.Passport.PassportElementErrorFile"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.PassportElementErrorSource.Files">
            <summary>Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.Passport.PassportElementError"/> can be cast into <see cref="T:Telegram.Bot.Types.Passport.PassportElementErrorFiles"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.PassportElementErrorSource.TranslationFile">
            <summary>Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.Passport.PassportElementError"/> can be cast into <see cref="T:Telegram.Bot.Types.Passport.PassportElementErrorTranslationFile"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.PassportElementErrorSource.TranslationFiles">
            <summary>Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.Passport.PassportElementError"/> can be cast into <see cref="T:Telegram.Bot.Types.Passport.PassportElementErrorTranslationFiles"/>)</i></summary>
        </member>
        <member name="F:Telegram.Bot.Types.Passport.PassportElementErrorSource.Unspecified">
            <summary>Represents an issue in an unspecified place. The error is considered resolved when new data is added.<br/><br/><i>(<see cref="T:Telegram.Bot.Types.Passport.PassportElementError"/> can be cast into <see cref="T:Telegram.Bot.Types.Passport.PassportElementErrorUnspecified"/>)</i></summary>
        </member>
        <member name="T:Telegram.Bot.Types.Passport.PassportFile">
            <summary>This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Passport.PassportFile.FileDate">
            <summary>DateTime when the file was uploaded</summary>
        </member>
        <member name="T:Telegram.Bot.Types.PhotoSize">
            <summary>This object represents one size of a photo or a <see cref="T:Telegram.Bot.Types.Document">file</see> / <see cref="T:Telegram.Bot.Types.Sticker"/> thumbnail.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.PhotoSize.Width">
            <summary>Photo width</summary>
        </member>
        <member name="P:Telegram.Bot.Types.PhotoSize.Height">
            <summary>Photo height</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Poll">
            <summary>This object contains information about a poll.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.Id">
            <summary>Unique poll identifier</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.Question">
            <summary>Poll question, 1-300 characters</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.QuestionEntities">
            <summary><em>Optional</em>. Special entities that appear in the <see cref="P:Telegram.Bot.Types.Poll.Question">Question</see>. Currently, only custom emoji entities are allowed in poll questions</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.Options">
            <summary>List of poll options</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.TotalVoterCount">
            <summary>Total number of users that voted in the poll</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.IsClosed">
            <summary><see langword="true"/>, if the poll is closed</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.IsAnonymous">
            <summary><see langword="true"/>, if the poll is anonymous</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.Type">
            <summary>Poll type, currently can be “regular” or “quiz”</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.AllowsMultipleAnswers">
            <summary><see langword="true"/>, if the poll allows multiple answers</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.CorrectOptionId">
            <summary><em>Optional</em>. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.Explanation">
            <summary><em>Optional</em>. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.ExplanationEntities">
            <summary><em>Optional</em>. Special entities like usernames, URLs, bot commands, etc. that appear in the <see cref="P:Telegram.Bot.Types.Poll.Explanation">Explanation</see></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.OpenPeriod">
            <summary><em>Optional</em>. Amount of time in seconds the poll will be active after creation</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Poll.CloseDate">
            <summary><em>Optional</em>. Point in time when the poll will be automatically closed</summary>
        </member>
        <member name="T:Telegram.Bot.Types.PollAnswer">
            <summary>This object represents an answer of a user in a non-anonymous poll.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.PollAnswer.PollId">
            <summary>Unique poll identifier</summary>
        </member>
        <member name="P:Telegram.Bot.Types.PollAnswer.VoterChat">
            <summary><em>Optional</em>. The chat that changed the answer to the poll, if the voter is anonymous</summary>
        </member>
        <member name="P:Telegram.Bot.Types.PollAnswer.User">
            <summary><em>Optional</em>. The user that changed the answer to the poll, if the voter isn't anonymous</summary>
        </member>
        <member name="P:Telegram.Bot.Types.PollAnswer.OptionIds">
            <summary>0-based identifiers of chosen answer options. May be empty if the vote was retracted.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.PollOption">
            <summary>This object contains information about one answer option in a poll.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.PollOption.Text">
            <summary>Option text, 1-100 characters</summary>
        </member>
        <member name="P:Telegram.Bot.Types.PollOption.TextEntities">
            <summary><em>Optional</em>. Special entities that appear in the option <see cref="P:Telegram.Bot.Types.PollOption.Text">Text</see>. Currently, only custom emoji entities are allowed in poll option texts</summary>
        </member>
        <member name="P:Telegram.Bot.Types.PollOption.VoterCount">
            <summary>Number of users that voted for this option</summary>
        </member>
        <member name="T:Telegram.Bot.Types.PreparedInlineMessage">
            <summary>Describes an inline message to be sent by a user of a Mini App.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.PreparedInlineMessage.Id">
            <summary>Unique identifier of the prepared message</summary>
        </member>
        <member name="P:Telegram.Bot.Types.PreparedInlineMessage.ExpirationDate">
            <summary>Expiration date of the prepared message,. Expired prepared messages can no longer be used</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ProximityAlertTriggered">
            <summary>This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ProximityAlertTriggered.Traveler">
            <summary>User that triggered the alert</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ProximityAlertTriggered.Watcher">
            <summary>User that set the alert</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ProximityAlertTriggered.Distance">
            <summary>The distance between the users</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReactionCount">
            <summary>Represents a reaction added to a message along with the number of times it was added.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReactionCount.Type">
            <summary>Type of the reaction</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReactionCount.TotalCount">
            <summary>Number of times the reaction was added</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReactionTypeEmoji">
            <summary>The reaction is based on an emoji.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReactionTypeEmoji.Type">
            <summary>Type of the reaction, always <see cref="F:Telegram.Bot.Types.Enums.ReactionTypeKind.Emoji"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReactionTypeEmoji.Emoji">
            <summary>Reaction emoji. Currently, it can be one of "👍", "👎", "❤", "🔥", "🥰", "👏", "😁", "🤔", "🤯", "😱", "🤬", "😢", "🎉", "🤩", "🤮", "💩", "🙏", "👌", "🕊", "🤡", "🥱", "🥴", "😍", "🐳", "❤‍🔥", "🌚", "🌭", "💯", "🤣", "⚡", "🍌", "🏆", "💔", "🤨", "😐", "🍓", "🍾", "💋", "🖕", "😈", "😴", "😭", "🤓", "👻", "👨‍💻", "👀", "🎃", "🙈", "😇", "😨", "🤝", "✍", "🤗", "🫡", "🎅", "🎄", "☃", "💅", "🤪", "🗿", "🆒", "💘", "🙉", "🦄", "😘", "💊", "🙊", "😎", "👾", "🤷‍♂", "🤷", "🤷‍♀", "😡"</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReactionTypeCustomEmoji">
            <summary>The reaction is based on a custom emoji.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReactionTypeCustomEmoji.Type">
            <summary>Type of the reaction, always <see cref="F:Telegram.Bot.Types.Enums.ReactionTypeKind.CustomEmoji"/></summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReactionTypeCustomEmoji.CustomEmojiId">
            <summary>Custom emoji identifier</summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReactionTypePaid">
            <summary>The reaction is paid.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReactionTypePaid.Type">
            <summary>Type of the reaction, always <see cref="F:Telegram.Bot.Types.Enums.ReactionTypeKind.Paid"/></summary>
        </member>
        <member name="T:Telegram.Bot.Types.ResponseParameters">
            <summary>Describes why a request was unsuccessful.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ResponseParameters.MigrateToChatId">
            <summary><em>Optional</em>. The group has been migrated to a supergroup with the specified identifier.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.ResponseParameters.RetryAfter">
            <summary><em>Optional</em>. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated</summary>
        </member>
        <member name="T:Telegram.Bot.Types.SentWebAppMessage">
            <summary>Describes an inline message sent by a <a href="https://core.telegram.org/bots/webapps">Web App</a> on behalf of a user.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.SentWebAppMessage.InlineMessageId">
            <summary><em>Optional</em>. Identifier of the sent inline message. Available only if there is an <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">inline keyboard</see> attached to the message.</summary>
        </member>
        <member name="M:Telegram.Bot.Types.SentWebAppMessage.op_Implicit(Telegram.Bot.Types.SentWebAppMessage)~System.String">
            <summary>Implicit conversion to string (InlineMessageId)</summary>
        </member>
        <member name="M:Telegram.Bot.Types.SentWebAppMessage.op_Implicit(System.String)~Telegram.Bot.Types.SentWebAppMessage">
            <summary>Implicit conversion from string (InlineMessageId)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.SharedUser">
            <summary>This object contains information about a user that was shared with the bot using a <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers"/> button.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.SharedUser.UserId">
            <summary>Identifier of the shared user. The bot may not have access to the user and could be unable to use this identifier, unless the user is already known to the bot by some other means.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.SharedUser.FirstName">
            <summary><em>Optional</em>. First name of the user, if the name was requested by the bot</summary>
        </member>
        <member name="P:Telegram.Bot.Types.SharedUser.LastName">
            <summary><em>Optional</em>. Last name of the user, if the name was requested by the bot</summary>
        </member>
        <member name="P:Telegram.Bot.Types.SharedUser.Username">
            <summary><em>Optional</em>. Username of the user, if the username was requested by the bot</summary>
        </member>
        <member name="P:Telegram.Bot.Types.SharedUser.Photo">
            <summary><em>Optional</em>. Available sizes of the chat photo, if the photo was requested by the bot</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Sticker">
            <summary>This object represents a sticker.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.Type">
            <summary>Type of the sticker, currently one of <see cref="F:Telegram.Bot.Types.Enums.StickerType.Regular">Regular</see>, <see cref="F:Telegram.Bot.Types.Enums.StickerType.Mask">Mask</see>, <see cref="F:Telegram.Bot.Types.Enums.StickerType.CustomEmoji">CustomEmoji</see>. The type of the sticker is independent from its format, which is determined by the fields <see cref="P:Telegram.Bot.Types.Sticker.IsAnimated">IsAnimated</see> and <see cref="P:Telegram.Bot.Types.Sticker.IsVideo">IsVideo</see>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.Width">
            <summary>Sticker width</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.Height">
            <summary>Sticker height</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.IsAnimated">
            <summary><see langword="true"/>, if the sticker is <a href="https://telegram.org/blog/animated-stickers">animated</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.IsVideo">
            <summary><see langword="true"/>, if the sticker is a <a href="https://telegram.org/blog/video-stickers-better-reactions">video sticker</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.Thumbnail">
            <summary><em>Optional</em>. Sticker thumbnail in the .WEBP or .JPG format</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.Emoji">
            <summary><em>Optional</em>. Emoji associated with the sticker</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.SetName">
            <summary><em>Optional</em>. Name of the sticker set to which the sticker belongs</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.PremiumAnimation">
            <summary><em>Optional</em>. For premium regular stickers, premium animation for the sticker</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.MaskPosition">
            <summary><em>Optional</em>. For mask stickers, the position where the mask should be placed</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.CustomEmojiId">
            <summary><em>Optional</em>. For custom emoji stickers, unique identifier of the custom emoji</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.NeedsRepainting">
            <summary><em>Optional</em>. <see langword="true"/>, if the sticker must be repainted to a text color in messages, the color of the Telegram Premium badge in emoji status, white color on chat photos, or another appropriate color in other places</summary>
        </member>
        <member name="T:Telegram.Bot.Types.StickerSet">
            <summary>This object represents a sticker set.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.StickerSet.Name">
            <summary>Sticker set name</summary>
        </member>
        <member name="P:Telegram.Bot.Types.StickerSet.Title">
            <summary>Sticker set title</summary>
        </member>
        <member name="P:Telegram.Bot.Types.StickerSet.StickerType">
            <summary>Type of stickers in the set, currently one of <see cref="F:Telegram.Bot.Types.Enums.StickerType.Regular">Regular</see>, <see cref="F:Telegram.Bot.Types.Enums.StickerType.Mask">Mask</see>, <see cref="F:Telegram.Bot.Types.Enums.StickerType.CustomEmoji">CustomEmoji</see></summary>
        </member>
        <member name="P:Telegram.Bot.Types.StickerSet.Stickers">
            <summary>List of all set stickers</summary>
        </member>
        <member name="P:Telegram.Bot.Types.StickerSet.Thumbnail">
            <summary><em>Optional</em>. Sticker set thumbnail in the .WEBP, .TGS, or .WEBM format</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Story">
            <summary>This object represents a story.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Story.Chat">
            <summary>Chat that posted the story</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Story.Id">
            <summary>Unique identifier for the story in the chat</summary>
        </member>
        <member name="T:Telegram.Bot.Types.SwitchInlineQueryChosenChat">
            <summary>This object represents an inline button that switches the current user to inline mode in a chosen chat, with an optional default inline query.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.SwitchInlineQueryChosenChat.Query">
            <summary><em>Optional</em>. The default inline query to be inserted in the input field. If left empty, only the bot's username will be inserted</summary>
        </member>
        <member name="P:Telegram.Bot.Types.SwitchInlineQueryChosenChat.AllowUserChats">
            <summary><em>Optional</em>. <see langword="true"/>, if private chats with users can be chosen</summary>
        </member>
        <member name="P:Telegram.Bot.Types.SwitchInlineQueryChosenChat.AllowBotChats">
            <summary><em>Optional</em>. <see langword="true"/>, if private chats with bots can be chosen</summary>
        </member>
        <member name="P:Telegram.Bot.Types.SwitchInlineQueryChosenChat.AllowGroupChats">
            <summary><em>Optional</em>. <see langword="true"/>, if group and supergroup chats can be chosen</summary>
        </member>
        <member name="P:Telegram.Bot.Types.SwitchInlineQueryChosenChat.AllowChannelChats">
            <summary><em>Optional</em>. <see langword="true"/>, if channel chats can be chosen</summary>
        </member>
        <member name="T:Telegram.Bot.Types.TextQuote">
            <summary>This object contains information about the quoted part of a message that is replied to by the given message.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.TextQuote.Text">
            <summary>Text of the quoted part of a message that is replied to by the given message</summary>
        </member>
        <member name="P:Telegram.Bot.Types.TextQuote.Entities">
            <summary><em>Optional</em>. Special entities that appear in the quote. Currently, only <em>bold</em>, <em>italic</em>, <em>underline</em>, <em>strikethrough</em>, <em>spoiler</em>, and <em>CustomEmoji</em> entities are kept in quotes.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.TextQuote.Position">
            <summary>Approximate quote position in the original message in UTF-16 code units as specified by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.TextQuote.IsManual">
            <summary><em>Optional</em>. <see langword="true"/>, if the quote was chosen manually by the message sender. Otherwise, the quote was added automatically by the server.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Update">
            <summary>This <a href="https://core.telegram.org/bots/api#available-types">object</a> represents an incoming update.<br/>At most <b>one</b> of the optional parameters can be present in any given update.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.Id">
            <summary>The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This identifier becomes especially handy if you're using <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetWebhook(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.InputFileStream,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Boolean,System.String,System.Threading.CancellationToken)">webhooks</see>, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.Message">
            <summary><em>Optional</em>. New incoming message of any kind - text, photo, sticker, etc.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.EditedMessage">
            <summary><em>Optional</em>. New version of a message that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.ChannelPost">
            <summary><em>Optional</em>. New incoming channel post of any kind - text, photo, sticker, etc.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.EditedChannelPost">
            <summary><em>Optional</em>. New version of a channel post that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.BusinessConnection">
            <summary><em>Optional</em>. The bot was connected to or disconnected from a business account, or a user edited an existing connection with the bot</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.BusinessMessage">
            <summary><em>Optional</em>. New message from a connected business account</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.EditedBusinessMessage">
            <summary><em>Optional</em>. New version of a message from a connected business account</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.DeletedBusinessMessages">
            <summary><em>Optional</em>. Messages were deleted from a connected business account</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.MessageReaction">
            <summary><em>Optional</em>. A reaction to a message was changed by a user. The bot must be an administrator in the chat and must explicitly specify <c>"<see cref="P:Telegram.Bot.Types.Update.MessageReaction">MessageReaction</see>"</c> in the list of <em>AllowedUpdates</em> to receive these updates. The update isn't received for reactions set by bots.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.MessageReactionCount">
            <summary><em>Optional</em>. Reactions to a message with anonymous reactions were changed. The bot must be an administrator in the chat and must explicitly specify <c>"<see cref="P:Telegram.Bot.Types.Update.MessageReactionCount">MessageReactionCount</see>"</c> in the list of <em>AllowedUpdates</em> to receive these updates. The updates are grouped and can be sent with delay up to a few minutes.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.InlineQuery">
            <summary><em>Optional</em>. New incoming <a href="https://core.telegram.org/bots/api#inline-mode">inline</a> query</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.ChosenInlineResult">
            <summary><em>Optional</em>. The result of an <a href="https://core.telegram.org/bots/api#inline-mode">inline</a> query that was chosen by a user and sent to their chat partner. Please see our documentation on the <a href="https://core.telegram.org/bots/inline#collecting-feedback">feedback collecting</a> for details on how to enable these updates for your bot.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.CallbackQuery">
            <summary><em>Optional</em>. New incoming callback query</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.ShippingQuery">
            <summary><em>Optional</em>. New incoming shipping query. Only for invoices with flexible price</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.PreCheckoutQuery">
            <summary><em>Optional</em>. New incoming pre-checkout query. Contains full information about checkout</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.PurchasedPaidMedia">
            <summary><em>Optional</em>. A user purchased paid media with a non-empty payload sent by the bot in a non-channel chat</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.Poll">
            <summary><em>Optional</em>. New poll state. Bots receive only updates about manually stopped polls and polls, which are sent by the bot</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.PollAnswer">
            <summary><em>Optional</em>. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.MyChatMember">
            <summary><em>Optional</em>. The bot's chat member status was updated in a chat. For private chats, this update is received only when the bot is blocked or unblocked by the user.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.ChatMember">
            <summary><em>Optional</em>. A chat member's status was updated in a chat. The bot must be an administrator in the chat and must explicitly specify <c>"<see cref="P:Telegram.Bot.Types.Update.ChatMember">ChatMember</see>"</c> in the list of <em>AllowedUpdates</em> to receive these updates.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.ChatJoinRequest">
            <summary><em>Optional</em>. A request to join the chat has been sent. The bot must have the <em>CanInviteUsers</em> administrator right in the chat to receive these updates.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.ChatBoost">
            <summary><em>Optional</em>. A chat boost was added or changed. The bot must be an administrator in the chat to receive these updates.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.RemovedChatBoost">
            <summary><em>Optional</em>. A boost was removed from a chat. The bot must be an administrator in the chat to receive these updates.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.Type">
            <summary>Gets the <see cref="T:Telegram.Bot.Types.Enums.UpdateType">type</see> of the <see cref="T:Telegram.Bot.Types.Update"/></summary>
            <value>The <see cref="T:Telegram.Bot.Types.Enums.UpdateType">type</see> of the <see cref="T:Telegram.Bot.Types.Update"/></value>
        </member>
        <member name="F:Telegram.Bot.Types.Update.AllTypes">
            <summary>All UpdateTypes, for use with <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdates(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)">GetUpdates</see></summary>
        </member>
        <member name="T:Telegram.Bot.Types.UserChatBoosts">
            <summary>This object represents a list of boosts added to a chat by a user.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.UserChatBoosts.Boosts">
            <summary>The list of boosts added to the chat by the user</summary>
        </member>
        <member name="M:Telegram.Bot.Types.UserChatBoosts.op_Implicit(Telegram.Bot.Types.UserChatBoosts)~Telegram.Bot.Types.ChatBoost[]">
            <summary>Implicit conversion to ChatBoost[] (Boosts)</summary>
        </member>
        <member name="M:Telegram.Bot.Types.UserChatBoosts.op_Implicit(Telegram.Bot.Types.ChatBoost[])~Telegram.Bot.Types.UserChatBoosts">
            <summary>Implicit conversion from ChatBoost[] (Boosts)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.UserProfilePhotos">
            <summary>This object represent a user's profile pictures.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.UserProfilePhotos.TotalCount">
            <summary>Total number of profile pictures the target user has</summary>
        </member>
        <member name="P:Telegram.Bot.Types.UserProfilePhotos.Photos">
            <summary>Requested profile pictures (in up to 4 sizes each)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.UsersShared">
            <summary>This object contains information about the users whose identifiers were shared with the bot using a <see cref="T:Telegram.Bot.Types.ReplyMarkups.KeyboardButtonRequestUsers"/> button.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.UsersShared.RequestId">
            <summary>Identifier of the request</summary>
        </member>
        <member name="P:Telegram.Bot.Types.UsersShared.Users">
            <summary>Information about users shared with the bot.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Venue">
            <summary>This object represents a venue.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.Location">
            <summary>Venue location. Can't be a live location</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.Title">
            <summary>Name of the venue</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.Address">
            <summary>Address of the venue</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.FoursquareId">
            <summary><em>Optional</em>. Foursquare identifier of the venue</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.FoursquareType">
            <summary><em>Optional</em>. Foursquare type of the venue. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.GooglePlaceId">
            <summary><em>Optional</em>. Google Places identifier of the venue</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.GooglePlaceType">
            <summary><em>Optional</em>. Google Places type of the venue. (See <a href="https://developers.google.com/places/web-service/supported_types">supported types</a>.)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Video">
            <summary>This object represents a video file.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.Width">
            <summary>Video width as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.Height">
            <summary>Video height as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.Duration">
            <summary>Duration of the video in seconds as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.Thumbnail">
            <summary><em>Optional</em>. Video thumbnail</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.FileName">
            <summary><em>Optional</em>. Original filename as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.MimeType">
            <summary><em>Optional</em>. MIME type of the file as defined by the sender</summary>
        </member>
        <member name="T:Telegram.Bot.Types.VideoChatEnded">
            <summary>This object represents a service message about a video chat ended in the chat.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.VideoChatEnded.Duration">
            <summary>Video chat duration in seconds</summary>
        </member>
        <member name="M:Telegram.Bot.Types.VideoChatEnded.op_Implicit(Telegram.Bot.Types.VideoChatEnded)~System.Int32">
            <summary>Implicit conversion to int (Duration)</summary>
        </member>
        <member name="M:Telegram.Bot.Types.VideoChatEnded.op_Implicit(System.Int32)~Telegram.Bot.Types.VideoChatEnded">
            <summary>Implicit conversion from int (Duration)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.VideoChatParticipantsInvited">
            <summary>This object represents a service message about new members invited to a video chat.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.VideoChatParticipantsInvited.Users">
            <summary>New members that were invited to the video chat</summary>
        </member>
        <member name="M:Telegram.Bot.Types.VideoChatParticipantsInvited.op_Implicit(Telegram.Bot.Types.VideoChatParticipantsInvited)~Telegram.Bot.Types.User[]">
            <summary>Implicit conversion to User[] (Users)</summary>
        </member>
        <member name="M:Telegram.Bot.Types.VideoChatParticipantsInvited.op_Implicit(Telegram.Bot.Types.User[])~Telegram.Bot.Types.VideoChatParticipantsInvited">
            <summary>Implicit conversion from User[] (Users)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.VideoChatScheduled">
            <summary>This object represents a service message about a video chat scheduled in the chat.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.VideoChatScheduled.StartDate">
            <summary>Point in time when the video chat is supposed to be started by a chat administrator</summary>
        </member>
        <member name="M:Telegram.Bot.Types.VideoChatScheduled.op_Implicit(Telegram.Bot.Types.VideoChatScheduled)~System.DateTime">
            <summary>Implicit conversion to DateTime (StartDate)</summary>
        </member>
        <member name="M:Telegram.Bot.Types.VideoChatScheduled.op_Implicit(System.DateTime)~Telegram.Bot.Types.VideoChatScheduled">
            <summary>Implicit conversion from DateTime (StartDate)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.VideoChatStarted">
            <summary>This object represents a service message about a video chat started in the chat. Currently holds no information.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.VideoNote">
            <summary>This object represents a <a href="https://telegram.org/blog/video-messages-and-telescope">video message</a> (available in Telegram apps as of <a href="https://telegram.org/blog/video-messages-and-telescope">v.4.0</a>).</summary>
        </member>
        <member name="P:Telegram.Bot.Types.VideoNote.Length">
            <summary>Video width and height (diameter of the video message) as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.VideoNote.Duration">
            <summary>Duration of the video in seconds as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.VideoNote.Thumbnail">
            <summary><em>Optional</em>. Video thumbnail</summary>
        </member>
        <member name="T:Telegram.Bot.Types.Voice">
            <summary>This object represents a voice note.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Voice.Duration">
            <summary>Duration of the audio in seconds as defined by the sender</summary>
        </member>
        <member name="P:Telegram.Bot.Types.Voice.MimeType">
            <summary><em>Optional</em>. MIME type of the file as defined by the sender</summary>
        </member>
        <member name="T:Telegram.Bot.Types.WebAppData">
            <summary>Describes data sent from a <a href="https://core.telegram.org/bots/webapps">Web App</a> to the bot.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebAppData.Data">
            <summary>The data. Be aware that a bad client can send arbitrary data in this field.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebAppData.ButtonText">
            <summary>Text of the <em>WebApp</em> keyboard button from which the Web App was opened. Be aware that a bad client can send arbitrary data in this field.</summary>
        </member>
        <member name="T:Telegram.Bot.Types.WebAppInfo">
            <summary>Describes a <a href="https://core.telegram.org/bots/webapps">Web App</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebAppInfo.Url">
            <summary>An HTTPS URL of a Web App to be opened with additional data as specified in <a href="https://core.telegram.org/bots/webapps#initializing-mini-apps">Initializing Web Apps</a></summary>
        </member>
        <member name="M:Telegram.Bot.Types.WebAppInfo.#ctor(System.String)">
            <summary>Initializes an instance of <see cref="T:Telegram.Bot.Types.WebAppInfo"/></summary>
            <param name="url">An HTTPS URL of a Web App to be opened with additional data as specified in <a href="https://core.telegram.org/bots/webapps#initializing-mini-apps">Initializing Web Apps</a></param>
        </member>
        <member name="M:Telegram.Bot.Types.WebAppInfo.#ctor">
            <summary>Instantiates a new <see cref="T:Telegram.Bot.Types.WebAppInfo"/></summary>
        </member>
        <member name="M:Telegram.Bot.Types.WebAppInfo.op_Implicit(Telegram.Bot.Types.WebAppInfo)~System.String">
            <summary>Implicit conversion to string (Url)</summary>
        </member>
        <member name="M:Telegram.Bot.Types.WebAppInfo.op_Implicit(System.String)~Telegram.Bot.Types.WebAppInfo">
            <summary>Implicit conversion from string (Url)</summary>
        </member>
        <member name="T:Telegram.Bot.Types.WebhookInfo">
            <summary>Describes the current status of a webhook.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.Url">
            <summary>Webhook URL, may be empty if webhook is not set up</summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.HasCustomCertificate">
            <summary><see langword="true"/>, if a custom certificate was provided for webhook certificate checks</summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.PendingUpdateCount">
            <summary>Number of updates awaiting delivery</summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.IpAddress">
            <summary><em>Optional</em>. Currently used webhook IP address</summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.LastErrorDate">
            <summary><em>Optional</em>. DateTime for the most recent error that happened when trying to deliver an update via webhook</summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.LastErrorMessage">
            <summary><em>Optional</em>. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook</summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.LastSynchronizationErrorDate">
            <summary><em>Optional</em>. DateTime of the most recent error that happened when trying to synchronize available updates with Telegram datacenters</summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.MaxConnections">
            <summary><em>Optional</em>. The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery</summary>
        </member>
        <member name="P:Telegram.Bot.Types.WebhookInfo.AllowedUpdates">
            <summary><em>Optional</em>. A list of update types the bot is subscribed to. Defaults to all update types except <em>ChatMember</em></summary>
        </member>
        <member name="T:Telegram.Bot.Types.WriteAccessAllowed">
            <summary>This object represents a service message about a user allowing a bot to write messages after adding it to the attachment menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method <a href="https://core.telegram.org/bots/webapps#initializing-mini-apps">requestWriteAccess</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Types.WriteAccessAllowed.FromRequest">
            <summary><em>Optional</em>. <see langword="true"/>, if the access was granted after the user accepted an explicit request from a Web App sent by the method <a href="https://core.telegram.org/bots/webapps#initializing-mini-apps">requestWriteAccess</a></summary>
        </member>
        <member name="P:Telegram.Bot.Types.WriteAccessAllowed.WebAppName">
            <summary><em>Optional</em>. Name of the Web App, if the access was granted when the Web App was launched from a link</summary>
        </member>
        <member name="P:Telegram.Bot.Types.WriteAccessAllowed.FromAttachmentMenu">
            <summary><em>Optional</em>. <see langword="true"/>, if the access was granted when the bot was added to the attachment or side menu</summary>
        </member>
        <member name="T:Telegram.Bot.Extensions.Markdown">
            <summary>Helpers/Extensions for MarkdownV2 texts</summary>
        </member>
        <member name="M:Telegram.Bot.Extensions.Markdown.ToMarkdown(Telegram.Bot.Types.Message)">
            <summary>Generate MarkdownV2 text from the Message Text or Caption</summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:Telegram.Bot.Extensions.Markdown.ToMarkdown(System.String,Telegram.Bot.Types.MessageEntity[])">
            <summary>Converts the (plain text + entities) format used by Telegram messages into a <a href="https://core.telegram.org/bots/api/#markdownv2-style">MarkdownV2 text</a></summary>
            <param name="message">The plain text, typically obtained from <see cref="P:Telegram.Bot.Types.Message.Text"/></param>
            <param name="entities">The array of formatting entities, typically obtained from <see cref="P:Telegram.Bot.Types.Message.Entities"/></param>
            <returns>The message text with MarkdownV2 formattings </returns>
        </member>
        <member name="M:Telegram.Bot.Extensions.Markdown.Escape(System.String)">
            <summary>Insert backslashes in front of MarkdownV2 reserved characters</summary>
            <param name="text">The text to escape</param>
            <returns>The escaped text (may return null if input is null)</returns>
        </member>
        <member name="T:Telegram.Bot.Extensions.HtmlText">
            <summary>Helpers/Extensions for HTML texts</summary>
        </member>
        <member name="M:Telegram.Bot.Extensions.HtmlText.ToHtml(Telegram.Bot.Types.Message)">
            <summary>Generate HTML text from the Message Text or Caption</summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:Telegram.Bot.Extensions.HtmlText.ToHtml(System.String,Telegram.Bot.Types.MessageEntity[])">
            <summary>Converts the (plain text + entities) format used by Telegram messages into an <a href="https://core.telegram.org/bots/api/#html-style">HTML-formatted text</a></summary>
            <param name="message">The plain text, typically obtained from <see cref="P:Telegram.Bot.Types.Message.Text"/></param>
            <param name="entities">The array of formatting entities, typically obtained from <see cref="P:Telegram.Bot.Types.Message.Entities"/></param>
            <returns>The message text with HTML formatting tags</returns>
        </member>
        <member name="M:Telegram.Bot.Extensions.HtmlText.Escape(System.String)">
            <summary>Replace special HTML characters with their &amp;xx; equivalent</summary>
            <param name="text">The text to make HTML-safe</param>
            <returns>The HTML-safe text (may return null if input is null)</returns>
        </member>
        <member name="T:Telegram.Bot.AuthHelpers">
            <summary>Provides methods to authenticate data coming from Telegram web requests</summary>
        </member>
        <member name="M:Telegram.Bot.AuthHelpers.ParseValidateData(System.String,System.String,System.Boolean)">
            <summary>Used to parse and validate <see href="https://core.telegram.org/bots/webapps#validating-data-received-via-the-mini-app">Telegram.WebApp.initData</see> or <see href="https://core.telegram.org/widgets/login#receiving-authorization-data">LoginWidget requests</see></summary>
            <param name="initData">Data in the form of a <see href="https://en.wikipedia.org/wiki/Query_string">query string</see>, passed to your web app</param>
            <param name="botToken">The bot token</param>
            <param name="loginWidget">true to validate a LoginWidget request, false to validate a WebApp.initData</param>
            <returns>On success, data fields in a sorted dictionary (without the security hash)</returns>
            <exception cref="T:System.Security.SecurityException">Authentication failed</exception>
        </member>
        <member name="M:Telegram.Bot.AuthHelpers.ParseValidateData(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>Used to parse and validate <see href="https://core.telegram.org/bots/webapps#validating-data-received-via-the-mini-app">Telegram.WebApp.initData</see> or <see href="https://core.telegram.org/widgets/login#receiving-authorization-data">LoginWidget requests</see></summary>
            <param name="fields">Data fields, possibly obtained from the <see href="https://core.telegram.org/widgets/login#receiving-authorization-data">data-onauth</see> function</param>
            <param name="botToken">The bot token</param>
            <param name="loginWidget">true to validate a LoginWidget request, false to validate a WebApp.initData</param>
            <returns>On success, data fields in a sorted dictionary (without the security hash)</returns>
            <exception cref="T:System.Security.SecurityException">Authentication failed</exception>
        </member>
        <member name="T:Telegram.Bot.ITelegramBotClient">
            <summary>A client interface to use the Telegram Bot API</summary>
        </member>
        <member name="P:Telegram.Bot.ITelegramBotClient.LocalBotServer">
            <summary><see langword="true"/> when the bot is using local Bot API server</summary>
        </member>
        <member name="P:Telegram.Bot.ITelegramBotClient.BotId">
            <summary>Unique identifier for the bot from bot token, extracted from the first part of the bot token.
            Token format is not public API so this property is optional and may stop working in the future if Telegram changes it's token format.</summary>
        </member>
        <member name="P:Telegram.Bot.ITelegramBotClient.Timeout">
            <summary>Timeout for requests</summary>
        </member>
        <member name="P:Telegram.Bot.ITelegramBotClient.ExceptionsParser">
            <summary>Instance of <see cref="T:Telegram.Bot.Exceptions.IExceptionParser"/> to parse errors from Bot API into <see cref="T:Telegram.Bot.Exceptions.ApiRequestException"/></summary>
            <remarks>This property is not thread safe</remarks>
        </member>
        <member name="E:Telegram.Bot.ITelegramBotClient.OnMakingApiRequest">
            <summary>Occurs before sending a request to API</summary>
        </member>
        <member name="E:Telegram.Bot.ITelegramBotClient.OnApiResponseReceived">
            <summary>Occurs after receiving the response to an API request</summary>
        </member>
        <member name="M:Telegram.Bot.ITelegramBotClient.SendRequest``1(Telegram.Bot.Requests.Abstractions.IRequest{``0},System.Threading.CancellationToken)">
            <summary>Send a request to Bot API</summary>
            <typeparam name="TResponse">Type of expected result in the response object</typeparam>
            <param name="request">API request object</param>
            <param name="cancellationToken"></param>
            <returns>Result of the API request</returns>
        </member>
        <member name="M:Telegram.Bot.ITelegramBotClient.MakeRequest``1(Telegram.Bot.Requests.Abstractions.IRequest{``0},System.Threading.CancellationToken)">
            <summary>Method MakeRequest was renamed as <see cref="M:Telegram.Bot.ITelegramBotClient.SendRequest``1(Telegram.Bot.Requests.Abstractions.IRequest{``0},System.Threading.CancellationToken)">SendRequest</see></summary>
        </member>
        <member name="M:Telegram.Bot.ITelegramBotClient.MakeRequestAsync``1(Telegram.Bot.Requests.Abstractions.IRequest{``0},System.Threading.CancellationToken)">
            <summary>Method MakeRequestAsync was renamed as <see cref="M:Telegram.Bot.ITelegramBotClient.SendRequest``1(Telegram.Bot.Requests.Abstractions.IRequest{``0},System.Threading.CancellationToken)">SendRequest</see></summary>
        </member>
        <member name="M:Telegram.Bot.ITelegramBotClient.TestApi(System.Threading.CancellationToken)">
            <summary>Test the API token</summary>
            <param name="cancellationToken"></param>
            <returns><see langword="true"/> if token is valid</returns>
        </member>
        <member name="M:Telegram.Bot.ITelegramBotClient.DownloadFile(System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>Use this method to download a file. Get <paramref name="filePath"/> by calling
            <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetFile(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)"/></summary>
            <param name="filePath">Path to file on server</param>
            <param name="destination">Destination stream to write file to</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <exception cref="T:System.ArgumentException">filePath is <see langword="null"/>, empty or too short</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="destination"/> is <see langword="null"/></exception>
        </member>
        <member name="T:Telegram.Bot.TelegramBotClientExtensions">
            <summary>Extension methods that map to requests from Bot API documentation</summary>
            <summary>Provides extension methods for <see cref="T:Telegram.Bot.ITelegramBotClient"/> that allow for <see cref="T:Telegram.Bot.Types.Update"/> polling</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetInfoAndDownloadFile(Telegram.Bot.ITelegramBotClient,System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>Use this method to get basic info about a file download it. For the moment, bots can download filesof up to 20MB in size.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="fileId">File identifier to get info about</param>
            <param name="destination">Destination stream to write file to</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>On success, a <see cref="T:Telegram.Bot.Types.File"/> object is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdates(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)">
            <summary>Use this method to receive incoming updates using long polling (<a href="https://en.wikipedia.org/wiki/Push_technology#Long_polling">wiki</a>).</summary>
            <remarks><b>Notes</b><br/><b>1.</b> This method will not work if an outgoing webhook is set up.<br/><b>2.</b> In order to avoid getting duplicate updates, recalculate <paramref name="offset"/> after each server response.</remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="offset">Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdates(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)">GetUpdates</see> is called with an <paramref name="offset"/> higher than its <em>UpdateId</em>. The negative offset can be specified to retrieve updates starting from <em>-offset</em> update from the end of the updates queue. All previous updates will be forgotten.</param>
            <param name="limit">Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.</param>
            <param name="timeout">Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.</param>
            <param name="allowedUpdates">A list of the update types you want your bot to receive. For example, specify <c>["message", "EditedChannelPost", "CallbackQuery"]</c> to only receive updates of these types. See <see cref="T:Telegram.Bot.Types.Update"/> for a complete list of available update types. Specify an empty list to receive all update types except <em>ChatMember</em>, <em>MessageReaction</em>, and <em>MessageReactionCount</em> (default). If not specified, the previous setting will be used.<br/><br/>Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>An Array of <see cref="T:Telegram.Bot.Types.Update"/> objects.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdatesAsync(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdates(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)">GetUpdates</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetWebhook(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.InputFileStream,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to specify a URL and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized <see cref="T:Telegram.Bot.Types.Update"/>. In case of an unsuccessful request, we will give up after a reasonable amount of attempts.<br/>If you'd like to make sure that the webhook was set by you, you can specify secret data in the parameter <paramref name="secretToken"/>. If specified, the request will contain a header “X-Telegram-Bot-Api-Secret-Token” with the secret token as content.</summary>
            <remarks><p><b>Notes</b><br/><b>1.</b> You will not be able to receive updates using <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdates(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)">GetUpdates</see> for as long as an outgoing webhook is set up.<br/><b>2.</b> To use a self-signed certificate, you need to upload your <a href="https://core.telegram.org/bots/self-signed">public key certificate</a> using <paramref name="certificate"/> parameter. Please upload as InputFile, sending a String will not work.<br/><b>3.</b> Ports currently supported <em>for webhooks</em>: <b>443, 80, 88, 8443</b>.</p><p>If you're having any trouble setting up webhooks, please check out this <a href="https://core.telegram.org/bots/webhooks">amazing guide to webhooks</a>.</p></remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="url">HTTPS URL to send updates to. Use an empty string to remove webhook integration</param>
            <param name="certificate">Upload your public key certificate so that the root certificate in use can be checked. See our <a href="https://core.telegram.org/bots/self-signed">self-signed guide</a> for details.</param>
            <param name="ipAddress">The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS</param>
            <param name="maxConnections">The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to <em>40</em>. Use lower values to limit the load on your bot's server, and higher values to increase your bot's throughput.</param>
            <param name="allowedUpdates">A list of the update types you want your bot to receive. For example, specify <c>["message", "EditedChannelPost", "CallbackQuery"]</c> to only receive updates of these types. See <see cref="T:Telegram.Bot.Types.Update"/> for a complete list of available update types. Specify an empty list to receive all update types except <em>ChatMember</em>, <em>MessageReaction</em>, and <em>MessageReactionCount</em> (default). If not specified, the previous setting will be used.<br/>Please note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time.</param>
            <param name="dropPendingUpdates">Pass <see langword="true"/> to drop all pending updates</param>
            <param name="secretToken">A secret token to be sent in a header “X-Telegram-Bot-Api-Secret-Token” in every webhook request, 1-256 characters. Only characters <c>A-Z</c>, <c>a-z</c>, <c>0-9</c>, <c>_</c> and <c>-</c> are allowed. The header is useful to ensure that the request comes from a webhook set by you.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetWebhookAsync(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.InputFileStream,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetWebhook(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.InputFileStream,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Boolean,System.String,System.Threading.CancellationToken)">SetWebhook</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteWebhook(Telegram.Bot.ITelegramBotClient,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to remove webhook integration if you decide to switch back to <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdates(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)">GetUpdates</see>.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="dropPendingUpdates">Pass <see langword="true"/> to drop all pending updates</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteWebhookAsync(Telegram.Bot.ITelegramBotClient,System.Boolean,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.DeleteWebhook(Telegram.Bot.ITelegramBotClient,System.Boolean,System.Threading.CancellationToken)">DeleteWebhook</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetWebhookInfo(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>Use this method to get current webhook status.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>A <see cref="T:Telegram.Bot.Types.WebhookInfo"/> object. If the bot is using <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdates(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)">GetUpdates</see>, will return an object with the <em>url</em> field empty.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetWebhookInfoAsync(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetWebhookInfo(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">GetWebhookInfo</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetMe(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>A simple method for testing your bot's authentication token.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>Basic information about the bot in form of a <see cref="T:Telegram.Bot.Types.User"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetMeAsync(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetMe(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">GetMe</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.LogOut(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>Use this method to log out from the cloud Bot API server before launching the bot locally. You <b>must</b> log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.LogOutAsync(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.LogOut(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">LogOut</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.Close(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CloseAsync(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.Close(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">Close</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendMessage(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,Telegram.Bot.Types.LinkPreviewOptions,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to send text messages.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="text">Text of the message to be sent, 1-4096 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the message text. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</param>
            <param name="linkPreviewOptions">Link preview generation options for the message</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="entities">A list of special entities that appear in message text, which can be specified instead of <paramref name="parseMode"/></param>
            <param name="disableNotification">Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the sent message from forwarding and saving</param>
            <param name="messageEffectId">Unique identifier of the message effect to be added to the message; for private chats only</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <param name="allowPaidBroadcast">Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendTextMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Nullable{System.Int32},Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},Telegram.Bot.Types.LinkPreviewOptions,System.Boolean,System.Boolean,System.Boolean,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendMessage(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,Telegram.Bot.Types.LinkPreviewOptions,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">SendMessage</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ForwardMessage(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to forward messages of any kind. Service messages and messages with protected content can't be forwarded.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="fromChatId">Unique identifier for the chat where the original message was sent (or channel username in the format <c>@channelusername</c>)</param>
            <param name="messageId">Message identifier in the chat specified in <paramref name="fromChatId"/></param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="disableNotification">Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the forwarded message from forwarding and saving</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ForwardMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ForwardMessage(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Threading.CancellationToken)">ForwardMessage</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ForwardMessages(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to forward multiple messages of any kind. If some of the specified messages can't be found or forwarded, they are skipped. Service messages and messages with protected content can't be forwarded. Album grouping is kept for forwarded messages.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="fromChatId">Unique identifier for the chat where the original messages were sent (or channel username in the format <c>@channelusername</c>)</param>
            <param name="messageIds">A list of 1-100 identifiers of messages in the chat <paramref name="fromChatId"/> to forward. The identifiers must be specified in a strictly increasing order.</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="disableNotification">Sends the messages <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the forwarded messages from forwarding and saving</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>An array of <see cref="T:Telegram.Bot.Types.MessageId"/> of the sent messages is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ForwardMessagesAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ForwardMessages(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Threading.CancellationToken)">ForwardMessages</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CopyMessage(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Int32,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to copy messages of any kind. Service messages, paid media messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied. A quiz <see cref="T:Telegram.Bot.Types.Poll"/> can be copied only if the value of the field <em>CorrectOptionId</em> is known to the bot. The method is analogous to the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ForwardMessage(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Threading.CancellationToken)">ForwardMessage</see>, but the copied message doesn't have a link to the original message.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="fromChatId">Unique identifier for the chat where the original message was sent (or channel username in the format <c>@channelusername</c>)</param>
            <param name="messageId">Message identifier in the chat specified in <paramref name="fromChatId"/></param>
            <param name="caption">New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept</param>
            <param name="parseMode">Mode for parsing entities in the new caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="captionEntities">A list of special entities that appear in the new caption, which can be specified instead of <paramref name="parseMode"/></param>
            <param name="showCaptionAboveMedia">Pass <see langword="true"/>, if the caption must be shown above the message media. Ignored if a new caption isn't specified.</param>
            <param name="disableNotification">Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the sent message from forwarding and saving</param>
            <param name="allowPaidBroadcast">Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The <see cref="T:Telegram.Bot.Types.MessageId"/> of the sent message on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CopyMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Int32,System.Nullable{System.Int32},System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.CopyMessage(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Int32,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">CopyMessage</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CopyMessages(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to copy messages of any kind. If some of the specified messages can't be found or copied, they are skipped. Service messages, paid media messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied. A quiz <see cref="T:Telegram.Bot.Types.Poll"/> can be copied only if the value of the field <em>CorrectOptionId</em> is known to the bot. The method is analogous to the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ForwardMessages(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Threading.CancellationToken)">ForwardMessages</see>, but the copied messages don't have a link to the original message. Album grouping is kept for copied messages.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="fromChatId">Unique identifier for the chat where the original messages were sent (or channel username in the format <c>@channelusername</c>)</param>
            <param name="messageIds">A list of 1-100 identifiers of messages in the chat <paramref name="fromChatId"/> to copy. The identifiers must be specified in a strictly increasing order.</param>
            <param name="removeCaption">Pass <see langword="true"/> to copy the messages without their captions</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="disableNotification">Sends the messages <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the sent messages from forwarding and saving</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>An array of <see cref="T:Telegram.Bot.Types.MessageId"/> of the sent messages is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CopyMessagesAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.CopyMessages(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Threading.CancellationToken)">CopyMessages</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendPhoto(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to send photos.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="photo">Photo to send. Pass a FileId as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></param>
            <param name="caption">Photo caption (may also be used when resending photos by <em>FileId</em>), 0-1024 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the photo caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="captionEntities">A list of special entities that appear in the caption, which can be specified instead of <paramref name="parseMode"/></param>
            <param name="showCaptionAboveMedia">Pass <see langword="true"/>, if the caption must be shown above the message media</param>
            <param name="hasSpoiler">Pass <see langword="true"/> if the photo needs to be covered with a spoiler animation</param>
            <param name="disableNotification">Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the sent message from forwarding and saving</param>
            <param name="messageEffectId">Unique identifier of the message effect to be added to the message; for private chats only</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <param name="allowPaidBroadcast">Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendPhotoAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendPhoto(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">SendPhoto</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendAudio(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.String,System.String,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format.</summary>
            <remarks>Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.<br/>For sending voice messages, use the <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendVoice(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">SendVoice</see> method instead.</remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="audio">Audio file to send. Pass a FileId as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></param>
            <param name="caption">Audio caption, 0-1024 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the audio caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</param>
            <param name="duration">Duration of the audio in seconds</param>
            <param name="performer">Performer</param>
            <param name="title">Track name</param>
            <param name="thumbnail">Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. Thumbnails can't be reused and can be only uploaded as a new file, so you can use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="captionEntities">A list of special entities that appear in the caption, which can be specified instead of <paramref name="parseMode"/></param>
            <param name="disableNotification">Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the sent message from forwarding and saving</param>
            <param name="messageEffectId">Unique identifier of the message effect to be added to the message; for private chats only</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <param name="allowPaidBroadcast">Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendAudioAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Int32},System.String,System.String,Telegram.Bot.Types.InputFile,System.Boolean,System.Boolean,System.Boolean,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendAudio(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.String,System.String,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">SendAudio</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendDocument(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to send general files.</summary>
            <remarks>Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.</remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="document">File to send. Pass a FileId as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></param>
            <param name="caption">Document caption (may also be used when resending documents by <em>FileId</em>), 0-1024 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the document caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</param>
            <param name="thumbnail">Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. Thumbnails can't be reused and can be only uploaded as a new file, so you can use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="captionEntities">A list of special entities that appear in the caption, which can be specified instead of <paramref name="parseMode"/></param>
            <param name="disableContentTypeDetection">Disables automatic server-side content type detection for files uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/></param>
            <param name="disableNotification">Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the sent message from forwarding and saving</param>
            <param name="messageEffectId">Unique identifier of the message effect to be added to the message; for private chats only</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <param name="allowPaidBroadcast">Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendDocumentAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendDocument(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">SendDocument</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendVideo(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as <see cref="T:Telegram.Bot.Types.Document"/>).</summary>
            <remarks>Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.</remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="video">Video to send. Pass a FileId as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></param>
            <param name="caption">Video caption (may also be used when resending videos by <em>FileId</em>), 0-1024 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the video caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</param>
            <param name="duration">Duration of sent video in seconds</param>
            <param name="width">Video width</param>
            <param name="height">Video height</param>
            <param name="thumbnail">Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. Thumbnails can't be reused and can be only uploaded as a new file, so you can use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="captionEntities">A list of special entities that appear in the caption, which can be specified instead of <paramref name="parseMode"/></param>
            <param name="showCaptionAboveMedia">Pass <see langword="true"/>, if the caption must be shown above the message media</param>
            <param name="hasSpoiler">Pass <see langword="true"/> if the video needs to be covered with a spoiler animation</param>
            <param name="supportsStreaming">Pass <see langword="true"/> if the uploaded video is suitable for streaming</param>
            <param name="disableNotification">Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the sent message from forwarding and saving</param>
            <param name="messageEffectId">Unique identifier of the message effect to be added to the message; for private chats only</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <param name="allowPaidBroadcast">Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendVideoAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendVideo(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">SendVideo</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendAnimation(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound).</summary>
            <remarks>Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.</remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="animation">Animation to send. Pass a FileId as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></param>
            <param name="caption">Animation caption (may also be used when resending animation by <em>FileId</em>), 0-1024 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the animation caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</param>
            <param name="duration">Duration of sent animation in seconds</param>
            <param name="width">Animation width</param>
            <param name="height">Animation height</param>
            <param name="thumbnail">Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. Thumbnails can't be reused and can be only uploaded as a new file, so you can use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="captionEntities">A list of special entities that appear in the caption, which can be specified instead of <paramref name="parseMode"/></param>
            <param name="showCaptionAboveMedia">Pass <see langword="true"/>, if the caption must be shown above the message media</param>
            <param name="hasSpoiler">Pass <see langword="true"/> if the animation needs to be covered with a spoiler animation</param>
            <param name="disableNotification">Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the sent message from forwarding and saving</param>
            <param name="messageEffectId">Unique identifier of the message effect to be added to the message; for private chats only</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <param name="allowPaidBroadcast">Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendAnimationAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendAnimation(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">SendAnimation</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendVoice(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS, or in .MP3 format, or in .M4A format (other formats may be sent as <see cref="T:Telegram.Bot.Types.Audio"/> or <see cref="T:Telegram.Bot.Types.Document"/>).</summary>
            <remarks>Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.</remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="voice">Audio file to send. Pass a FileId as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></param>
            <param name="caption">Voice message caption, 0-1024 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the voice message caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</param>
            <param name="duration">Duration of the voice message in seconds</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="captionEntities">A list of special entities that appear in the caption, which can be specified instead of <paramref name="parseMode"/></param>
            <param name="disableNotification">Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the sent message from forwarding and saving</param>
            <param name="messageEffectId">Unique identifier of the message effect to be added to the message; for private chats only</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <param name="allowPaidBroadcast">Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendVoiceAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendVoice(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">SendVoice</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendVideoNote(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>As of <a href="https://telegram.org/blog/video-messages-and-telescope">v.4.0</a>, Telegram clients support rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="videoNote">Video note to send. Pass a FileId as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a>. Sending video notes by a URL is currently unsupported</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</param>
            <param name="duration">Duration of sent video in seconds</param>
            <param name="length">Video width and height, i.e. diameter of the video message</param>
            <param name="thumbnail">Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. Thumbnails can't be reused and can be only uploaded as a new file, so you can use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="disableNotification">Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the sent message from forwarding and saving</param>
            <param name="messageEffectId">Unique identifier of the message effect to be added to the message; for private chats only</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <param name="allowPaidBroadcast">Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendVideoNoteAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputFile,System.Boolean,System.Boolean,System.Boolean,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendVideoNote(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">SendVideoNote</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendPaidMedia(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InputPaidMedia},System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to send paid media.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>). If the chat is a channel, all Telegram Star proceeds from this media will be credited to the chat's balance. Otherwise, they will be credited to the bot's balance.</param>
            <param name="starCount">The number of Telegram Stars that must be paid to buy access to the media; 1-2500</param>
            <param name="media">A array describing the media to be sent; up to 10 items</param>
            <param name="caption">Media caption, 0-1024 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the media caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</param>
            <param name="payload">Bot-defined paid media payload, 0-128 bytes. This will not be displayed to the user, use it for your internal processes.</param>
            <param name="captionEntities">A list of special entities that appear in the caption, which can be specified instead of <paramref name="parseMode"/></param>
            <param name="showCaptionAboveMedia">Pass <see langword="true"/>, if the caption must be shown above the message media</param>
            <param name="disableNotification">Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the sent message from forwarding and saving</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <param name="allowPaidBroadcast">Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendPaidMediaAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InputPaidMedia},System.String,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendPaidMedia(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InputPaidMedia},System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.Threading.CancellationToken)">SendPaidMedia</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendMediaGroup(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.IAlbumInputMedia},Telegram.Bot.Types.ReplyParameters,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="media">A array describing messages to be sent, must include 2-10 items</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="disableNotification">Sends messages <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the sent messages from forwarding and saving</param>
            <param name="messageEffectId">Unique identifier of the message effect to be added to the message; for private chats only</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <param name="allowPaidBroadcast">Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>An array of <see cref="T:Telegram.Bot.Types.Message">Messages</see> that were sent is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendMediaGroupAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.IAlbumInputMedia},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.String,Telegram.Bot.Types.ReplyParameters,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendMediaGroup(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.IAlbumInputMedia},Telegram.Bot.Types.ReplyParameters,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">SendMediaGroup</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendLocation(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Double,System.Double,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to send point on the map.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="latitude">Latitude of the location</param>
            <param name="longitude">Longitude of the location</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</param>
            <param name="horizontalAccuracy">The radius of uncertainty for the location, measured in meters; 0-1500</param>
            <param name="livePeriod">Period in seconds during which the location will be updated (see <a href="https://telegram.org/blog/live-locations">Live Locations</a>, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.</param>
            <param name="heading">For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.</param>
            <param name="proximityAlertRadius">For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="disableNotification">Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the sent message from forwarding and saving</param>
            <param name="messageEffectId">Unique identifier of the message effect to be added to the message; for private chats only</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <param name="allowPaidBroadcast">Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendLocationAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Double,System.Double,System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendLocation(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Double,System.Double,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">SendLocation</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendVenue(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Double,System.Double,System.String,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to send information about a venue.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="latitude">Latitude of the venue</param>
            <param name="longitude">Longitude of the venue</param>
            <param name="title">Name of the venue</param>
            <param name="address">Address of the venue</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</param>
            <param name="foursquareId">Foursquare identifier of the venue</param>
            <param name="foursquareType">Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)</param>
            <param name="googlePlaceId">Google Places identifier of the venue</param>
            <param name="googlePlaceType">Google Places type of the venue. (See <a href="https://developers.google.com/places/web-service/supported_types">supported types</a>.)</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="disableNotification">Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the sent message from forwarding and saving</param>
            <param name="messageEffectId">Unique identifier of the message effect to be added to the message; for private chats only</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <param name="allowPaidBroadcast">Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendVenueAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Double,System.Double,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendVenue(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Double,System.Double,System.String,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">SendVenue</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendContact(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.String,System.String,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to send phone contacts.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="phoneNumber">Contact's phone number</param>
            <param name="firstName">Contact's first name</param>
            <param name="lastName">Contact's last name</param>
            <param name="vcard">Additional data about the contact in the form of a <a href="https://en.wikipedia.org/wiki/VCard">vCard</a>, 0-2048 bytes</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="disableNotification">Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the sent message from forwarding and saving</param>
            <param name="messageEffectId">Unique identifier of the message effect to be added to the message; for private chats only</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <param name="allowPaidBroadcast">Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendContactAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendContact(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.String,System.String,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">SendContact</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendPoll(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InputPollOption},System.Boolean,System.Nullable{Telegram.Bot.Types.Enums.PollType},System.Boolean,System.Nullable{System.Int32},Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to send a native poll.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="question">Poll question, 1-300 characters</param>
            <param name="options">A list of 2-10 answer options</param>
            <param name="isAnonymous"><see langword="true"/>, if the poll needs to be anonymous, defaults to <see langword="true"/></param>
            <param name="type">Poll type, <see cref="F:Telegram.Bot.Types.Enums.PollType.Quiz">Quiz</see> or <see cref="F:Telegram.Bot.Types.Enums.PollType.Regular">Regular</see>, defaults to <see cref="F:Telegram.Bot.Types.Enums.PollType.Regular">Regular</see></param>
            <param name="allowsMultipleAnswers"><see langword="true"/>, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to <see langword="false"/></param>
            <param name="correctOptionId">0-based identifier of the correct answer option, required for polls in quiz mode</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</param>
            <param name="explanation">Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing</param>
            <param name="explanationParseMode">Mode for parsing entities in the explanation. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</param>
            <param name="explanationEntities">A list of special entities that appear in the poll explanation. It can be specified instead of <paramref name="explanationParseMode"/></param>
            <param name="questionParseMode">Mode for parsing entities in the question. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details. Currently, only custom emoji entities are allowed</param>
            <param name="questionEntities">A list of special entities that appear in the poll question. It can be specified instead of <paramref name="questionParseMode"/></param>
            <param name="openPeriod">Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with <paramref name="closeDate"/>.</param>
            <param name="closeDate">Point in time when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with <paramref name="openPeriod"/>.</param>
            <param name="isClosed">Pass <see langword="true"/> if the poll needs to be immediately closed. This can be useful for poll preview.</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="disableNotification">Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the sent message from forwarding and saving</param>
            <param name="messageEffectId">Unique identifier of the message effect to be added to the message; for private chats only</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <param name="allowPaidBroadcast">Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendPollAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InputPollOption},System.Nullable{System.Int32},Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Nullable{Telegram.Bot.Types.Enums.PollType},System.Boolean,System.Nullable{System.Int32},System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendPoll(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InputPollOption},System.Boolean,System.Nullable{Telegram.Bot.Types.Enums.PollType},System.Boolean,System.Nullable{System.Int32},Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">SendPoll</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendDice(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to send an animated emoji that will display a random value.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="emoji">Emoji on which the dice throw animation is based. Currently, must be one of “🎲”, “🎯”, “🏀”, “⚽”, “🎳”, or “🎰”. Dice can have values 1-6 for “🎲”, “🎯” and “🎳”, values 1-5 for “🏀” and “⚽”, and values 1-64 for “🎰”. Defaults to “🎲”</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="disableNotification">Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the sent message from forwarding</param>
            <param name="messageEffectId">Unique identifier of the message effect to be added to the message; for private chats only</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <param name="allowPaidBroadcast">Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendDiceAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Nullable{System.Int32},System.String,System.Boolean,System.Boolean,System.Boolean,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendDice(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">SendDice</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendChatAction(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.Enums.ChatAction,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status).<br/>We only recommend using this method when a response from the bot will take a <b>noticeable</b> amount of time to arrive.</summary>
            <remarks>Example: The <a href="https://t.me/imagebot">ImageBot</a> needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendChatAction(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.Enums.ChatAction,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">SendChatAction</see> with <paramref name="action"/> = <em>UploadPhoto</em>. The user will see a “sending photo” status for the bot.</remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="action">Type of action to broadcast. Choose one, depending on what the user is about to receive: <em>typing</em> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendMessage(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,Telegram.Bot.Types.LinkPreviewOptions,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">text messages</see>, <em>UploadPhoto</em> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendPhoto(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">photos</see>, <em>RecordVideo</em> or <em>UploadVideo</em> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendVideo(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">videos</see>, <em>RecordVoice</em> or <em>UploadVoice</em> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendVoice(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">voice notes</see>, <em>UploadDocument</em> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendDocument(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">general files</see>, <em>ChooseSticker</em> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendSticker(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">stickers</see>, <em>FindLocation</em> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendLocation(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Double,System.Double,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">location data</see>, <em>RecordVideoNote</em> or <em>UploadVideoNote</em> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendVideoNote(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">video notes</see>.</param>
            <param name="messageThreadId">Unique identifier for the target message thread; for supergroups only</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the action will be sent</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendChatActionAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.Enums.ChatAction,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendChatAction(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.Enums.ChatAction,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">SendChatAction</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetMessageReaction(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.ReactionType},System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to change the chosen reactions on a message. Service messages can't be reacted to. Automatically forwarded messages from a channel to its discussion group have the same available reactions as messages in the channel. Bots can't use paid reactions.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageId">Identifier of the target message. If the message belongs to a media group, the reaction is set to the first non-deleted message in the group instead.</param>
            <param name="reaction">A list of reaction types to set on the message. Currently, as non-premium users, bots can set up to one reaction per message. A custom emoji reaction can be used if it is either already present on the message or explicitly allowed by chat administrators. Paid reactions can't be used by bots.</param>
            <param name="isBig">Pass <see langword="true"/> to set the reaction with a big animation</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetMessageReactionAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.ReactionType},System.Boolean,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetMessageReaction(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.ReactionType},System.Boolean,System.Threading.CancellationToken)">SetMessageReaction</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetUserProfilePhotos(Telegram.Bot.ITelegramBotClient,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Use this method to get a list of profile pictures for a user.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="offset">Sequential number of the first photo to be returned. By default, all photos are returned.</param>
            <param name="limit">Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>A <see cref="T:Telegram.Bot.Types.UserProfilePhotos"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetUserProfilePhotosAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetUserProfilePhotos(Telegram.Bot.ITelegramBotClient,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">GetUserProfilePhotos</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetUserEmojiStatus(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>Changes the emoji status for a given user that previously allowed the bot to manage their emoji status via the Mini App method <a href="https://core.telegram.org/bots/webapps#initializing-mini-apps">requestEmojiStatusAccess</a>.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="emojiStatusCustomEmojiId">Custom emoji identifier of the emoji status to set. Pass an empty string to remove the status.</param>
            <param name="emojiStatusExpirationDate">Expiration date of the emoji status, if any</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetUserEmojiStatusAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetUserEmojiStatus(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.Nullable{System.DateTime},System.Threading.CancellationToken)">SetUserEmojiStatus</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetFile(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to get basic information about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="fileId">File identifier to get information about</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>A <see cref="T:Telegram.Bot.Types.File"/> object is returned. The file can then be downloaded via <see cref="M:Telegram.Bot.TelegramBotClient.DownloadFile(System.String,System.IO.Stream,System.Threading.CancellationToken)">DownloadFile</see>, where <c>&lt;FilePath&gt;</c> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetFile(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">GetFile</see> again.<br/><b>Note:</b> This function may not preserve the original file name and MIME type. You should save the file's MIME type and name (if available) when the File object is received.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetFileAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetFile(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">GetFile</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.BanChatMember(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Nullable{System.DateTime},System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless <see cref="M:Telegram.Bot.TelegramBotClientExtensions.UnbanChatMember(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Boolean,System.Threading.CancellationToken)">unbanned</see> first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target group or username of the target supergroup or channel (in the format <c>@channelusername</c>)</param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="untilDate">Date when the user will be unbanned, in UTC. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever. Applied for supergroups and channels only.</param>
            <param name="revokeMessages">Pass <see langword="true"/> to delete all messages from the chat for the user that is being removed. If <see langword="false"/>, the user will be able to see messages in the group that were sent before the user was removed. Always <see langword="true"/> for supergroups and channels.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.BanChatMemberAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Nullable{System.DateTime},System.Boolean,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.BanChatMember(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Nullable{System.DateTime},System.Boolean,System.Threading.CancellationToken)">BanChatMember</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnbanChatMember(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to unban a previously banned user in a supergroup or channel. The user will <b>not</b> return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be <b>removed</b> from the chat. If you don't want this, use the parameter <paramref name="onlyIfBanned"/>.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target group or username of the target supergroup or channel (in the format <c>@channelusername</c>)</param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="onlyIfBanned">Do nothing if the user is not banned</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnbanChatMemberAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.UnbanChatMember(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Boolean,System.Threading.CancellationToken)">UnbanChatMember</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.RestrictChatMember(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,Telegram.Bot.Types.ChatPermissions,System.Boolean,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass <em>True</em> for all permissions to lift restrictions from a user.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="permissions">An object for new user permissions</param>
            <param name="useIndependentChatPermissions">Pass <see langword="true"/> if chat permissions are set independently. Otherwise, the <em>CanSendOtherMessages</em> and <em>CanAddWebPagePreviews</em> permissions will imply the <em>CanSendMessages</em>, <em>CanSendAudios</em>, <em>CanSendDocuments</em>, <em>CanSendPhotos</em>, <em>CanSendVideos</em>, <em>CanSendVideoNotes</em>, and <em>CanSendVoiceNotes</em> permissions; the <em>CanSendPolls</em> permission will imply the <em>CanSendMessages</em> permission.</param>
            <param name="untilDate">Date when restrictions will be lifted for the user, in UTC. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.RestrictChatMemberAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,Telegram.Bot.Types.ChatPermissions,System.Boolean,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.RestrictChatMember(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,Telegram.Bot.Types.ChatPermissions,System.Boolean,System.Nullable{System.DateTime},System.Threading.CancellationToken)">RestrictChatMember</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.PromoteChatMember(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass <em>False</em> for all boolean parameters to demote a user.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="isAnonymous">Pass <see langword="true"/> if the administrator's presence in the chat is hidden</param>
            <param name="canManageChat">Pass <see langword="true"/> if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege.</param>
            <param name="canPostMessages">Pass <see langword="true"/> if the administrator can post messages in the channel, or access channel statistics; for channels only</param>
            <param name="canEditMessages">Pass <see langword="true"/> if the administrator can edit messages of other users and can pin messages; for channels only</param>
            <param name="canDeleteMessages">Pass <see langword="true"/> if the administrator can delete messages of other users</param>
            <param name="canPostStories">Pass <see langword="true"/> if the administrator can post stories to the chat</param>
            <param name="canEditStories">Pass <see langword="true"/> if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive</param>
            <param name="canDeleteStories">Pass <see langword="true"/> if the administrator can delete stories posted by other users</param>
            <param name="canManageVideoChats">Pass <see langword="true"/> if the administrator can manage video chats</param>
            <param name="canRestrictMembers">Pass <see langword="true"/> if the administrator can restrict, ban or unban chat members, or access supergroup statistics</param>
            <param name="canPromoteMembers">Pass <see langword="true"/> if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by him)</param>
            <param name="canChangeInfo">Pass <see langword="true"/> if the administrator can change chat title, photo and other settings</param>
            <param name="canInviteUsers">Pass <see langword="true"/> if the administrator can invite new users to the chat</param>
            <param name="canPinMessages">Pass <see langword="true"/> if the administrator can pin messages; for supergroups only</param>
            <param name="canManageTopics">Pass <see langword="true"/> if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.PromoteChatMemberAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.PromoteChatMember(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">PromoteChatMember</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatAdministratorCustomTitle(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to set a custom title for an administrator in a supergroup promoted by the bot.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="customTitle">New custom title for the administrator; 0-16 characters, emoji are not allowed</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatAdministratorCustomTitleAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetChatAdministratorCustomTitle(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.String,System.Threading.CancellationToken)">SetChatAdministratorCustomTitle</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.BanChatSenderChat(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>Use this method to ban a channel chat in a supergroup or a channel. Until the chat is <see cref="M:Telegram.Bot.TelegramBotClientExtensions.UnbanChatSenderChat(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">unbanned</see>, the owner of the banned chat won't be able to send messages on behalf of <b>any of their channels</b>. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="senderChatId">Unique identifier of the target sender chat</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.BanChatSenderChatAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.BanChatSenderChat(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">BanChatSenderChat</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnbanChatSenderChat(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="senderChatId">Unique identifier of the target sender chat</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnbanChatSenderChatAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.UnbanChatSenderChat(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">UnbanChatSenderChat</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatPermissions(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatPermissions,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the <em>CanRestrictMembers</em> administrator rights.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="permissions">An object for new default chat permissions</param>
            <param name="useIndependentChatPermissions">Pass <see langword="true"/> if chat permissions are set independently. Otherwise, the <em>CanSendOtherMessages</em> and <em>CanAddWebPagePreviews</em> permissions will imply the <em>CanSendMessages</em>, <em>CanSendAudios</em>, <em>CanSendDocuments</em>, <em>CanSendPhotos</em>, <em>CanSendVideos</em>, <em>CanSendVideoNotes</em>, and <em>CanSendVoiceNotes</em> permissions; the <em>CanSendPolls</em> permission will imply the <em>CanSendMessages</em> permission.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatPermissionsAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatPermissions,System.Boolean,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetChatPermissions(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatPermissions,System.Boolean,System.Threading.CancellationToken)">SetChatPermissions</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ExportChatInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.</summary>
            <remarks>Note: Each administrator in a chat generates their own invite links. Bots can't use invite links generated by other administrators. If you want your bot to work with invite links, it will need to generate its own link using <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ExportChatInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">ExportChatInviteLink</see> or by calling the <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetChat(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">GetChat</see> method. If your bot needs to generate a new primary invite link replacing its previous one, use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ExportChatInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">ExportChatInviteLink</see> again.</remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The new invite link as <em>String</em> on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ExportChatInviteLinkAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ExportChatInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">ExportChatInviteLink</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CreateChatInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.RevokeChatInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">RevokeChatInviteLink</see>.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="name">Invite link name; 0-32 characters</param>
            <param name="expireDate">Point in time when the link will expire</param>
            <param name="memberLimit">The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999</param>
            <param name="createsJoinRequest"><see langword="true"/>, if users joining the chat via the link need to be approved by chat administrators. If <see langword="true"/>, <paramref name="memberLimit"/> can't be specified</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The new invite link as <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CreateChatInviteLinkAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.CreateChatInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">CreateChatInviteLink</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditChatInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="inviteLink">The invite link to edit</param>
            <param name="name">Invite link name; 0-32 characters</param>
            <param name="expireDate">Point in time when the link will expire</param>
            <param name="memberLimit">The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999</param>
            <param name="createsJoinRequest"><see langword="true"/>, if users joining the chat via the link need to be approved by chat administrators. If <see langword="true"/>, <paramref name="memberLimit"/> can't be specified</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The edited invite link as a <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditChatInviteLinkAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.EditChatInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">EditChatInviteLink</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CreateChatSubscriptionInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to create a <a href="https://telegram.org/blog/superchannels-star-reactions-subscriptions#star-subscriptions">subscription invite link</a> for a channel chat. The bot must have the <em>CanInviteUsers</em> administrator rights. The link can be edited using the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.EditChatSubscriptionInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.String,System.Threading.CancellationToken)">EditChatSubscriptionInviteLink</see> or revoked using the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.RevokeChatInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">RevokeChatInviteLink</see>.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target channel chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="subscriptionPeriod">The number of seconds the subscription will be active for before the next payment. Currently, it must always be 2592000 (30 days).</param>
            <param name="subscriptionPrice">The amount of Telegram Stars a user must pay initially and after each subsequent subscription period to be a member of the chat; 1-2500</param>
            <param name="name">Invite link name; 0-32 characters</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The new invite link as a <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CreateChatSubscriptionInviteLinkAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.CreateChatSubscriptionInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">CreateChatSubscriptionInviteLink</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditChatSubscriptionInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to edit a subscription invite link created by the bot. The bot must have the <em>CanInviteUsers</em> administrator rights.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="inviteLink">The invite link to edit</param>
            <param name="name">Invite link name; 0-32 characters</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The edited invite link as a <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditChatSubscriptionInviteLinkAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.EditChatSubscriptionInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.String,System.Threading.CancellationToken)">EditChatSubscriptionInviteLink</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.RevokeChatInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier of the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="inviteLink">The invite link to revoke</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The revoked invite link as <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.RevokeChatInviteLinkAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.RevokeChatInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">RevokeChatInviteLink</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ApproveChatJoinRequest(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the <em>CanInviteUsers</em> administrator right.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ApproveChatJoinRequestAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ApproveChatJoinRequest(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">ApproveChatJoinRequest</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeclineChatJoinRequest(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the <em>CanInviteUsers</em> administrator right.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeclineChatJoinRequestAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.DeclineChatJoinRequest(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">DeclineChatJoinRequest</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatPhoto(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFileStream,System.Threading.CancellationToken)">
            <summary>Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="photo">New chat photo, uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/></param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatPhotoAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFileStream,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetChatPhoto(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFileStream,System.Threading.CancellationToken)">SetChatPhoto</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteChatPhoto(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteChatPhotoAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.DeleteChatPhoto(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">DeleteChatPhoto</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatTitle(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="title">New chat title, 1-128 characters</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatTitleAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetChatTitle(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">SetChatTitle</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatDescription(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="description">New chat description, 0-255 characters</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatDescriptionAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetChatDescription(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">SetChatDescription</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.PinChatMessage(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'CanPinMessages' administrator right in a supergroup or 'CanEditMessages' administrator right in a channel.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageId">Identifier of a message to pin</param>
            <param name="disableNotification">Pass <see langword="true"/> if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be pinned</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.PinChatMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.PinChatMessage(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Boolean,System.String,System.Threading.CancellationToken)">PinChatMessage</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnpinChatMessage(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'CanPinMessages' administrator right in a supergroup or 'CanEditMessages' administrator right in a channel.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageId">Identifier of the message to unpin. Required if <paramref name="businessConnectionId"/> is specified. If not specified, the most recent pinned message (by sending date) will be unpinned.</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be unpinned</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnpinChatMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.UnpinChatMessage(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">UnpinChatMessage</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnpinAllChatMessages(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'CanPinMessages' administrator right in a supergroup or 'CanEditMessages' administrator right in a channel.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnpinAllChatMessagesAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.UnpinAllChatMessages(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">UnpinAllChatMessages</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.LeaveChat(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>Use this method for your bot to leave a group, supergroup or channel.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup or channel (in the format <c>@channelusername</c>)</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.LeaveChatAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.LeaveChat(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">LeaveChat</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetChat(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>Use this method to get up-to-date information about the chat.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup or channel (in the format <c>@channelusername</c>)</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>A <see cref="T:Telegram.Bot.Types.ChatFullInfo"/> object on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetChatAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetChat(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">GetChat</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetChatAdministrators(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>Use this method to get a list of administrators in a chat, which aren't bots.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup or channel (in the format <c>@channelusername</c>)</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>An Array of <see cref="T:Telegram.Bot.Types.ChatMember"/> objects.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetChatAdministratorsAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetChatAdministrators(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">GetChatAdministrators</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetChatMemberCount(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>Use this method to get the number of members in a chat.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup or channel (in the format <c>@channelusername</c>)</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns><em>Int</em> on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetChatMemberCountAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetChatMemberCount(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">GetChatMemberCount</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetChatMember(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>Use this method to get information about a member of a chat. The method is only guaranteed to work for other users if the bot is an administrator in the chat.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup or channel (in the format <c>@channelusername</c>)</param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>A <see cref="T:Telegram.Bot.Types.ChatMember"/> object on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetChatMemberAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetChatMember(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">GetChatMember</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatStickerSet(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field <em>CanSetStickerSet</em> optionally returned in <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetChat(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">GetChat</see> requests to check if the bot can use this method.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="stickerSetName">Name of the sticker set to be set as the group sticker set</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatStickerSetAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetChatStickerSet(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">SetChatStickerSet</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteChatStickerSet(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field <em>CanSetStickerSet</em> optionally returned in <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetChat(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">GetChat</see> requests to check if the bot can use this method.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteChatStickerSetAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.DeleteChatStickerSet(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">DeleteChatStickerSet</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetForumTopicIconStickers(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>An Array of <see cref="T:Telegram.Bot.Types.Sticker"/> objects.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetForumTopicIconStickersAsync(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetForumTopicIconStickers(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">GetForumTopicIconStickers</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CreateForumTopic(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="name">Topic name, 1-128 characters</param>
            <param name="iconColor">Color of the topic icon in RGB format. Currently, must be one of 7322096 (0x6FB9F0), 16766590 (0xFFD67E), 13338331 (0xCB86DB), 9367192 (0x8EEE98), 16749490 (0xFF93B2), or 16478047 (0xFB6F5F)</param>
            <param name="iconCustomEmojiId">Unique identifier of the custom emoji shown as the topic icon. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetForumTopicIconStickers(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">GetForumTopicIconStickers</see> to get all allowed custom emoji identifiers.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>Information about the created topic as a <see cref="T:Telegram.Bot.Types.ForumTopic"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CreateForumTopicAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.CreateForumTopic(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">CreateForumTopic</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditForumTopic(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights, unless it is the creator of the topic.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="messageThreadId">Unique identifier for the target message thread of the forum topic</param>
            <param name="name">New topic name, 0-128 characters. If not specified or empty, the current name of the topic will be kept</param>
            <param name="iconCustomEmojiId">New unique identifier of the custom emoji shown as the topic icon. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetForumTopicIconStickers(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">GetForumTopicIconStickers</see> to get all allowed custom emoji identifiers. Pass an empty string to remove the icon. If not specified, the current icon will be kept</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditForumTopicAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.EditForumTopic(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.String,System.String,System.Threading.CancellationToken)">EditForumTopic</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CloseForumTopic(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">
            <summary>Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights, unless it is the creator of the topic.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="messageThreadId">Unique identifier for the target message thread of the forum topic</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CloseForumTopicAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.CloseForumTopic(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">CloseForumTopic</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ReopenForumTopic(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">
            <summary>Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights, unless it is the creator of the topic.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="messageThreadId">Unique identifier for the target message thread of the forum topic</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ReopenForumTopicAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ReopenForumTopic(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">ReopenForumTopic</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteForumTopic(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">
            <summary>Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanDeleteMessages</em> administrator rights.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="messageThreadId">Unique identifier for the target message thread of the forum topic</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteForumTopicAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.DeleteForumTopic(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">DeleteForumTopic</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnpinAllForumTopicMessages(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">
            <summary>Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the <em>CanPinMessages</em> administrator right in the supergroup.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="messageThreadId">Unique identifier for the target message thread of the forum topic</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnpinAllForumTopicMessagesAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.UnpinAllForumTopicMessages(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">UnpinAllForumTopicMessages</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditGeneralForumTopic(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="name">New topic name, 1-128 characters</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditGeneralForumTopicAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.EditGeneralForumTopic(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">EditGeneralForumTopic</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CloseGeneralForumTopic(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>Use this method to close an open 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CloseGeneralForumTopicAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.CloseGeneralForumTopic(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">CloseGeneralForumTopic</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ReopenGeneralForumTopic(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>Use this method to reopen a closed 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights. The topic will be automatically unhidden if it was hidden.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ReopenGeneralForumTopicAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ReopenGeneralForumTopic(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">ReopenGeneralForumTopic</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.HideGeneralForumTopic(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights. The topic will be automatically closed if it was open.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.HideGeneralForumTopicAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.HideGeneralForumTopic(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">HideGeneralForumTopic</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnhideGeneralForumTopic(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>Use this method to unhide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnhideGeneralForumTopicAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.UnhideGeneralForumTopic(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">UnhideGeneralForumTopic</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnpinAllGeneralForumTopicMessages(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>Use this method to clear the list of pinned messages in a General forum topic. The bot must be an administrator in the chat for this to work and must have the <em>CanPinMessages</em> administrator right in the supergroup.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UnpinAllGeneralForumTopicMessagesAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.UnpinAllGeneralForumTopicMessages(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">UnpinAllGeneralForumTopicMessages</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerCallbackQuery(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Boolean,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Use this method to send answers to callback queries sent from <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboards</a>. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert</summary>
            <remarks>Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via <a href="https://t.me/botfather">@BotFather</a> and accept the terms. Otherwise, you may use links like <c>t.me/your_bot?start=XXXX</c> that open your bot with a parameter.</remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="callbackQueryId">Unique identifier for the query to be answered</param>
            <param name="text">Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters</param>
            <param name="showAlert">If <see langword="true"/>, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to <see langword="false"/>.</param>
            <param name="url">URL that will be opened by the user's client. If you have created a <see cref="T:Telegram.Bot.Types.Game"/> and accepted the conditions via <a href="https://t.me/botfather">@BotFather</a>, specify the URL that opens your game - note that this will only work if the query comes from a <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"><em>CallbackGame</em></see> button.<br/><br/>Otherwise, you may use links like <c>t.me/your_bot?start=XXXX</c> that open your bot with a parameter.</param>
            <param name="cacheTime">The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerCallbackQueryAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Boolean,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.AnswerCallbackQuery(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Boolean,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">AnswerCallbackQuery</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetUserChatBoosts(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>Use this method to get the list of boosts added to a chat by a user. Requires administrator rights in the chat.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the chat or username of the channel (in the format <c>@channelusername</c>)</param>
            <param name="userId">Unique identifier of the target user</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>A <see cref="T:Telegram.Bot.Types.UserChatBoosts"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetUserChatBoostsAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetUserChatBoosts(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">GetUserChatBoosts</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetBusinessConnection(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to get information about the connection of the bot with a business account.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="businessConnectionId">Unique identifier of the business connection</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>A <see cref="T:Telegram.Bot.Types.BusinessConnection"/> object on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetBusinessConnectionAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetBusinessConnection(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">GetBusinessConnection</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetMyCommands(Telegram.Bot.ITelegramBotClient,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.BotCommand},Telegram.Bot.Types.BotCommandScope,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to change the list of the bot's commands. See <a href="https://core.telegram.org/bots/features#commands">this manual</a> for more details about bot commands.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="commands">A list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.</param>
            <param name="scope">An object, describing scope of users for which the commands are relevant. Defaults to <see cref="T:Telegram.Bot.Types.BotCommandScopeDefault"/>.</param>
            <param name="languageCode">A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetMyCommandsAsync(Telegram.Bot.ITelegramBotClient,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.BotCommand},Telegram.Bot.Types.BotCommandScope,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetMyCommands(Telegram.Bot.ITelegramBotClient,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.BotCommand},Telegram.Bot.Types.BotCommandScope,System.String,System.Threading.CancellationToken)">SetMyCommands</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteMyCommands(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.BotCommandScope,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, <a href="https://core.telegram.org/bots/api#determining-list-of-commands">higher level commands</a> will be shown to affected users.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="scope">An object, describing scope of users for which the commands are relevant. Defaults to <see cref="T:Telegram.Bot.Types.BotCommandScopeDefault"/>.</param>
            <param name="languageCode">A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteMyCommandsAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.BotCommandScope,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.DeleteMyCommands(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.BotCommandScope,System.String,System.Threading.CancellationToken)">DeleteMyCommands</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetMyCommands(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.BotCommandScope,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to get the current list of the bot's commands for the given scope and user language.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="scope">An object, describing scope of users. Defaults to <see cref="T:Telegram.Bot.Types.BotCommandScopeDefault"/>.</param>
            <param name="languageCode">A two-letter ISO 639-1 language code or an empty string</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>An Array of <see cref="T:Telegram.Bot.Types.BotCommand"/> objects. If commands aren't set, an empty list is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetMyCommandsAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.BotCommandScope,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetMyCommands(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.BotCommandScope,System.String,System.Threading.CancellationToken)">GetMyCommands</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetMyName(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to change the bot's name.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="name">New bot name; 0-64 characters. Pass an empty string to remove the dedicated name for the given language.</param>
            <param name="languageCode">A two-letter ISO 639-1 language code. If empty, the name will be shown to all users for whose language there is no dedicated name.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetMyNameAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetMyName(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">SetMyName</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetMyName(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to get the current bot name for the given user language.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="languageCode">A two-letter ISO 639-1 language code or an empty string</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns><see cref="T:Telegram.Bot.Types.BotName"/> on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetMyNameAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetMyName(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">GetMyName</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetMyDescription(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="description">New bot description; 0-512 characters. Pass an empty string to remove the dedicated description for the given language.</param>
            <param name="languageCode">A two-letter ISO 639-1 language code. If empty, the description will be applied to all users for whose language there is no dedicated description.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetMyDescriptionAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetMyDescription(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">SetMyDescription</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetMyDescription(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to get the current bot description for the given user language.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="languageCode">A two-letter ISO 639-1 language code or an empty string</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns><see cref="T:Telegram.Bot.Types.BotDescription"/> on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetMyDescriptionAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetMyDescription(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">GetMyDescription</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetMyShortDescription(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to change the bot's short description, which is shown on the bot's profile page and is sent together with the link when users share the bot.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="shortDescription">New short description for the bot; 0-120 characters. Pass an empty string to remove the dedicated short description for the given language.</param>
            <param name="languageCode">A two-letter ISO 639-1 language code. If empty, the short description will be applied to all users for whose language there is no dedicated short description.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetMyShortDescriptionAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetMyShortDescription(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">SetMyShortDescription</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetMyShortDescription(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to get the current bot short description for the given user language.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="languageCode">A two-letter ISO 639-1 language code or an empty string</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns><see cref="T:Telegram.Bot.Types.BotShortDescription"/> on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetMyShortDescriptionAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetMyShortDescription(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">GetMyShortDescription</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatMenuButton(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int64},Telegram.Bot.Types.MenuButton,System.Threading.CancellationToken)">
            <summary>Use this method to change the bot's menu button in a private chat, or the default menu button.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target private chat. If not specified, default bot's menu button will be changed</param>
            <param name="menuButton">An object for the bot's new menu button. Defaults to <see cref="T:Telegram.Bot.Types.MenuButtonDefault"/></param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetChatMenuButtonAsync(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int64},Telegram.Bot.Types.MenuButton,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetChatMenuButton(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int64},Telegram.Bot.Types.MenuButton,System.Threading.CancellationToken)">SetChatMenuButton</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetChatMenuButton(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>Use this method to get the current value of the bot's menu button in a private chat, or the default menu button.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target private chat. If not specified, default bot's menu button will be returned</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns><see cref="T:Telegram.Bot.Types.MenuButton"/> on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetChatMenuButtonAsync(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetChatMenuButton(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int64},System.Threading.CancellationToken)">GetChatMenuButton</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetMyDefaultAdministratorRights(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatAdministratorRights,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels. These rights will be suggested to users, but they are free to modify the list before adding the bot.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="rights">An object describing new default administrator rights. If not specified, the default administrator rights will be cleared.</param>
            <param name="forChannels">Pass <see langword="true"/> to change the default administrator rights of the bot in channels. Otherwise, the default administrator rights of the bot for groups and supergroups will be changed.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetMyDefaultAdministratorRightsAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatAdministratorRights,System.Boolean,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetMyDefaultAdministratorRights(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatAdministratorRights,System.Boolean,System.Threading.CancellationToken)">SetMyDefaultAdministratorRights</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetMyDefaultAdministratorRights(Telegram.Bot.ITelegramBotClient,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to get the current default administrator rights of the bot.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="forChannels">Pass <see langword="true"/> to get default administrator rights of the bot in channels. Otherwise, default administrator rights of the bot for groups and supergroups will be returned.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns><see cref="T:Telegram.Bot.Types.ChatAdministratorRights"/> on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetMyDefaultAdministratorRightsAsync(Telegram.Bot.ITelegramBotClient,System.Boolean,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetMyDefaultAdministratorRights(Telegram.Bot.ITelegramBotClient,System.Boolean,System.Threading.CancellationToken)">GetMyDefaultAdministratorRights</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageText(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},Telegram.Bot.Types.LinkPreviewOptions,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to edit text and <a href="https://core.telegram.org/bots/api#games">game</a> messages.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="text">New text of the message, 1-4096 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the message text. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</param>
            <param name="entities">A list of special entities that appear in message text, which can be specified instead of <paramref name="parseMode"/></param>
            <param name="linkPreviewOptions">Link preview generation options for the message</param>
            <param name="replyMarkup">An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message to be edited was sent</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The edited <see cref="T:Telegram.Bot.Types.Message"/> is returned</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageTextAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},Telegram.Bot.Types.LinkPreviewOptions,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageText(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},Telegram.Bot.Types.LinkPreviewOptions,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">EditMessageText</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageText(Telegram.Bot.ITelegramBotClient,System.String,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},Telegram.Bot.Types.LinkPreviewOptions,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to edit text and <a href="https://core.telegram.org/bots/api#games">game</a> messages.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="text">New text of the message, 1-4096 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the message text. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</param>
            <param name="entities">A list of special entities that appear in message text, which can be specified instead of <paramref name="parseMode"/></param>
            <param name="linkPreviewOptions">Link preview generation options for the message</param>
            <param name="replyMarkup">An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message to be edited was sent</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageTextAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},Telegram.Bot.Types.LinkPreviewOptions,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageText(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},Telegram.Bot.Types.LinkPreviewOptions,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">EditMessageText</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageCaption(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to edit captions of messages.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="caption">New caption of the message, 0-1024 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the message caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</param>
            <param name="captionEntities">A list of special entities that appear in the caption, which can be specified instead of <paramref name="parseMode"/></param>
            <param name="showCaptionAboveMedia">Pass <see langword="true"/>, if the caption must be shown above the message media. Supported only for animation, photo and video messages.</param>
            <param name="replyMarkup">An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message to be edited was sent</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The edited <see cref="T:Telegram.Bot.Types.Message"/> is returned</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageCaptionAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageCaption(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">EditMessageCaption</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageCaption(Telegram.Bot.ITelegramBotClient,System.String,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to edit captions of messages.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="caption">New caption of the message, 0-1024 characters after entities parsing</param>
            <param name="parseMode">Mode for parsing entities in the message caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</param>
            <param name="captionEntities">A list of special entities that appear in the caption, which can be specified instead of <paramref name="parseMode"/></param>
            <param name="showCaptionAboveMedia">Pass <see langword="true"/>, if the caption must be shown above the message media. Supported only for animation, photo and video messages.</param>
            <param name="replyMarkup">An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message to be edited was sent</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageCaptionAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageCaption(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">EditMessageCaption</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageMedia(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.InputMedia,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to edit animation, audio, document, photo, or video messages, or to add media to text messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded; use a previously uploaded file via its FileId or specify a URL.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="media">An object for a new media content of the message</param>
            <param name="replyMarkup">An object for a new <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message to be edited was sent</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The edited <see cref="T:Telegram.Bot.Types.Message"/> is returned</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageMediaAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.InputMedia,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageMedia(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.InputMedia,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">EditMessageMedia</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageMedia(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.InputMedia,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to edit animation, audio, document, photo, or video messages, or to add media to text messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded; use a previously uploaded file via its FileId or specify a URL.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="media">An object for a new media content of the message</param>
            <param name="replyMarkup">An object for a new <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message to be edited was sent</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageMediaAsync(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.InputMedia,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageMedia(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.InputMedia,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">EditMessageMedia</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageLiveLocation(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Double,System.Double,System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to edit live location messages. A location can be edited until its <paramref name="livePeriod"/> expires or editing is explicitly disabled by a call to <see cref="M:Telegram.Bot.TelegramBotClientExtensions.StopMessageLiveLocation(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">StopMessageLiveLocation</see>.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="latitude">Latitude of new location</param>
            <param name="longitude">Longitude of new location</param>
            <param name="livePeriod">New period in seconds during which the location can be updated, starting from the message send date. If 0x7FFFFFFF is specified, then the location can be updated forever. Otherwise, the new value must not exceed the current <paramref name="livePeriod"/> by more than a day, and the live location expiration date must remain within the next 90 days. If not specified, then <paramref name="livePeriod"/> remains unchanged</param>
            <param name="horizontalAccuracy">The radius of uncertainty for the location, measured in meters; 0-1500</param>
            <param name="heading">Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.</param>
            <param name="proximityAlertRadius">The maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.</param>
            <param name="replyMarkup">An object for a new <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message to be edited was sent</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The edited <see cref="T:Telegram.Bot.Types.Message"/> is returned</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageLiveLocationAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Double,System.Double,System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageLiveLocation(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Double,System.Double,System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">EditMessageLiveLocation</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageLiveLocation(Telegram.Bot.ITelegramBotClient,System.String,System.Double,System.Double,System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to edit live location messages. A location can be edited until its <paramref name="livePeriod"/> expires or editing is explicitly disabled by a call to <see cref="M:Telegram.Bot.TelegramBotClientExtensions.StopMessageLiveLocation(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">StopMessageLiveLocation</see>.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="latitude">Latitude of new location</param>
            <param name="longitude">Longitude of new location</param>
            <param name="livePeriod">New period in seconds during which the location can be updated, starting from the message send date. If 0x7FFFFFFF is specified, then the location can be updated forever. Otherwise, the new value must not exceed the current <paramref name="livePeriod"/> by more than a day, and the live location expiration date must remain within the next 90 days. If not specified, then <paramref name="livePeriod"/> remains unchanged</param>
            <param name="horizontalAccuracy">The radius of uncertainty for the location, measured in meters; 0-1500</param>
            <param name="heading">Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.</param>
            <param name="proximityAlertRadius">The maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.</param>
            <param name="replyMarkup">An object for a new <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message to be edited was sent</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageLiveLocationAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Double,System.Double,System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageLiveLocation(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Double,System.Double,System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">EditMessageLiveLocation</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StopMessageLiveLocation(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to stop updating a live location message before <em>LivePeriod</em> expires.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageId">Identifier of the message with live location to stop</param>
            <param name="replyMarkup">An object for a new <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message to be edited was sent</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The edited <see cref="T:Telegram.Bot.Types.Message"/> is returned</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StopMessageLiveLocationAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.StopMessageLiveLocation(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">StopMessageLiveLocation</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StopMessageLiveLocation(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to stop updating a live location message before <em>LivePeriod</em> expires.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="replyMarkup">An object for a new <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message to be edited was sent</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StopMessageLiveLocationAsync(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.StopMessageLiveLocation(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">StopMessageLiveLocation</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageReplyMarkup(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to edit only the reply markup of messages.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageId">Identifier of the message to edit</param>
            <param name="replyMarkup">An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message to be edited was sent</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The edited <see cref="T:Telegram.Bot.Types.Message"/> is returned</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageReplyMarkupAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageReplyMarkup(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">EditMessageReplyMarkup</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageReplyMarkup(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to edit only the reply markup of messages.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="replyMarkup">An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message to be edited was sent</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageReplyMarkupAsync(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.EditMessageReplyMarkup(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">EditMessageReplyMarkup</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StopPoll(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to stop a poll which was sent by the bot.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageId">Identifier of the original message with the poll</param>
            <param name="replyMarkup">An object for a new message <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message to be edited was sent</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The stopped <see cref="T:Telegram.Bot.Types.Poll"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StopPollAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.StopPoll(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">StopPoll</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteMessage(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">
            <summary>Use this method to delete a message, including service messages, with the following limitations:<br/>- A message can only be deleted if it was sent less than 48 hours ago.<br/>- Service messages about a supergroup, channel, or forum topic creation can't be deleted.<br/>- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.<br/>- Bots can delete outgoing messages in private chats, groups, and supergroups.<br/>- Bots can delete incoming messages in private chats.<br/>- Bots granted <em>CanPostMessages</em> permissions can delete outgoing messages in channels.<br/>- If the bot is an administrator of a group, it can delete any message there.<br/>- If the bot has <em>CanDeleteMessages</em> permission in a supergroup or a channel, it can delete any message there.<br/>Returns <em>True</em> on success.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageId">Identifier of the message to delete</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteMessageAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.DeleteMessage(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">DeleteMessage</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteMessages(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>Use this method to delete multiple messages simultaneously. If some of the specified messages can't be found, they are skipped.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="messageIds">A list of 1-100 identifiers of messages to delete. See <see cref="M:Telegram.Bot.TelegramBotClientExtensions.DeleteMessage(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">DeleteMessage</see> for limitations on which messages can be deleted</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteMessagesAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.DeleteMessages(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{System.Int32},System.Threading.CancellationToken)">DeleteMessages</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendSticker(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to send static .WEBP, <a href="https://telegram.org/blog/animated-stickers">animated</a> .TGS, or <a href="https://telegram.org/blog/video-stickers-better-reactions">video</a> .WEBM stickers.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="sticker">Sticker to send. Pass a FileId as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP sticker from the Internet, or upload a new .WEBP, .TGS, or .WEBM sticker using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a>. Video and animated stickers can't be sent via an HTTP URL.</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</param>
            <param name="emoji">Emoji associated with the sticker; only for just uploaded stickers</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="disableNotification">Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the sent message from forwarding and saving</param>
            <param name="messageEffectId">Unique identifier of the message effect to be added to the message; for private chats only</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <param name="allowPaidBroadcast">Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendStickerAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.String,System.Boolean,System.Boolean,System.Boolean,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendSticker(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">SendSticker</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetStickerSet(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to get a sticker set.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="name">Name of the sticker set</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>A <see cref="T:Telegram.Bot.Types.StickerSet"/> object is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetStickerSetAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetStickerSet(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">GetStickerSet</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetCustomEmojiStickers(Telegram.Bot.ITelegramBotClient,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>Use this method to get information about custom emoji stickers by their identifiers.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="customEmojiIds">A list of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>An Array of <see cref="T:Telegram.Bot.Types.Sticker"/> objects.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetCustomEmojiStickersAsync(Telegram.Bot.ITelegramBotClient,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetCustomEmojiStickers(Telegram.Bot.ITelegramBotClient,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">GetCustomEmojiStickers</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UploadStickerFile(Telegram.Bot.ITelegramBotClient,System.Int64,Telegram.Bot.Types.InputFileStream,Telegram.Bot.Types.Enums.StickerFormat,System.Threading.CancellationToken)">
            <summary>Use this method to upload a file with a sticker for later use in the <see cref="M:Telegram.Bot.TelegramBotClientExtensions.CreateNewStickerSet(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InputSticker},System.Nullable{Telegram.Bot.Types.Enums.StickerType},System.Boolean,System.Threading.CancellationToken)">CreateNewStickerSet</see>, <see cref="M:Telegram.Bot.TelegramBotClientExtensions.AddStickerToSet(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,Telegram.Bot.Types.InputSticker,System.Threading.CancellationToken)">AddStickerToSet</see>, or <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ReplaceStickerInSet(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,Telegram.Bot.Types.InputSticker,System.Threading.CancellationToken)">ReplaceStickerInSet</see> methods (the file can be used multiple times).</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">User identifier of sticker file owner</param>
            <param name="sticker">A file with the sticker in .WEBP, .PNG, .TGS, or .WEBM format. See <a href="https://core.telegram.org/stickers">https://core.telegram.org/stickers</a> for technical requirements. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></param>
            <param name="stickerFormat">Format of the sticker, must be one of <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Static">Static</see>, <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Animated">Animated</see>, <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Video">Video</see></param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The uploaded <see cref="T:Telegram.Bot.Types.File"/> on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.UploadStickerFileAsync(Telegram.Bot.ITelegramBotClient,System.Int64,Telegram.Bot.Types.InputFileStream,Telegram.Bot.Types.Enums.StickerFormat,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.UploadStickerFile(Telegram.Bot.ITelegramBotClient,System.Int64,Telegram.Bot.Types.InputFileStream,Telegram.Bot.Types.Enums.StickerFormat,System.Threading.CancellationToken)">UploadStickerFile</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CreateNewStickerSet(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InputSticker},System.Nullable{Telegram.Bot.Types.Enums.StickerType},System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">User identifier of created sticker set owner</param>
            <param name="name">Short name of sticker set, to be used in <c>t.me/addstickers/</c> URLs (e.g., <em>animals</em>). Can contain only English letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in <c>"_by_&lt;BotUsername&gt;"</c>. <c>&lt;BotUsername&gt;</c> is case insensitive. 1-64 characters.</param>
            <param name="title">Sticker set title, 1-64 characters</param>
            <param name="stickers">A list of 1-50 initial stickers to be added to the sticker set</param>
            <param name="stickerType">Type of stickers in the set, pass <see cref="F:Telegram.Bot.Types.Enums.StickerType.Regular">Regular</see>, <see cref="F:Telegram.Bot.Types.Enums.StickerType.Mask">Mask</see>, or <see cref="F:Telegram.Bot.Types.Enums.StickerType.CustomEmoji">CustomEmoji</see>. By default, a regular sticker set is created.</param>
            <param name="needsRepainting">Pass <see langword="true"/> if stickers in the sticker set must be repainted to the color of text when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context; for custom emoji sticker sets only</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CreateNewStickerSetAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InputSticker},System.Nullable{Telegram.Bot.Types.Enums.StickerType},System.Boolean,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.CreateNewStickerSet(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InputSticker},System.Nullable{Telegram.Bot.Types.Enums.StickerType},System.Boolean,System.Threading.CancellationToken)">CreateNewStickerSet</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AddStickerToSet(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,Telegram.Bot.Types.InputSticker,System.Threading.CancellationToken)">
            <summary>Use this method to add a new sticker to a set created by the bot. Emoji sticker sets can have up to 200 stickers. Other sticker sets can have up to 120 stickers.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">User identifier of sticker set owner</param>
            <param name="name">Sticker set name</param>
            <param name="sticker">An object with information about the added sticker. If exactly the same sticker had already been added to the set, then the set isn't changed.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AddStickerToSetAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,Telegram.Bot.Types.InputSticker,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.AddStickerToSet(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,Telegram.Bot.Types.InputSticker,System.Threading.CancellationToken)">AddStickerToSet</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerPositionInSet(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Int32,System.Threading.CancellationToken)">
            <summary>Use this method to move a sticker in a set created by the bot to a specific position.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="sticker">File identifier of the sticker</param>
            <param name="position">New sticker position in the set, zero-based</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerPositionInSetAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Int32,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerPositionInSet(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Int32,System.Threading.CancellationToken)">SetStickerPositionInSet</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteStickerFromSet(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Threading.CancellationToken)">
            <summary>Use this method to delete a sticker from a set created by the bot.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="sticker">File identifier of the sticker</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteStickerFromSetAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.DeleteStickerFromSet(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Threading.CancellationToken)">DeleteStickerFromSet</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ReplaceStickerInSet(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,Telegram.Bot.Types.InputSticker,System.Threading.CancellationToken)">
            <summary>Use this method to replace an existing sticker in a sticker set with a new one. The method is equivalent to calling <see cref="M:Telegram.Bot.TelegramBotClientExtensions.DeleteStickerFromSet(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Threading.CancellationToken)">DeleteStickerFromSet</see>, then <see cref="M:Telegram.Bot.TelegramBotClientExtensions.AddStickerToSet(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,Telegram.Bot.Types.InputSticker,System.Threading.CancellationToken)">AddStickerToSet</see>, then <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerPositionInSet(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Int32,System.Threading.CancellationToken)">SetStickerPositionInSet</see>.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">User identifier of the sticker set owner</param>
            <param name="name">Sticker set name</param>
            <param name="oldSticker">File identifier of the replaced sticker</param>
            <param name="sticker">An object with information about the added sticker. If exactly the same sticker had already been added to the set, then the set remains unchanged.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ReplaceStickerInSetAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,Telegram.Bot.Types.InputSticker,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ReplaceStickerInSet(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,Telegram.Bot.Types.InputSticker,System.Threading.CancellationToken)">ReplaceStickerInSet</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerEmojiList(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="sticker">File identifier of the sticker</param>
            <param name="emojiList">A list of 1-20 emoji associated with the sticker</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerEmojiListAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerEmojiList(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">SetStickerEmojiList</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerKeywords(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>Use this method to change search keywords assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="sticker">File identifier of the sticker</param>
            <param name="keywords">A list of 0-20 search keywords for the sticker with total length of up to 64 characters</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerKeywordsAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerKeywords(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">SetStickerKeywords</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerMaskPosition(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,Telegram.Bot.Types.MaskPosition,System.Threading.CancellationToken)">
            <summary>Use this method to change the <see cref="T:Telegram.Bot.Types.MaskPosition">mask position</see> of a mask sticker. The sticker must belong to a sticker set that was created by the bot.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="sticker">File identifier of the sticker</param>
            <param name="maskPosition">An object with the position where the mask should be placed on faces. Omit the parameter to remove the mask position.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerMaskPositionAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,Telegram.Bot.Types.MaskPosition,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerMaskPosition(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,Telegram.Bot.Types.MaskPosition,System.Threading.CancellationToken)">SetStickerMaskPosition</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerSetTitle(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to set the title of a created sticker set.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="name">Sticker set name</param>
            <param name="title">Sticker set title, 1-64 characters</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerSetTitleAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerSetTitle(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">SetStickerSetTitle</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerSetThumbnail(Telegram.Bot.ITelegramBotClient,System.String,System.Int64,Telegram.Bot.Types.Enums.StickerFormat,Telegram.Bot.Types.InputFile,System.Threading.CancellationToken)">
            <summary>Use this method to set the thumbnail of a regular or mask sticker set. The format of the thumbnail file must match the format of the stickers in the set.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="name">Sticker set name</param>
            <param name="userId">User identifier of the sticker set owner</param>
            <param name="format">Format of the thumbnail, must be one of <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Static">Static</see> for a <b>.WEBP</b> or <b>.PNG</b> image, <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Animated">Animated</see> for a <b>.TGS</b> animation, or <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Video">Video</see> for a <b>WEBM</b> video</param>
            <param name="thumbnail">A <b>.WEBP</b> or <b>.PNG</b> image with the thumbnail, must be up to 128 kilobytes in size and have a width and height of exactly 100px, or a <b>.TGS</b> animation with a thumbnail up to 32 kilobytes in size (see <a href="https://core.telegram.org/stickers#animation-requirements">https://core.telegram.org/stickers#animation-requirements</a> for animated sticker technical requirements), or a <b>WEBM</b> video with the thumbnail up to 32 kilobytes in size; see <a href="https://core.telegram.org/stickers#video-requirements">https://core.telegram.org/stickers#video-requirements</a> for video sticker technical requirements. Pass a <em>FileId</em> as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a>. Animated and video sticker set thumbnails can't be uploaded via HTTP URL. If omitted, then the thumbnail is dropped and the first sticker is used as the thumbnail.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerSetThumbnailAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Int64,Telegram.Bot.Types.Enums.StickerFormat,Telegram.Bot.Types.InputFile,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerSetThumbnail(Telegram.Bot.ITelegramBotClient,System.String,System.Int64,Telegram.Bot.Types.Enums.StickerFormat,Telegram.Bot.Types.InputFile,System.Threading.CancellationToken)">SetStickerSetThumbnail</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetCustomEmojiStickerSetThumbnail(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to set the thumbnail of a custom emoji sticker set.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="name">Sticker set name</param>
            <param name="customEmojiId">Custom emoji identifier of a sticker from the sticker set; pass an empty string to drop the thumbnail and use the first sticker as the thumbnail.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetCustomEmojiStickerSetThumbnailAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetCustomEmojiStickerSetThumbnail(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">SetCustomEmojiStickerSetThumbnail</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteStickerSet(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to delete a sticker set that was created by the bot.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="name">Sticker set name</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DeleteStickerSetAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.DeleteStickerSet(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">DeleteStickerSet</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetAvailableGifts(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>Returns the list of gifts that can be sent by the bot to users.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>A <see cref="T:Telegram.Bot.Types.GiftList"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetAvailableGiftsAsync(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetAvailableGifts(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">GetAvailableGifts</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendGift(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Threading.CancellationToken)">
            <summary>Sends a gift to the given user. The gift can't be converted to Telegram Stars by the user.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">Unique identifier of the target user that will receive the gift</param>
            <param name="giftId">Identifier of the gift</param>
            <param name="text">Text that will be shown along with the gift; 0-255 characters</param>
            <param name="textParseMode">Mode for parsing entities in the text. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details. Entities other than <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Bold">Bold</see>, <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Italic">Italic</see>, <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Underline">Underline</see>, <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Strikethrough">Strikethrough</see>, <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Spoiler">Spoiler</see>, and <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.CustomEmoji">CustomEmoji</see> are ignored.</param>
            <param name="textEntities">A list of special entities that appear in the gift text. It can be specified instead of <paramref name="textParseMode"/>. Entities other than <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Bold">Bold</see>, <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Italic">Italic</see>, <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Underline">Underline</see>, <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Strikethrough">Strikethrough</see>, <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Spoiler">Spoiler</see>, and <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.CustomEmoji">CustomEmoji</see> are ignored.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendGiftAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendGift(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Threading.CancellationToken)">SendGift</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerInlineQuery(Telegram.Bot.ITelegramBotClient,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InlineQueryResults.InlineQueryResult},System.Nullable{System.Int32},System.Boolean,System.String,Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton,System.Threading.CancellationToken)">
            <summary>Use this method to send answers to an inline query<br/>No more than <b>50</b> results per query are allowed.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="inlineQueryId">Unique identifier for the answered query</param>
            <param name="results">A array of results for the inline query</param>
            <param name="cacheTime">The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.</param>
            <param name="isPersonal">Pass <see langword="true"/> if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query.</param>
            <param name="nextOffset">Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.</param>
            <param name="button">An object describing a button to be shown above inline query results</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerInlineQueryAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InlineQueryResults.InlineQueryResult},System.Nullable{System.Int32},System.Boolean,System.String,Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.AnswerInlineQuery(Telegram.Bot.ITelegramBotClient,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InlineQueryResults.InlineQueryResult},System.Nullable{System.Int32},System.Boolean,System.String,Telegram.Bot.Types.InlineQueryResults.InlineQueryResultsButton,System.Threading.CancellationToken)">AnswerInlineQuery</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerWebAppQuery(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.InlineQueryResults.InlineQueryResult,System.Threading.CancellationToken)">
            <summary>Use this method to set the result of an interaction with a <a href="https://core.telegram.org/bots/webapps">Web App</a> and send a corresponding message on behalf of the user to the chat from which the query originated.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="webAppQueryId">Unique identifier for the query to be answered</param>
            <param name="result">An object describing the message to be sent</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>A <see cref="T:Telegram.Bot.Types.SentWebAppMessage"/> object is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerWebAppQueryAsync(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.InlineQueryResults.InlineQueryResult,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.AnswerWebAppQuery(Telegram.Bot.ITelegramBotClient,System.String,Telegram.Bot.Types.InlineQueryResults.InlineQueryResult,System.Threading.CancellationToken)">AnswerWebAppQuery</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SavePreparedInlineMessage(Telegram.Bot.ITelegramBotClient,System.Int64,Telegram.Bot.Types.InlineQueryResults.InlineQueryResult,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>Stores a message that can be sent by a user of a Mini App.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">Unique identifier of the target user that can use the prepared message</param>
            <param name="result">An object describing the message to be sent</param>
            <param name="allowUserChats">Pass <see langword="true"/> if the message can be sent to private chats with users</param>
            <param name="allowBotChats">Pass <see langword="true"/> if the message can be sent to private chats with bots</param>
            <param name="allowGroupChats">Pass <see langword="true"/> if the message can be sent to group and supergroup chats</param>
            <param name="allowChannelChats">Pass <see langword="true"/> if the message can be sent to channel chats</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>A <see cref="T:Telegram.Bot.Types.PreparedInlineMessage"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SavePreparedInlineMessageAsync(Telegram.Bot.ITelegramBotClient,System.Int64,Telegram.Bot.Types.InlineQueryResults.InlineQueryResult,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SavePreparedInlineMessage(Telegram.Bot.ITelegramBotClient,System.Int64,Telegram.Bot.Types.InlineQueryResults.InlineQueryResult,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">SavePreparedInlineMessage</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendInvoice(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.LabeledPrice},System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to send invoices.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</param>
            <param name="title">Product name, 1-32 characters</param>
            <param name="description">Product description, 1-255 characters</param>
            <param name="payload">Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.</param>
            <param name="currency">Three-letter ISO 4217 currency code, see <a href="https://core.telegram.org/bots/payments#supported-currencies">more on currencies</a>. Pass “XTR” for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="prices">Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="providerToken">Payment provider token, obtained via <a href="https://t.me/botfather">@BotFather</a>. Pass an empty string for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="providerData">JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.</param>
            <param name="maxTipAmount">The maximum accepted amount for tips in the <em>smallest units</em> of the currency (integer, <b>not</b> float/double). For example, for a maximum tip of <c>US$ 1.45</c> pass <c><paramref name="maxTipAmount"/> = 145</c>. See the <em>exp</em> parameter in <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="suggestedTipAmounts">A array of suggested amounts of tips in the <em>smallest units</em> of the currency (integer, <b>not</b> float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed <paramref name="maxTipAmount"/>.</param>
            <param name="photoUrl">URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.</param>
            <param name="photoSize">Photo size in bytes</param>
            <param name="photoWidth">Photo width</param>
            <param name="photoHeight">Photo height</param>
            <param name="needName">Pass <see langword="true"/> if you require the user's full name to complete the order. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="needPhoneNumber">Pass <see langword="true"/> if you require the user's phone number to complete the order. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="needEmail">Pass <see langword="true"/> if you require the user's email address to complete the order. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="needShippingAddress">Pass <see langword="true"/> if you require the user's shipping address to complete the order. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="sendPhoneNumberToProvider">Pass <see langword="true"/> if the user's phone number should be sent to the provider. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="sendEmailToProvider">Pass <see langword="true"/> if the user's email address should be sent to the provider. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="isFlexible">Pass <see langword="true"/> if the final price depends on the shipping method. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>. If empty, one 'Pay <c>total price</c>' button will be shown. If not empty, the first button must be a Pay button.</param>
            <param name="startParameter">Unique deep-linking parameter. If left empty, <b>forwarded copies</b> of the sent message will have a <em>Pay</em> button, allowing multiple users to pay directly from the forwarded message, using the same invoice. If non-empty, forwarded copies of the sent message will have a <em>URL</em> button with a deep link to the bot (instead of a <em>Pay</em> button), with the value used as the start parameter</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="disableNotification">Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the sent message from forwarding and saving</param>
            <param name="messageEffectId">Unique identifier of the message effect to be added to the message; for private chats only</param>
            <param name="allowPaidBroadcast">Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendInvoiceAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.LabeledPrice},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendInvoice(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.LabeledPrice},System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.Boolean,System.Threading.CancellationToken)">SendInvoice</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CreateInvoiceLink(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.LabeledPrice},System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>Use this method to create a link for an invoice.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="title">Product name, 1-32 characters</param>
            <param name="description">Product description, 1-255 characters</param>
            <param name="payload">Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.</param>
            <param name="currency">Three-letter ISO 4217 currency code, see <a href="https://core.telegram.org/bots/payments#supported-currencies">more on currencies</a>. Pass “XTR” for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="prices">Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="providerToken">Payment provider token, obtained via <a href="https://t.me/botfather">@BotFather</a>. Pass an empty string for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="providerData">JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.</param>
            <param name="maxTipAmount">The maximum accepted amount for tips in the <em>smallest units</em> of the currency (integer, <b>not</b> float/double). For example, for a maximum tip of <c>US$ 1.45</c> pass <c><paramref name="maxTipAmount"/> = 145</c>. See the <em>exp</em> parameter in <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="suggestedTipAmounts">A array of suggested amounts of tips in the <em>smallest units</em> of the currency (integer, <b>not</b> float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed <paramref name="maxTipAmount"/>.</param>
            <param name="photoUrl">URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.</param>
            <param name="photoSize">Photo size in bytes</param>
            <param name="photoWidth">Photo width</param>
            <param name="photoHeight">Photo height</param>
            <param name="needName">Pass <see langword="true"/> if you require the user's full name to complete the order. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="needPhoneNumber">Pass <see langword="true"/> if you require the user's phone number to complete the order. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="needEmail">Pass <see langword="true"/> if you require the user's email address to complete the order. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="needShippingAddress">Pass <see langword="true"/> if you require the user's shipping address to complete the order. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="sendPhoneNumberToProvider">Pass <see langword="true"/> if the user's phone number should be sent to the provider. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="sendEmailToProvider">Pass <see langword="true"/> if the user's email address should be sent to the provider. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="isFlexible">Pass <see langword="true"/> if the final price depends on the shipping method. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</param>
            <param name="subscriptionPeriod">The number of seconds the subscription will be active for before the next payment. The currency must be set to “XTR” (Telegram Stars) if the parameter is used. Currently, it must always be 2592000 (30 days) if specified. Any number of subscriptions can be active for a given bot at the same time, including multiple concurrent subscriptions from the same user. Subscription price must no exceed 2500 Telegram Stars.</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the link will be created. For payments in <a href="https://t.me/BotNews/90">Telegram Stars</a> only.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The created invoice link as <em>String</em> on success.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.CreateInvoiceLinkAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.LabeledPrice},System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.CreateInvoiceLink(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.LabeledPrice},System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">CreateInvoiceLink</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerShippingQuery(Telegram.Bot.ITelegramBotClient,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.ShippingOption},System.Threading.CancellationToken)">
            <summary>If you sent an invoice requesting a shipping address and the parameter <em>IsFlexible</em> was specified, the Bot API will send an <see cref="T:Telegram.Bot.Types.Update"/> with a <em>ShippingQuery</em> field to the bot. Use this method to reply to shipping queries</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="shippingQueryId">Unique identifier for the query to be answered</param>
            <param name="shippingOptions">A array of available shipping options.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerShippingQueryAsync(Telegram.Bot.ITelegramBotClient,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.ShippingOption},System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.AnswerShippingQuery(Telegram.Bot.ITelegramBotClient,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.ShippingOption},System.Threading.CancellationToken)">AnswerShippingQuery</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerShippingQuery(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>If you sent an invoice requesting a shipping address and the parameter <em>IsFlexible</em> was specified, the Bot API will send an <see cref="T:Telegram.Bot.Types.Update"/> with a <em>ShippingQuery</em> field to the bot. Use this method to reply to shipping queries</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="shippingQueryId">Unique identifier for the query to be answered</param>
            <param name="errorMessage">Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerShippingQueryAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.AnswerShippingQuery(Telegram.Bot.ITelegramBotClient,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Payments.ShippingOption},System.Threading.CancellationToken)">AnswerShippingQuery</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerPreCheckoutQuery(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an <see cref="T:Telegram.Bot.Types.Update"/> with the field <em>PreCheckoutQuery</em>. Use this method to respond to such pre-checkout queries <b>Note:</b> The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="preCheckoutQueryId">Unique identifier for the query to be answered</param>
            <param name="errorMessage">Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.<para/>Leave <see langword="null"/> if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.AnswerPreCheckoutQueryAsync(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.AnswerPreCheckoutQuery(Telegram.Bot.ITelegramBotClient,System.String,System.String,System.Threading.CancellationToken)">AnswerPreCheckoutQuery</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetStarTransactions(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>Returns the bot's Telegram Star transactions in chronological order.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="offset">Number of transactions to skip in the response</param>
            <param name="limit">The maximum number of transactions to be retrieved. Values between 1-100 are accepted. Defaults to 100.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>A <see cref="T:Telegram.Bot.Types.Payments.StarTransactions"/> object.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetStarTransactionsAsync(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetStarTransactions(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">GetStarTransactions</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.RefundStarPayment(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>Refunds a successful payment in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">Identifier of the user whose payment will be refunded</param>
            <param name="telegramPaymentChargeId">Telegram payment identifier</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.RefundStarPaymentAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.RefundStarPayment(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.Threading.CancellationToken)">RefundStarPayment</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditUserStarSubscription(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>Allows the bot to cancel or re-enable extension of a subscription paid in Telegram Stars.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">Identifier of the user whose subscription will be edited</param>
            <param name="telegramPaymentChargeId">Telegram payment identifier for the subscription</param>
            <param name="isCanceled">Pass <see langword="true"/> to cancel extension of the user subscription; the subscription must be active up to the end of the current subscription period. Pass <see langword="false"/> to allow the user to re-enable a subscription that was previously canceled by the bot.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.EditUserStarSubscriptionAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.EditUserStarSubscription(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.Boolean,System.Threading.CancellationToken)">EditUserStarSubscription</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetPassportDataErrors(Telegram.Bot.ITelegramBotClient,System.Int64,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Passport.PassportElementError},System.Threading.CancellationToken)">
            <summary>Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change).<br/>Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">User identifier</param>
            <param name="errors">A array describing the errors</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetPassportDataErrorsAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Passport.PassportElementError},System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetPassportDataErrors(Telegram.Bot.ITelegramBotClient,System.Int64,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Passport.PassportElementError},System.Threading.CancellationToken)">SetPassportDataErrors</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendGame(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to send a game.</summary>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="gameShortName">Short name of the game, serves as the unique identifier for the game. Set up your games via <a href="https://t.me/botfather">@BotFather</a>.</param>
            <param name="replyParameters">Description of the message to reply to</param>
            <param name="replyMarkup">An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>. If empty, one 'Play GameTitle' button will be shown. If not empty, the first button must launch the game.</param>
            <param name="messageThreadId">Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</param>
            <param name="disableNotification">Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</param>
            <param name="protectContent">Protects the contents of the sent message from forwarding and saving</param>
            <param name="messageEffectId">Unique identifier of the message effect to be added to the message; for private chats only</param>
            <param name="businessConnectionId">Unique identifier of the business connection on behalf of which the message will be sent</param>
            <param name="allowPaidBroadcast">Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SendGameAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendGame(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">SendGame</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetGameScore(Telegram.Bot.ITelegramBotClient,System.Int64,System.Int32,System.Int64,System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to set the score of the specified user in a game message.</summary>
            <remarks>Returns an error, if the new score is not greater than the user's current score in the chat and <paramref name="force"/> is <em>False</em>.</remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">User identifier</param>
            <param name="score">New score, must be non-negative</param>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="messageId">Identifier of the sent message</param>
            <param name="force">Pass <see langword="true"/> if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters</param>
            <param name="disableEditMessage">Pass <see langword="true"/> if the game message should not be automatically edited to include the current scoreboard</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>The <see cref="T:Telegram.Bot.Types.Message"/> is returned</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetGameScoreAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.Int32,System.Int64,System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetGameScore(Telegram.Bot.ITelegramBotClient,System.Int64,System.Int32,System.Int64,System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)">SetGameScore</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetGameScore(Telegram.Bot.ITelegramBotClient,System.Int64,System.Int32,System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>Use this method to set the score of the specified user in a game message.</summary>
            <remarks>Returns an error, if the new score is not greater than the user's current score in the chat and <paramref name="force"/> is <em>False</em>.</remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">User identifier</param>
            <param name="score">New score, must be non-negative</param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="force">Pass <see langword="true"/> if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters</param>
            <param name="disableEditMessage">Pass <see langword="true"/> if the game message should not be automatically edited to include the current scoreboard</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.SetGameScoreAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.Int32,System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetGameScore(Telegram.Bot.ITelegramBotClient,System.Int64,System.Int32,System.Int64,System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)">SetGameScore</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetGameHighScores(Telegram.Bot.ITelegramBotClient,System.Int64,System.Int64,System.Int32,System.Threading.CancellationToken)">
            <summary>Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game.</summary>
            <remarks>This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and their neighbors are not among them. Please note that this behavior is subject to change.</remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">Target user id</param>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="messageId">Identifier of the sent message</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>An Array of <see cref="T:Telegram.Bot.Types.GameHighScore"/> objects.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetGameHighScoresAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.Int64,System.Int32,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetGameHighScores(Telegram.Bot.ITelegramBotClient,System.Int64,System.Int64,System.Int32,System.Threading.CancellationToken)">GetGameHighScores</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetGameHighScores(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game.</summary>
            <remarks>This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and their neighbors are not among them. Please note that this behavior is subject to change.</remarks>
            <param name="botClient">An instance of <see cref="T:Telegram.Bot.ITelegramBotClient"/></param>
            <param name="userId">Target user id</param>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
            <returns>An Array of <see cref="T:Telegram.Bot.Types.GameHighScore"/> objects.</returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.GetGameHighScoresAsync(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>We removed all Async suffix from method names. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetGameHighScores(Telegram.Bot.ITelegramBotClient,System.Int64,System.Int64,System.Int32,System.Threading.CancellationToken)">GetGameHighScores</see> instead</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.DropPendingUpdates(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">
            <summary>Drop all pending updates</summary>
            <param name="botClient"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StartReceiving``1(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Polling.ReceiverOptions,System.Threading.CancellationToken)">
            <summary>Starts receiving <see cref="T:Telegram.Bot.Types.Update"/>s on the ThreadPool, invoking <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> for each.
            <para>This method does not block. GetUpdates will be called AFTER the <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> returns</para></summary>
            <typeparam name="TUpdateHandler"> The <see cref="T:Telegram.Bot.Polling.IUpdateHandler"/> used for processing <see cref="T:Telegram.Bot.Types.Update"/>s</typeparam>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="receiverOptions">Options used to configure getUpdates request</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StartReceiving(Telegram.Bot.ITelegramBotClient,System.Func{Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Telegram.Bot.ITelegramBotClient,System.Exception,Telegram.Bot.Polling.HandleErrorSource,System.Threading.CancellationToken,System.Threading.Tasks.Task},Telegram.Bot.Polling.ReceiverOptions,System.Threading.CancellationToken)">
            <summary>Starts receiving <see cref="T:Telegram.Bot.Types.Update"/>s on the ThreadPool, invoking  <paramref name="updateHandler"/> for each.
            <para>This method does not block. GetUpdates will be called AFTER the <paramref name="updateHandler"/> returns</para></summary>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="updateHandler">Delegate used for processing <see cref="T:Telegram.Bot.Types.Update"/>s</param>
            <param name="errorHandler">Delegate used for processing polling errors</param>
            <param name="receiverOptions">Options used to configure getUpdates request</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StartReceiving(Telegram.Bot.ITelegramBotClient,System.Func{Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Telegram.Bot.ITelegramBotClient,System.Exception,System.Threading.CancellationToken,System.Threading.Tasks.Task},Telegram.Bot.Polling.ReceiverOptions,System.Threading.CancellationToken)">
            <summary>Starts receiving <see cref="T:Telegram.Bot.Types.Update"/>s on the ThreadPool, invoking  <paramref name="updateHandler"/> for each.
            <para>This method does not block. GetUpdates will be called AFTER the <paramref name="updateHandler"/> returns</para></summary>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="updateHandler">Delegate used for processing <see cref="T:Telegram.Bot.Types.Update"/>s</param>
            <param name="errorHandler">Delegate used for processing polling errors</param>
            <param name="receiverOptions">Options used to configure getUpdates request</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StartReceiving(Telegram.Bot.ITelegramBotClient,System.Action{Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken},System.Action{Telegram.Bot.ITelegramBotClient,System.Exception,System.Threading.CancellationToken},Telegram.Bot.Polling.ReceiverOptions,System.Threading.CancellationToken)">
            <summary>Starts receiving <see cref="T:Telegram.Bot.Types.Update"/>s on the ThreadPool, invoking  <paramref name="updateHandler"/> for each.
            <para>This method does not block. GetUpdates will be called AFTER the <paramref name="updateHandler"/> returns</para></summary>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="updateHandler">Delegate used for processing <see cref="T:Telegram.Bot.Types.Update"/>s</param>
            <param name="errorHandler">Delegate used for processing polling errors</param>
            <param name="receiverOptions">Options used to configure getUpdates request</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.StartReceiving(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Polling.IUpdateHandler,Telegram.Bot.Polling.ReceiverOptions,System.Threading.CancellationToken)">
            <summary>Starts receiving <see cref="T:Telegram.Bot.Types.Update"/>s on the ThreadPool, invoking <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> for each.
            <para>This method does not block. GetUpdates will be called AFTER the <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> returns</para></summary>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="updateHandler">The <see cref="T:Telegram.Bot.Polling.IUpdateHandler"/> used for processing <see cref="T:Telegram.Bot.Types.Update"/>s</param>
            <param name="receiverOptions">Options used to configure getUpdates request</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ReceiveAsync``1(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Polling.ReceiverOptions,System.Threading.CancellationToken)">
            <summary>Starts receiving <see cref="T:Telegram.Bot.Types.Update"/>s on the ThreadPool, invoking <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> for each.
            <para>This method will block if awaited. GetUpdates will be called AFTER the <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> returns</para></summary>
            <typeparam name="TUpdateHandler">The <see cref="T:Telegram.Bot.Polling.IUpdateHandler"/> used for processing <see cref="T:Telegram.Bot.Types.Update"/>s</typeparam>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="receiverOptions">Options used to configure getUpdates request</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will be completed when cancellation will be requested through <paramref name="cancellationToken"/></returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ReceiveAsync(Telegram.Bot.ITelegramBotClient,System.Func{Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Telegram.Bot.ITelegramBotClient,System.Exception,System.Threading.CancellationToken,System.Threading.Tasks.Task},Telegram.Bot.Polling.ReceiverOptions,System.Threading.CancellationToken)">
            <summary>Starts receiving <see cref="T:Telegram.Bot.Types.Update"/>s on the ThreadPool, invoking <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> for each.
            <para>This method will block if awaited. GetUpdates will be called AFTER the <paramref name="updateHandler"/>returns</para></summary>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="updateHandler">Delegate used for processing <see cref="T:Telegram.Bot.Types.Update"/>s</param>
            <param name="errorHandler">Delegate used for processing polling errors</param>
            <param name="receiverOptions">Options used to configure getUpdates requests</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will be completed when cancellation will be requested through <paramref name="cancellationToken"/></returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ReceiveAsync(Telegram.Bot.ITelegramBotClient,System.Action{Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken},System.Action{Telegram.Bot.ITelegramBotClient,System.Exception,System.Threading.CancellationToken},Telegram.Bot.Polling.ReceiverOptions,System.Threading.CancellationToken)">
            <summary>Starts receiving <see cref="T:Telegram.Bot.Types.Update"/>s on the ThreadPool, invoking <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> for each.
            <para>This method will block if awaited. GetUpdates will be called AFTER the <paramref name="updateHandler"/>returns</para></summary>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="updateHandler">Delegate used for processing <see cref="T:Telegram.Bot.Types.Update"/>s</param>
            <param name="errorHandler">Delegate used for processing polling errors</param>
            <param name="receiverOptions">Options used to configure getUpdates requests</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will be completed when cancellation will be requested through <paramref name="cancellationToken"/></returns>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientExtensions.ReceiveAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Polling.IUpdateHandler,Telegram.Bot.Polling.ReceiverOptions,System.Threading.CancellationToken)">
            <summary>Starts receiving <see cref="T:Telegram.Bot.Types.Update"/>s on the ThreadPool, invoking <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> for each.
            <para>This method will block if awaited. GetUpdates will be called AFTER the <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> returns</para></summary>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="updateHandler">The <see cref="T:Telegram.Bot.Polling.IUpdateHandler"/> used for processing <see cref="T:Telegram.Bot.Types.Update"/>s</param>
            <param name="receiverOptions">Options used to configure getUpdates requests</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will be completed when cancellation will be requested through <paramref name="cancellationToken"/></returns>
        </member>
        <member name="T:Telegram.Bot.Polling.IUpdateHandler">
            <summary>Processes <see cref="T:Telegram.Bot.Types.Update"/>s and errors. <para>See <see cref="T:Telegram.Bot.Polling.DefaultUpdateHandler"/> for a simple implementation</para></summary>
        </member>
        <member name="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)">
            <summary>Handles an <see cref="T:Telegram.Bot.Types.Update"/></summary>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> instance of the bot receiving the <see cref="T:Telegram.Bot.Types.Update"/></param>
            <param name="update">The <see cref="T:Telegram.Bot.Types.Update"/> to handle</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> which will notify that method execution should be cancelled</param>
        </member>
        <member name="M:Telegram.Bot.Polling.IUpdateHandler.HandleErrorAsync(Telegram.Bot.ITelegramBotClient,System.Exception,Telegram.Bot.Polling.HandleErrorSource,System.Threading.CancellationToken)">
            <summary>Handles an <see cref="T:System.Exception"/></summary>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> instance of the bot receiving the <see cref="T:System.Exception"/></param>
            <param name="exception">The <see cref="T:System.Exception"/> to handle</param>
            <param name="source">Where the error occured</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> which will notify that method execution should be cancelled</param>
        </member>
        <member name="T:Telegram.Bot.Polling.HandleErrorSource">
            <summary>The source of the error</summary>
        </member>
        <member name="F:Telegram.Bot.Polling.HandleErrorSource.PollingError">
            <summary>Exception occured during GetUpdates. Polling of updates will continue</summary>
        </member>
        <member name="F:Telegram.Bot.Polling.HandleErrorSource.FatalError">
            <summary>A fatal uncaught exception occured somewhere. Polling of updates will stop</summary>
        </member>
        <member name="F:Telegram.Bot.Polling.HandleErrorSource.HandleUpdateError">
            <summary>Exception was thrown by HandleUpdateAsync. Polling of updates will continue</summary>
        </member>
        <member name="T:Telegram.Bot.Polling.IUpdateReceiver">
            <summary>Requests new <see cref="T:Telegram.Bot.Types.Update"/>s and processes them using provided <see cref="T:Telegram.Bot.Polling.IUpdateHandler"/> instance</summary>
        </member>
        <member name="M:Telegram.Bot.Polling.IUpdateReceiver.ReceiveAsync(Telegram.Bot.Polling.IUpdateHandler,System.Threading.CancellationToken)">
            <summary>Starts receiving <see cref="T:Telegram.Bot.Types.Update"/>s invoking <see cref="M:Telegram.Bot.Polling.IUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)"/> for each <see cref="T:Telegram.Bot.Types.Update"/>.<para>This method will block if awaited.</para></summary>
            <param name="updateHandler">The <see cref="T:Telegram.Bot.Polling.IUpdateHandler"/> used for processing <see cref="T:Telegram.Bot.Types.Update"/>s</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that will be completed when cancellation will be requested through <paramref name="cancellationToken"/></returns>
        </member>
        <member name="T:Telegram.Bot.Polling.ReceiverOptions">
            <summary>Options to configure getUpdates requests</summary>
        </member>
        <member name="P:Telegram.Bot.Polling.ReceiverOptions.Offset">
            <summary>Identifier of the first update to be returned. Will be ignored if <see cref="P:Telegram.Bot.Polling.ReceiverOptions.DropPendingUpdates"/> is set to <see langword="true"/>.</summary>
        </member>
        <member name="P:Telegram.Bot.Polling.ReceiverOptions.AllowedUpdates">
            <summary>Indicates which <see cref="T:Telegram.Bot.Types.Enums.UpdateType"/>s are allowed to be received. In case of <see langword="null"/> the previous setting will be used</summary>
        </member>
        <member name="P:Telegram.Bot.Polling.ReceiverOptions.Limit">
            <summary>Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100 when is set to <see langword="null"/>.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the value doesn't satisfies constraints</exception>
        </member>
        <member name="P:Telegram.Bot.Polling.ReceiverOptions.DropPendingUpdates">
            <summary>Indicates if all pending <see cref="T:Telegram.Bot.Types.Update"/>s should be thrown out before start polling.
            If set to <see langword="true"/> <see cref="P:Telegram.Bot.Polling.ReceiverOptions.AllowedUpdates"/> should be set to not <see langword="null"/>,
            otherwise <see cref="P:Telegram.Bot.Polling.ReceiverOptions.AllowedUpdates"/> will effectively be set to receive all <see cref="T:Telegram.Bot.Types.Update"/>s.</summary>
        </member>
        <member name="T:Telegram.Bot.Polling.BlockingUpdateReceiver">
            <summary>Supports asynchronous iteration over <see cref="T:Telegram.Bot.Types.Update"/>s.</summary>
            <remarks>Constructs a new <see cref="T:Telegram.Bot.Polling.BlockingUpdateReceiver"/> with the specified <see cref="T:Telegram.Bot.ITelegramBotClient"/></remarks>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="receiverOptions"></param>
            <param name="pollingErrorHandler">The function used to handle <see cref="T:System.Exception"/>s thrown by GetUpdates requests</param>
        </member>
        <member name="M:Telegram.Bot.Polling.BlockingUpdateReceiver.#ctor(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Polling.ReceiverOptions,System.Func{System.Exception,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>Supports asynchronous iteration over <see cref="T:Telegram.Bot.Types.Update"/>s.</summary>
            <remarks>Constructs a new <see cref="T:Telegram.Bot.Polling.BlockingUpdateReceiver"/> with the specified <see cref="T:Telegram.Bot.ITelegramBotClient"/></remarks>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="receiverOptions"></param>
            <param name="pollingErrorHandler">The function used to handle <see cref="T:System.Exception"/>s thrown by GetUpdates requests</param>
        </member>
        <member name="M:Telegram.Bot.Polling.BlockingUpdateReceiver.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Gets the <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/>. This method may only be called once.</summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving</param>
        </member>
        <member name="T:Telegram.Bot.Polling.QueuedUpdateReceiver">
            <summary>Supports asynchronous iteration over <see cref="T:Telegram.Bot.Types.Update"/>s./// <para>Updates are received on a different thread and enqueued.</para></summary>
            <remarks>Constructs a new <see cref="T:Telegram.Bot.Polling.QueuedUpdateReceiver"/> with the specified <see cref="T:Telegram.Bot.ITelegramBotClient"/></remarks>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="receiverOptions">Options used to configure getUpdates requests</param>
            <param name="pollingErrorHandler">The function used to handle <see cref="T:System.Exception"/>s thrown by GetUpdates requests</param>
        </member>
        <member name="M:Telegram.Bot.Polling.QueuedUpdateReceiver.#ctor(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Polling.ReceiverOptions,System.Func{System.Exception,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>Supports asynchronous iteration over <see cref="T:Telegram.Bot.Types.Update"/>s./// <para>Updates are received on a different thread and enqueued.</para></summary>
            <remarks>Constructs a new <see cref="T:Telegram.Bot.Polling.QueuedUpdateReceiver"/> with the specified <see cref="T:Telegram.Bot.ITelegramBotClient"/></remarks>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="receiverOptions">Options used to configure getUpdates requests</param>
            <param name="pollingErrorHandler">The function used to handle <see cref="T:System.Exception"/>s thrown by GetUpdates requests</param>
        </member>
        <member name="P:Telegram.Bot.Polling.QueuedUpdateReceiver.PendingUpdates">
            <summary>Indicates how many <see cref="T:Telegram.Bot.Types.Update"/>s are ready to be returned the enumerator</summary>
        </member>
        <member name="M:Telegram.Bot.Polling.QueuedUpdateReceiver.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>Gets the <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/>. This method may only be called once.</summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> with which you can stop receiving</param>
        </member>
        <member name="T:Telegram.Bot.Polling.DefaultUpdateHandler">
            <summary>A very simple <see cref="T:Telegram.Bot.Polling.IUpdateHandler"/> implementation</summary>
            <remarks>Constructs a new <see cref="T:Telegram.Bot.Polling.DefaultUpdateHandler"/> with the specified callback functions</remarks>
            <param name="updateHandler">The function to invoke when an update is received</param>
            <param name="errorHandler">The function to invoke when an error occurs</param>
        </member>
        <member name="M:Telegram.Bot.Polling.DefaultUpdateHandler.#ctor(System.Func{Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Telegram.Bot.ITelegramBotClient,System.Exception,Telegram.Bot.Polling.HandleErrorSource,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>A very simple <see cref="T:Telegram.Bot.Polling.IUpdateHandler"/> implementation</summary>
            <remarks>Constructs a new <see cref="T:Telegram.Bot.Polling.DefaultUpdateHandler"/> with the specified callback functions</remarks>
            <param name="updateHandler">The function to invoke when an update is received</param>
            <param name="errorHandler">The function to invoke when an error occurs</param>
        </member>
        <member name="M:Telegram.Bot.Polling.DefaultUpdateHandler.#ctor(System.Func{Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Telegram.Bot.ITelegramBotClient,System.Exception,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>Constructs a new <see cref="T:Telegram.Bot.Polling.DefaultUpdateHandler"/> with the specified callback functions</summary>
            <param name="updateHandler">The function to invoke when an update is received</param>
            <param name="errorHandler">The function to invoke when an error occurs</param>
        </member>
        <member name="M:Telegram.Bot.Polling.DefaultUpdateHandler.HandleUpdateAsync(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.Update,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Telegram.Bot.Polling.DefaultUpdateHandler.HandleErrorAsync(Telegram.Bot.ITelegramBotClient,System.Exception,Telegram.Bot.Polling.HandleErrorSource,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Telegram.Bot.Polling.DefaultUpdateReceiver">
            <summary>A simple <see cref="T:Telegram.Bot.Polling.IUpdateReceiver"/>> implementation that requests new updates and handles them sequentially</summary>
            <remarks>Constructs a new <see cref="T:Telegram.Bot.Polling.DefaultUpdateReceiver"/> with the specified <see cref="T:Telegram.Bot.ITelegramBotClient"/> instance and optional <see cref="T:Telegram.Bot.Polling.ReceiverOptions"/></remarks>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="receiverOptions">Options used to configure getUpdates requests</param>
        </member>
        <member name="M:Telegram.Bot.Polling.DefaultUpdateReceiver.#ctor(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Polling.ReceiverOptions)">
            <summary>A simple <see cref="T:Telegram.Bot.Polling.IUpdateReceiver"/>> implementation that requests new updates and handles them sequentially</summary>
            <remarks>Constructs a new <see cref="T:Telegram.Bot.Polling.DefaultUpdateReceiver"/> with the specified <see cref="T:Telegram.Bot.ITelegramBotClient"/> instance and optional <see cref="T:Telegram.Bot.Polling.ReceiverOptions"/></remarks>
            <param name="botClient">The <see cref="T:Telegram.Bot.ITelegramBotClient"/> used for making GetUpdates calls</param>
            <param name="receiverOptions">Options used to configure getUpdates requests</param>
        </member>
        <member name="M:Telegram.Bot.Polling.DefaultUpdateReceiver.ReceiveAsync(Telegram.Bot.Polling.IUpdateHandler,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Telegram.Bot.Requests.Abstractions.IBusinessConnectable">
            <summary>Indicates that a request is sent on behalf of a business connection</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.Abstractions.IBusinessConnectable.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message will be sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.Abstractions.IChatTargetable">
            <summary>Represents a request having <see cref="P:Telegram.Bot.Requests.Abstractions.IChatTargetable.ChatId"/> parameter</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.Abstractions.IChatTargetable.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format @channelusername)</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.Abstractions.IRequest">
            <summary>Represents a request to Bot API</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.Abstractions.IRequest.HttpMethod">
            <summary>HTTP method of request</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.Abstractions.IRequest.MethodName">
            <summary>API method name</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.Abstractions.IRequest.IsWebhookResponse">
            <summary>Allows this object to be used as a response in webhooks</summary>
        </member>
        <member name="M:Telegram.Bot.Requests.Abstractions.IRequest.ToHttpContent">
            <summary>Generate content of HTTP message</summary>
            <returns>Content of HTTP request</returns>
        </member>
        <member name="T:Telegram.Bot.Requests.Abstractions.IRequest`1">
            <summary>Represents a request to Bot API</summary>
            <typeparam name="TResponse">Type of result expected in result</typeparam>
        </member>
        <member name="T:Telegram.Bot.Requests.Abstractions.IUserTargetable">
            <summary>Represents a request having <see cref="P:Telegram.Bot.Requests.Abstractions.IUserTargetable.UserId"/> parameter</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.Abstractions.IUserTargetable.UserId">
            <summary>User identifier</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.AnswerCallbackQueryRequest">
            <summary>Use this method to send answers to callback queries sent from <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboards</a>. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert<para>Returns: </para></summary>
            <remarks>Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via <a href="https://t.me/botfather">@BotFather</a> and accept the terms. Otherwise, you may use links like <c>t.me/your_bot?start=XXXX</c> that open your bot with a parameter.</remarks>
        </member>
        <member name="M:Telegram.Bot.Requests.AnswerCallbackQueryRequest.#ctor">
            <summary>Use this method to send answers to callback queries sent from <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboards</a>. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert<para>Returns: </para></summary>
            <remarks>Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via <a href="https://t.me/botfather">@BotFather</a> and accept the terms. Otherwise, you may use links like <c>t.me/your_bot?start=XXXX</c> that open your bot with a parameter.</remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerCallbackQueryRequest.CallbackQueryId">
            <summary>Unique identifier for the query to be answered</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerCallbackQueryRequest.Text">
            <summary>Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerCallbackQueryRequest.ShowAlert">
            <summary>If <see langword="true"/>, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to <see langword="false"/>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerCallbackQueryRequest.Url">
            <summary>URL that will be opened by the user's client. If you have created a <see cref="T:Telegram.Bot.Types.Game"/> and accepted the conditions via <a href="https://t.me/botfather">@BotFather</a>, specify the URL that opens your game - note that this will only work if the query comes from a <see cref="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardButton"><em>CallbackGame</em></see> button.<br/><br/>Otherwise, you may use links like <c>t.me/your_bot?start=XXXX</c> that open your bot with a parameter.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerCallbackQueryRequest.CacheTime">
            <summary>The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.DeleteMyCommandsRequest">
            <summary>Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, <a href="https://core.telegram.org/bots/api#determining-list-of-commands">higher level commands</a> will be shown to affected users.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.DeleteMyCommandsRequest.#ctor">
            <summary>Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, <a href="https://core.telegram.org/bots/api#determining-list-of-commands">higher level commands</a> will be shown to affected users.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteMyCommandsRequest.Scope">
            <summary>An object, describing scope of users for which the commands are relevant. Defaults to <see cref="T:Telegram.Bot.Types.BotCommandScopeDefault"/>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteMyCommandsRequest.LanguageCode">
            <summary>A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetMyCommandsRequest">
            <summary>Use this method to get the current list of the bot's commands for the given scope and user language.<para>Returns: An Array of <see cref="T:Telegram.Bot.Types.BotCommand"/> objects. If commands aren't set, an empty list is returned.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetMyCommandsRequest.#ctor">
            <summary>Use this method to get the current list of the bot's commands for the given scope and user language.<para>Returns: An Array of <see cref="T:Telegram.Bot.Types.BotCommand"/> objects. If commands aren't set, an empty list is returned.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetMyCommandsRequest.Scope">
            <summary>An object, describing scope of users. Defaults to <see cref="T:Telegram.Bot.Types.BotCommandScopeDefault"/>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetMyCommandsRequest.LanguageCode">
            <summary>A two-letter ISO 639-1 language code or an empty string</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetMyCommandsRequest">
            <summary>Use this method to change the list of the bot's commands. See <a href="https://core.telegram.org/bots/features#commands">this manual</a> for more details about bot commands.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetMyCommandsRequest.#ctor">
            <summary>Use this method to change the list of the bot's commands. See <a href="https://core.telegram.org/bots/features#commands">this manual</a> for more details about bot commands.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetMyCommandsRequest.Commands">
            <summary>A list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetMyCommandsRequest.Scope">
            <summary>An object, describing scope of users for which the commands are relevant. Defaults to <see cref="T:Telegram.Bot.Types.BotCommandScopeDefault"/>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetMyCommandsRequest.LanguageCode">
            <summary>A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.CreateChatSubscriptionInviteLinkRequest">
            <summary>Use this method to create a <a href="https://telegram.org/blog/superchannels-star-reactions-subscriptions#star-subscriptions">subscription invite link</a> for a channel chat. The bot must have the <em>CanInviteUsers</em> administrator rights. The link can be edited using the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.EditChatSubscriptionInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.String,System.Threading.CancellationToken)">EditChatSubscriptionInviteLink</see> or revoked using the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.RevokeChatInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">RevokeChatInviteLink</see>.<para>Returns: The new invite link as a <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.CreateChatSubscriptionInviteLinkRequest.#ctor">
            <summary>Use this method to create a <a href="https://telegram.org/blog/superchannels-star-reactions-subscriptions#star-subscriptions">subscription invite link</a> for a channel chat. The bot must have the <em>CanInviteUsers</em> administrator rights. The link can be edited using the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.EditChatSubscriptionInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.String,System.Threading.CancellationToken)">EditChatSubscriptionInviteLink</see> or revoked using the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.RevokeChatInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">RevokeChatInviteLink</see>.<para>Returns: The new invite link as a <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateChatSubscriptionInviteLinkRequest.ChatId">
            <summary>Unique identifier for the target channel chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateChatSubscriptionInviteLinkRequest.SubscriptionPeriod">
            <summary>The number of seconds the subscription will be active for before the next payment. Currently, it must always be 2592000 (30 days).</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateChatSubscriptionInviteLinkRequest.SubscriptionPrice">
            <summary>The amount of Telegram Stars a user must pay initially and after each subsequent subscription period to be a member of the chat; 1-2500</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateChatSubscriptionInviteLinkRequest.Name">
            <summary>Invite link name; 0-32 characters</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetMyDescriptionRequest">
            <summary>Use this method to get the current bot description for the given user language.<para>Returns: <see cref="T:Telegram.Bot.Types.BotDescription"/> on success.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetMyDescriptionRequest.#ctor">
            <summary>Use this method to get the current bot description for the given user language.<para>Returns: <see cref="T:Telegram.Bot.Types.BotDescription"/> on success.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetMyDescriptionRequest.LanguageCode">
            <summary>A two-letter ISO 639-1 language code or an empty string</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetMyDescriptionRequest">
            <summary>Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetMyDescriptionRequest.#ctor">
            <summary>Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetMyDescriptionRequest.Description">
            <summary>New bot description; 0-512 characters. Pass an empty string to remove the dedicated description for the given language.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetMyDescriptionRequest.LanguageCode">
            <summary>A two-letter ISO 639-1 language code. If empty, the description will be applied to all users for whose language there is no dedicated description.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.EditChatSubscriptionInviteLinkRequest">
            <summary>Use this method to edit a subscription invite link created by the bot. The bot must have the <em>CanInviteUsers</em> administrator rights.<para>Returns: The edited invite link as a <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.EditChatSubscriptionInviteLinkRequest.#ctor">
            <summary>Use this method to edit a subscription invite link created by the bot. The bot must have the <em>CanInviteUsers</em> administrator rights.<para>Returns: The edited invite link as a <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditChatSubscriptionInviteLinkRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditChatSubscriptionInviteLinkRequest.InviteLink">
            <summary>The invite link to edit</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditChatSubscriptionInviteLinkRequest.Name">
            <summary>Invite link name; 0-32 characters</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetFileRequest">
            <summary>Use this method to get basic information about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size.<para>Returns: A <see cref="T:Telegram.Bot.Types.File"/> object is returned. The file can then be downloaded via <see cref="M:Telegram.Bot.TelegramBotClient.DownloadFile(System.String,System.IO.Stream,System.Threading.CancellationToken)">DownloadFile</see>, where <c>&lt;FilePath&gt;</c> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetFile(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">GetFile</see> again.<br/><b>Note:</b> This function may not preserve the original file name and MIME type. You should save the file's MIME type and name (if available) when the File object is received.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetFileRequest.#ctor">
            <summary>Use this method to get basic information about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size.<para>Returns: A <see cref="T:Telegram.Bot.Types.File"/> object is returned. The file can then be downloaded via <see cref="M:Telegram.Bot.TelegramBotClient.DownloadFile(System.String,System.IO.Stream,System.Threading.CancellationToken)">DownloadFile</see>, where <c>&lt;FilePath&gt;</c> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetFile(Telegram.Bot.ITelegramBotClient,System.String,System.Threading.CancellationToken)">GetFile</see> again.<br/><b>Note:</b> This function may not preserve the original file name and MIME type. You should save the file's MIME type and name (if available) when the File object is received.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetFileRequest.FileId">
            <summary>File identifier to get information about</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetUserProfilePhotosRequest">
            <summary>Use this method to get a list of profile pictures for a user.<para>Returns: A <see cref="T:Telegram.Bot.Types.UserProfilePhotos"/> object.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetUserProfilePhotosRequest.#ctor">
            <summary>Use this method to get a list of profile pictures for a user.<para>Returns: A <see cref="T:Telegram.Bot.Types.UserProfilePhotos"/> object.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetUserProfilePhotosRequest.UserId">
            <summary>Unique identifier of the target user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetUserProfilePhotosRequest.Offset">
            <summary>Sequential number of the first photo to be returned. By default, all photos are returned.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetUserProfilePhotosRequest.Limit">
            <summary>Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetBusinessConnectionRequest">
            <summary>Use this method to get information about the connection of the bot with a business account.<para>Returns: A <see cref="T:Telegram.Bot.Types.BusinessConnection"/> object on success.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetBusinessConnectionRequest.#ctor">
            <summary>Use this method to get information about the connection of the bot with a business account.<para>Returns: A <see cref="T:Telegram.Bot.Types.BusinessConnection"/> object on success.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetBusinessConnectionRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetChatMenuButtonRequest">
            <summary>Use this method to get the current value of the bot's menu button in a private chat, or the default menu button.<para>Returns: <see cref="T:Telegram.Bot.Types.MenuButton"/> on success.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetChatMenuButtonRequest.#ctor">
            <summary>Use this method to get the current value of the bot's menu button in a private chat, or the default menu button.<para>Returns: <see cref="T:Telegram.Bot.Types.MenuButton"/> on success.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetChatMenuButtonRequest.ChatId">
            <summary>Unique identifier for the target private chat. If not specified, default bot's menu button will be returned</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetMeRequest">
            <summary>A simple method for testing your bot's authentication token.<para>Returns: Basic information about the bot in form of a <see cref="T:Telegram.Bot.Types.User"/> object.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetMeRequest.#ctor">
            <summary>A simple method for testing your bot's authentication token.<para>Returns: Basic information about the bot in form of a <see cref="T:Telegram.Bot.Types.User"/> object.</para></summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetMyDefaultAdministratorRightsRequest">
            <summary>Use this method to get the current default administrator rights of the bot.<para>Returns: <see cref="T:Telegram.Bot.Types.ChatAdministratorRights"/> on success.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetMyDefaultAdministratorRightsRequest.#ctor">
            <summary>Use this method to get the current default administrator rights of the bot.<para>Returns: <see cref="T:Telegram.Bot.Types.ChatAdministratorRights"/> on success.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetMyDefaultAdministratorRightsRequest.ForChannels">
            <summary>Pass <see langword="true"/> to get default administrator rights of the bot in channels. Otherwise, default administrator rights of the bot for groups and supergroups will be returned.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetMyNameRequest">
            <summary>Use this method to get the current bot name for the given user language.<para>Returns: <see cref="T:Telegram.Bot.Types.BotName"/> on success.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetMyNameRequest.#ctor">
            <summary>Use this method to get the current bot name for the given user language.<para>Returns: <see cref="T:Telegram.Bot.Types.BotName"/> on success.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetMyNameRequest.LanguageCode">
            <summary>A two-letter ISO 639-1 language code or an empty string</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetUserChatBoostsRequest">
            <summary>Use this method to get the list of boosts added to a chat by a user. Requires administrator rights in the chat.<para>Returns: A <see cref="T:Telegram.Bot.Types.UserChatBoosts"/> object.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetUserChatBoostsRequest.#ctor">
            <summary>Use this method to get the list of boosts added to a chat by a user. Requires administrator rights in the chat.<para>Returns: A <see cref="T:Telegram.Bot.Types.UserChatBoosts"/> object.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetUserChatBoostsRequest.ChatId">
            <summary>Unique identifier for the chat or username of the channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetUserChatBoostsRequest.UserId">
            <summary>Unique identifier of the target user</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.CloseRequest">
            <summary>Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.CloseRequest.#ctor">
            <summary>Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched.<para>Returns: </para></summary>
        </member>
        <member name="T:Telegram.Bot.Requests.LogOutRequest">
            <summary>Use this method to log out from the cloud Bot API server before launching the bot locally. You <b>must</b> log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.LogOutRequest.#ctor">
            <summary>Use this method to log out from the cloud Bot API server before launching the bot locally. You <b>must</b> log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes.<para>Returns: </para></summary>
        </member>
        <member name="T:Telegram.Bot.Requests.BanChatMemberRequest">
            <summary>Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless <see cref="M:Telegram.Bot.TelegramBotClientExtensions.UnbanChatMember(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Boolean,System.Threading.CancellationToken)">unbanned</see> first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.BanChatMemberRequest.#ctor">
            <summary>Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless <see cref="M:Telegram.Bot.TelegramBotClientExtensions.UnbanChatMember(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Boolean,System.Threading.CancellationToken)">unbanned</see> first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.BanChatMemberRequest.ChatId">
            <summary>Unique identifier for the target group or username of the target supergroup or channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.BanChatMemberRequest.UserId">
            <summary>Unique identifier of the target user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.BanChatMemberRequest.UntilDate">
            <summary>Date when the user will be unbanned, in UTC. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever. Applied for supergroups and channels only.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.BanChatMemberRequest.RevokeMessages">
            <summary>Pass <see langword="true"/> to delete all messages from the chat for the user that is being removed. If <see langword="false"/>, the user will be able to see messages in the group that were sent before the user was removed. Always <see langword="true"/> for supergroups and channels.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.BanChatSenderChatRequest">
            <summary>Use this method to ban a channel chat in a supergroup or a channel. Until the chat is <see cref="M:Telegram.Bot.TelegramBotClientExtensions.UnbanChatSenderChat(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">unbanned</see>, the owner of the banned chat won't be able to send messages on behalf of <b>any of their channels</b>. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.BanChatSenderChatRequest.#ctor">
            <summary>Use this method to ban a channel chat in a supergroup or a channel. Until the chat is <see cref="M:Telegram.Bot.TelegramBotClientExtensions.UnbanChatSenderChat(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int64,System.Threading.CancellationToken)">unbanned</see>, the owner of the banned chat won't be able to send messages on behalf of <b>any of their channels</b>. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.BanChatSenderChatRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.BanChatSenderChatRequest.SenderChatId">
            <summary>Unique identifier of the target sender chat</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.ApproveChatJoinRequest">
            <summary>Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the <em>CanInviteUsers</em> administrator right.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.ApproveChatJoinRequest.#ctor">
            <summary>Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the <em>CanInviteUsers</em> administrator right.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ApproveChatJoinRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ApproveChatJoinRequest.UserId">
            <summary>Unique identifier of the target user</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.CreateChatInviteLinkRequest">
            <summary>Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.RevokeChatInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">RevokeChatInviteLink</see>.<para>Returns: The new invite link as <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.CreateChatInviteLinkRequest.#ctor">
            <summary>Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.RevokeChatInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,System.Threading.CancellationToken)">RevokeChatInviteLink</see>.<para>Returns: The new invite link as <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateChatInviteLinkRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateChatInviteLinkRequest.Name">
            <summary>Invite link name; 0-32 characters</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateChatInviteLinkRequest.ExpireDate">
            <summary>Point in time when the link will expire</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateChatInviteLinkRequest.MemberLimit">
            <summary>The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateChatInviteLinkRequest.CreatesJoinRequest">
            <summary><see langword="true"/>, if users joining the chat via the link need to be approved by chat administrators. If <see langword="true"/>, <see cref="P:Telegram.Bot.Requests.CreateChatInviteLinkRequest.MemberLimit">MemberLimit</see> can't be specified</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.DeclineChatJoinRequest">
            <summary>Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the <em>CanInviteUsers</em> administrator right.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.DeclineChatJoinRequest.#ctor">
            <summary>Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the <em>CanInviteUsers</em> administrator right.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeclineChatJoinRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeclineChatJoinRequest.UserId">
            <summary>Unique identifier of the target user</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.EditChatInviteLinkRequest">
            <summary>Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.<para>Returns: The edited invite link as a <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.EditChatInviteLinkRequest.#ctor">
            <summary>Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.<para>Returns: The edited invite link as a <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditChatInviteLinkRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditChatInviteLinkRequest.InviteLink">
            <summary>The invite link to edit</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditChatInviteLinkRequest.Name">
            <summary>Invite link name; 0-32 characters</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditChatInviteLinkRequest.ExpireDate">
            <summary>Point in time when the link will expire</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditChatInviteLinkRequest.MemberLimit">
            <summary>The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditChatInviteLinkRequest.CreatesJoinRequest">
            <summary><see langword="true"/>, if users joining the chat via the link need to be approved by chat administrators. If <see langword="true"/>, <see cref="P:Telegram.Bot.Requests.EditChatInviteLinkRequest.MemberLimit">MemberLimit</see> can't be specified</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.ExportChatInviteLinkRequest">
            <summary>Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.<para>Returns: The new invite link as <em>String</em> on success.</para></summary>
            <remarks>Note: Each administrator in a chat generates their own invite links. Bots can't use invite links generated by other administrators. If you want your bot to work with invite links, it will need to generate its own link using <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ExportChatInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">ExportChatInviteLink</see> or by calling the <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetChat(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">GetChat</see> method. If your bot needs to generate a new primary invite link replacing its previous one, use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ExportChatInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">ExportChatInviteLink</see> again.</remarks>
        </member>
        <member name="M:Telegram.Bot.Requests.ExportChatInviteLinkRequest.#ctor">
            <summary>Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.<para>Returns: The new invite link as <em>String</em> on success.</para></summary>
            <remarks>Note: Each administrator in a chat generates their own invite links. Bots can't use invite links generated by other administrators. If you want your bot to work with invite links, it will need to generate its own link using <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ExportChatInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">ExportChatInviteLink</see> or by calling the <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetChat(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">GetChat</see> method. If your bot needs to generate a new primary invite link replacing its previous one, use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ExportChatInviteLink(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">ExportChatInviteLink</see> again.</remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.ExportChatInviteLinkRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.RevokeChatInviteLinkRequest">
            <summary>Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.<para>Returns: The revoked invite link as <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.RevokeChatInviteLinkRequest.#ctor">
            <summary>Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.<para>Returns: The revoked invite link as <see cref="T:Telegram.Bot.Types.ChatInviteLink"/> object.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.RevokeChatInviteLinkRequest.ChatId">
            <summary>Unique identifier of the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.RevokeChatInviteLinkRequest.InviteLink">
            <summary>The invite link to revoke</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.CloseForumTopicRequest">
            <summary>Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights, unless it is the creator of the topic.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.CloseForumTopicRequest.#ctor">
            <summary>Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights, unless it is the creator of the topic.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CloseForumTopicRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CloseForumTopicRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread of the forum topic</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.CloseGeneralForumTopicRequest">
            <summary>Use this method to close an open 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.CloseGeneralForumTopicRequest.#ctor">
            <summary>Use this method to close an open 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CloseGeneralForumTopicRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.CreateForumTopicRequest">
            <summary>Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights.<para>Returns: Information about the created topic as a <see cref="T:Telegram.Bot.Types.ForumTopic"/> object.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.CreateForumTopicRequest.#ctor">
            <summary>Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights.<para>Returns: Information about the created topic as a <see cref="T:Telegram.Bot.Types.ForumTopic"/> object.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateForumTopicRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateForumTopicRequest.Name">
            <summary>Topic name, 1-128 characters</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateForumTopicRequest.IconColor">
            <summary>Color of the topic icon in RGB format. Currently, must be one of 7322096 (0x6FB9F0), 16766590 (0xFFD67E), 13338331 (0xCB86DB), 9367192 (0x8EEE98), 16749490 (0xFF93B2), or 16478047 (0xFB6F5F)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateForumTopicRequest.IconCustomEmojiId">
            <summary>Unique identifier of the custom emoji shown as the topic icon. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetForumTopicIconStickers(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">GetForumTopicIconStickers</see> to get all allowed custom emoji identifiers.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.DeleteChatPhotoRequest">
            <summary>Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.DeleteChatPhotoRequest.#ctor">
            <summary>Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteChatPhotoRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.DeleteChatStickerSetRequest">
            <summary>Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field <em>CanSetStickerSet</em> optionally returned in <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetChat(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">GetChat</see> requests to check if the bot can use this method.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.DeleteChatStickerSetRequest.#ctor">
            <summary>Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field <em>CanSetStickerSet</em> optionally returned in <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetChat(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">GetChat</see> requests to check if the bot can use this method.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteChatStickerSetRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.DeleteForumTopicRequest">
            <summary>Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanDeleteMessages</em> administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.DeleteForumTopicRequest.#ctor">
            <summary>Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanDeleteMessages</em> administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteForumTopicRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteForumTopicRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread of the forum topic</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.EditForumTopicRequest">
            <summary>Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights, unless it is the creator of the topic.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.EditForumTopicRequest.#ctor">
            <summary>Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights, unless it is the creator of the topic.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditForumTopicRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditForumTopicRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread of the forum topic</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditForumTopicRequest.Name">
            <summary>New topic name, 0-128 characters. If not specified or empty, the current name of the topic will be kept</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditForumTopicRequest.IconCustomEmojiId">
            <summary>New unique identifier of the custom emoji shown as the topic icon. Use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetForumTopicIconStickers(Telegram.Bot.ITelegramBotClient,System.Threading.CancellationToken)">GetForumTopicIconStickers</see> to get all allowed custom emoji identifiers. Pass an empty string to remove the icon. If not specified, the current icon will be kept</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.EditGeneralForumTopicRequest">
            <summary>Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.EditGeneralForumTopicRequest.#ctor">
            <summary>Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditGeneralForumTopicRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditGeneralForumTopicRequest.Name">
            <summary>New topic name, 1-128 characters</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetChatAdministratorsRequest">
            <summary>Use this method to get a list of administrators in a chat, which aren't bots.<para>Returns: An Array of <see cref="T:Telegram.Bot.Types.ChatMember"/> objects.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetChatAdministratorsRequest.#ctor">
            <summary>Use this method to get a list of administrators in a chat, which aren't bots.<para>Returns: An Array of <see cref="T:Telegram.Bot.Types.ChatMember"/> objects.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetChatAdministratorsRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup or channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetChatMemberCountRequest">
            <summary>Use this method to get the number of members in a chat.<para>Returns: <em>Int</em> on success.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetChatMemberCountRequest.#ctor">
            <summary>Use this method to get the number of members in a chat.<para>Returns: <em>Int</em> on success.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetChatMemberCountRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup or channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetChatMemberRequest">
            <summary>Use this method to get information about a member of a chat. The method is only guaranteed to work for other users if the bot is an administrator in the chat.<para>Returns: A <see cref="T:Telegram.Bot.Types.ChatMember"/> object on success.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetChatMemberRequest.#ctor">
            <summary>Use this method to get information about a member of a chat. The method is only guaranteed to work for other users if the bot is an administrator in the chat.<para>Returns: A <see cref="T:Telegram.Bot.Types.ChatMember"/> object on success.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetChatMemberRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup or channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetChatMemberRequest.UserId">
            <summary>Unique identifier of the target user</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetChatRequest">
            <summary>Use this method to get up-to-date information about the chat.<para>Returns: A <see cref="T:Telegram.Bot.Types.ChatFullInfo"/> object on success.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetChatRequest.#ctor">
            <summary>Use this method to get up-to-date information about the chat.<para>Returns: A <see cref="T:Telegram.Bot.Types.ChatFullInfo"/> object on success.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetChatRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup or channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.HideGeneralForumTopicRequest">
            <summary>Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights. The topic will be automatically closed if it was open.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.HideGeneralForumTopicRequest.#ctor">
            <summary>Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights. The topic will be automatically closed if it was open.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.HideGeneralForumTopicRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.LeaveChatRequest">
            <summary>Use this method for your bot to leave a group, supergroup or channel.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.LeaveChatRequest.#ctor">
            <summary>Use this method for your bot to leave a group, supergroup or channel.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.LeaveChatRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup or channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.PinChatMessageRequest">
            <summary>Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'CanPinMessages' administrator right in a supergroup or 'CanEditMessages' administrator right in a channel.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.PinChatMessageRequest.#ctor">
            <summary>Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'CanPinMessages' administrator right in a supergroup or 'CanEditMessages' administrator right in a channel.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PinChatMessageRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PinChatMessageRequest.MessageId">
            <summary>Identifier of a message to pin</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PinChatMessageRequest.DisableNotification">
            <summary>Pass <see langword="true"/> if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PinChatMessageRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message will be pinned</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.PromoteChatMemberRequest">
            <summary>Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass <em>False</em> for all boolean parameters to demote a user.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.PromoteChatMemberRequest.#ctor">
            <summary>Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass <em>False</em> for all boolean parameters to demote a user.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.UserId">
            <summary>Unique identifier of the target user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.IsAnonymous">
            <summary>Pass <see langword="true"/> if the administrator's presence in the chat is hidden</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanManageChat">
            <summary>Pass <see langword="true"/> if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanPostMessages">
            <summary>Pass <see langword="true"/> if the administrator can post messages in the channel, or access channel statistics; for channels only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanEditMessages">
            <summary>Pass <see langword="true"/> if the administrator can edit messages of other users and can pin messages; for channels only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanDeleteMessages">
            <summary>Pass <see langword="true"/> if the administrator can delete messages of other users</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanPostStories">
            <summary>Pass <see langword="true"/> if the administrator can post stories to the chat</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanEditStories">
            <summary>Pass <see langword="true"/> if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanDeleteStories">
            <summary>Pass <see langword="true"/> if the administrator can delete stories posted by other users</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanManageVideoChats">
            <summary>Pass <see langword="true"/> if the administrator can manage video chats</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanRestrictMembers">
            <summary>Pass <see langword="true"/> if the administrator can restrict, ban or unban chat members, or access supergroup statistics</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanPromoteMembers">
            <summary>Pass <see langword="true"/> if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by him)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanChangeInfo">
            <summary>Pass <see langword="true"/> if the administrator can change chat title, photo and other settings</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanInviteUsers">
            <summary>Pass <see langword="true"/> if the administrator can invite new users to the chat</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanPinMessages">
            <summary>Pass <see langword="true"/> if the administrator can pin messages; for supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.PromoteChatMemberRequest.CanManageTopics">
            <summary>Pass <see langword="true"/> if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.ReopenForumTopicRequest">
            <summary>Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights, unless it is the creator of the topic.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.ReopenForumTopicRequest.#ctor">
            <summary>Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights, unless it is the creator of the topic.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ReopenForumTopicRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ReopenForumTopicRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread of the forum topic</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.ReopenGeneralForumTopicRequest">
            <summary>Use this method to reopen a closed 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights. The topic will be automatically unhidden if it was hidden.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.ReopenGeneralForumTopicRequest.#ctor">
            <summary>Use this method to reopen a closed 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights. The topic will be automatically unhidden if it was hidden.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ReopenGeneralForumTopicRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.RestrictChatMemberRequest">
            <summary>Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass <em>True</em> for all permissions to lift restrictions from a user.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.RestrictChatMemberRequest.#ctor">
            <summary>Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass <em>True</em> for all permissions to lift restrictions from a user.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.RestrictChatMemberRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.RestrictChatMemberRequest.UserId">
            <summary>Unique identifier of the target user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.RestrictChatMemberRequest.Permissions">
            <summary>An object for new user permissions</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.RestrictChatMemberRequest.UseIndependentChatPermissions">
            <summary>Pass <see langword="true"/> if chat permissions are set independently. Otherwise, the <em>CanSendOtherMessages</em> and <em>CanAddWebPagePreviews</em> permissions will imply the <em>CanSendMessages</em>, <em>CanSendAudios</em>, <em>CanSendDocuments</em>, <em>CanSendPhotos</em>, <em>CanSendVideos</em>, <em>CanSendVideoNotes</em>, and <em>CanSendVoiceNotes</em> permissions; the <em>CanSendPolls</em> permission will imply the <em>CanSendMessages</em> permission.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.RestrictChatMemberRequest.UntilDate">
            <summary>Date when restrictions will be lifted for the user, in UTC. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetChatAdministratorCustomTitleRequest">
            <summary>Use this method to set a custom title for an administrator in a supergroup promoted by the bot.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetChatAdministratorCustomTitleRequest.#ctor">
            <summary>Use this method to set a custom title for an administrator in a supergroup promoted by the bot.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatAdministratorCustomTitleRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatAdministratorCustomTitleRequest.UserId">
            <summary>Unique identifier of the target user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatAdministratorCustomTitleRequest.CustomTitle">
            <summary>New custom title for the administrator; 0-16 characters, emoji are not allowed</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetChatDescriptionRequest">
            <summary>Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetChatDescriptionRequest.#ctor">
            <summary>Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatDescriptionRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatDescriptionRequest.Description">
            <summary>New chat description, 0-255 characters</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetChatPermissionsRequest">
            <summary>Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the <em>CanRestrictMembers</em> administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetChatPermissionsRequest.#ctor">
            <summary>Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the <em>CanRestrictMembers</em> administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatPermissionsRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatPermissionsRequest.Permissions">
            <summary>An object for new default chat permissions</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatPermissionsRequest.UseIndependentChatPermissions">
            <summary>Pass <see langword="true"/> if chat permissions are set independently. Otherwise, the <em>CanSendOtherMessages</em> and <em>CanAddWebPagePreviews</em> permissions will imply the <em>CanSendMessages</em>, <em>CanSendAudios</em>, <em>CanSendDocuments</em>, <em>CanSendPhotos</em>, <em>CanSendVideos</em>, <em>CanSendVideoNotes</em>, and <em>CanSendVoiceNotes</em> permissions; the <em>CanSendPolls</em> permission will imply the <em>CanSendMessages</em> permission.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetChatPhotoRequest">
            <summary>Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetChatPhotoRequest.#ctor">
            <summary>Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatPhotoRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatPhotoRequest.Photo">
            <summary>New chat photo, uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/></summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetChatStickerSetRequest">
            <summary>Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field <em>CanSetStickerSet</em> optionally returned in <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetChat(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">GetChat</see> requests to check if the bot can use this method.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetChatStickerSetRequest.#ctor">
            <summary>Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field <em>CanSetStickerSet</em> optionally returned in <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetChat(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Threading.CancellationToken)">GetChat</see> requests to check if the bot can use this method.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatStickerSetRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatStickerSetRequest.StickerSetName">
            <summary>Name of the sticker set to be set as the group sticker set</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetChatTitleRequest">
            <summary>Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetChatTitleRequest.#ctor">
            <summary>Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatTitleRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatTitleRequest.Title">
            <summary>New chat title, 1-128 characters</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.UnbanChatMemberRequest">
            <summary>Use this method to unban a previously banned user in a supergroup or channel. The user will <b>not</b> return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be <b>removed</b> from the chat. If you don't want this, use the parameter <see cref="P:Telegram.Bot.Requests.UnbanChatMemberRequest.OnlyIfBanned">OnlyIfBanned</see>.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.UnbanChatMemberRequest.#ctor">
            <summary>Use this method to unban a previously banned user in a supergroup or channel. The user will <b>not</b> return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be <b>removed</b> from the chat. If you don't want this, use the parameter <see cref="P:Telegram.Bot.Requests.UnbanChatMemberRequest.OnlyIfBanned">OnlyIfBanned</see>.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.UnbanChatMemberRequest.ChatId">
            <summary>Unique identifier for the target group or username of the target supergroup or channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.UnbanChatMemberRequest.UserId">
            <summary>Unique identifier of the target user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.UnbanChatMemberRequest.OnlyIfBanned">
            <summary>Do nothing if the user is not banned</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.UnbanChatSenderChatRequest">
            <summary>Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.UnbanChatSenderChatRequest.#ctor">
            <summary>Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.UnbanChatSenderChatRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.UnbanChatSenderChatRequest.SenderChatId">
            <summary>Unique identifier of the target sender chat</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.UnhideGeneralForumTopicRequest">
            <summary>Use this method to unhide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.UnhideGeneralForumTopicRequest.#ctor">
            <summary>Use this method to unhide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the <em>CanManageTopics</em> administrator rights.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.UnhideGeneralForumTopicRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.UnpinAllChatMessagesRequest">
            <summary>Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'CanPinMessages' administrator right in a supergroup or 'CanEditMessages' administrator right in a channel.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.UnpinAllChatMessagesRequest.#ctor">
            <summary>Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'CanPinMessages' administrator right in a supergroup or 'CanEditMessages' administrator right in a channel.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.UnpinAllChatMessagesRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.UnpinAllForumTopicMessagesRequest">
            <summary>Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the <em>CanPinMessages</em> administrator right in the supergroup.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.UnpinAllForumTopicMessagesRequest.#ctor">
            <summary>Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the <em>CanPinMessages</em> administrator right in the supergroup.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.UnpinAllForumTopicMessagesRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.UnpinAllForumTopicMessagesRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread of the forum topic</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.UnpinAllGeneralForumTopicMessagesRequest">
            <summary>Use this method to clear the list of pinned messages in a General forum topic. The bot must be an administrator in the chat for this to work and must have the <em>CanPinMessages</em> administrator right in the supergroup.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.UnpinAllGeneralForumTopicMessagesRequest.#ctor">
            <summary>Use this method to clear the list of pinned messages in a General forum topic. The bot must be an administrator in the chat for this to work and must have the <em>CanPinMessages</em> administrator right in the supergroup.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.UnpinAllGeneralForumTopicMessagesRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target supergroup (in the format <c>@supergroupusername</c>)</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.UnpinChatMessageRequest">
            <summary>Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'CanPinMessages' administrator right in a supergroup or 'CanEditMessages' administrator right in a channel.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.UnpinChatMessageRequest.#ctor">
            <summary>Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'CanPinMessages' administrator right in a supergroup or 'CanEditMessages' administrator right in a channel.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.UnpinChatMessageRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.UnpinChatMessageRequest.MessageId">
            <summary>Identifier of the message to unpin. Required if <see cref="P:Telegram.Bot.Requests.UnpinChatMessageRequest.BusinessConnectionId">BusinessConnectionId</see> is specified. If not specified, the most recent pinned message (by sending date) will be unpinned.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.UnpinChatMessageRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message will be unpinned</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.CopyMessageRequest">
            <summary>Use this method to copy messages of any kind. Service messages, paid media messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied. A quiz <see cref="T:Telegram.Bot.Types.Poll"/> can be copied only if the value of the field <em>CorrectOptionId</em> is known to the bot. The method is analogous to the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ForwardMessage(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Threading.CancellationToken)">ForwardMessage</see>, but the copied message doesn't have a link to the original message.<para>Returns: The <see cref="P:Telegram.Bot.Requests.CopyMessageRequest.MessageId"/> of the sent message on success.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.CopyMessageRequest.#ctor">
            <summary>Use this method to copy messages of any kind. Service messages, paid media messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied. A quiz <see cref="T:Telegram.Bot.Types.Poll"/> can be copied only if the value of the field <em>CorrectOptionId</em> is known to the bot. The method is analogous to the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ForwardMessage(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Threading.CancellationToken)">ForwardMessage</see>, but the copied message doesn't have a link to the original message.<para>Returns: The <see cref="P:Telegram.Bot.Requests.CopyMessageRequest.MessageId"/> of the sent message on success.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.FromChatId">
            <summary>Unique identifier for the chat where the original message was sent (or channel username in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.MessageId">
            <summary>Message identifier in the chat specified in <see cref="P:Telegram.Bot.Requests.CopyMessageRequest.FromChatId">FromChatId</see></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.Caption">
            <summary>New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.ParseMode">
            <summary>Mode for parsing entities in the new caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.CaptionEntities">
            <summary>A list of special entities that appear in the new caption, which can be specified instead of <see cref="P:Telegram.Bot.Requests.CopyMessageRequest.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.ShowCaptionAboveMedia">
            <summary>Pass <see langword="true"/>, if the caption must be shown above the message media. Ignored if a new caption isn't specified.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.DisableNotification">
            <summary>Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.ProtectContent">
            <summary>Protects the contents of the sent message from forwarding and saving</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.AllowPaidBroadcast">
            <summary>Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.ReplyParameters">
            <summary>Description of the message to reply to</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessageRequest.ReplyMarkup">
            <summary>Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.CopyMessagesRequest">
            <summary>Use this method to copy messages of any kind. If some of the specified messages can't be found or copied, they are skipped. Service messages, paid media messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied. A quiz <see cref="T:Telegram.Bot.Types.Poll"/> can be copied only if the value of the field <em>CorrectOptionId</em> is known to the bot. The method is analogous to the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ForwardMessages(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Threading.CancellationToken)">ForwardMessages</see>, but the copied messages don't have a link to the original message. Album grouping is kept for copied messages.<para>Returns: An array of <see cref="T:Telegram.Bot.Types.MessageId"/> of the sent messages is returned.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.CopyMessagesRequest.#ctor">
            <summary>Use this method to copy messages of any kind. If some of the specified messages can't be found or copied, they are skipped. Service messages, paid media messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied. A quiz <see cref="T:Telegram.Bot.Types.Poll"/> can be copied only if the value of the field <em>CorrectOptionId</em> is known to the bot. The method is analogous to the method <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ForwardMessages(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.ChatId,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Threading.CancellationToken)">ForwardMessages</see>, but the copied messages don't have a link to the original message. Album grouping is kept for copied messages.<para>Returns: An array of <see cref="T:Telegram.Bot.Types.MessageId"/> of the sent messages is returned.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessagesRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessagesRequest.FromChatId">
            <summary>Unique identifier for the chat where the original messages were sent (or channel username in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessagesRequest.MessageIds">
            <summary>A list of 1-100 identifiers of messages in the chat <see cref="P:Telegram.Bot.Requests.CopyMessagesRequest.FromChatId">FromChatId</see> to copy. The identifiers must be specified in a strictly increasing order.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessagesRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessagesRequest.DisableNotification">
            <summary>Sends the messages <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessagesRequest.ProtectContent">
            <summary>Protects the contents of the sent messages from forwarding and saving</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CopyMessagesRequest.RemoveCaption">
            <summary>Pass <see langword="true"/> to copy the messages without their captions</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.ForwardMessageRequest">
            <summary>Use this method to forward messages of any kind. Service messages and messages with protected content can't be forwarded.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.ForwardMessageRequest.#ctor">
            <summary>Use this method to forward messages of any kind. Service messages and messages with protected content can't be forwarded.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ForwardMessageRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ForwardMessageRequest.FromChatId">
            <summary>Unique identifier for the chat where the original message was sent (or channel username in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ForwardMessageRequest.MessageId">
            <summary>Message identifier in the chat specified in <see cref="P:Telegram.Bot.Requests.ForwardMessageRequest.FromChatId">FromChatId</see></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ForwardMessageRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ForwardMessageRequest.DisableNotification">
            <summary>Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ForwardMessageRequest.ProtectContent">
            <summary>Protects the contents of the forwarded message from forwarding and saving</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.ForwardMessagesRequest">
            <summary>Use this method to forward multiple messages of any kind. If some of the specified messages can't be found or forwarded, they are skipped. Service messages and messages with protected content can't be forwarded. Album grouping is kept for forwarded messages.<para>Returns: An array of <see cref="T:Telegram.Bot.Types.MessageId"/> of the sent messages is returned.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.ForwardMessagesRequest.#ctor">
            <summary>Use this method to forward multiple messages of any kind. If some of the specified messages can't be found or forwarded, they are skipped. Service messages and messages with protected content can't be forwarded. Album grouping is kept for forwarded messages.<para>Returns: An array of <see cref="T:Telegram.Bot.Types.MessageId"/> of the sent messages is returned.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ForwardMessagesRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ForwardMessagesRequest.FromChatId">
            <summary>Unique identifier for the chat where the original messages were sent (or channel username in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ForwardMessagesRequest.MessageIds">
            <summary>A list of 1-100 identifiers of messages in the chat <see cref="P:Telegram.Bot.Requests.ForwardMessagesRequest.FromChatId">FromChatId</see> to forward. The identifiers must be specified in a strictly increasing order.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ForwardMessagesRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ForwardMessagesRequest.DisableNotification">
            <summary>Sends the messages <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ForwardMessagesRequest.ProtectContent">
            <summary>Protects the contents of the forwarded messages from forwarding and saving</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest">
            <summary>Use this method to edit live location messages. A location can be edited until its <see cref="P:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.LivePeriod">LivePeriod</see> expires or editing is explicitly disabled by a call to <see cref="M:Telegram.Bot.TelegramBotClientExtensions.StopMessageLiveLocation(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">StopMessageLiveLocation</see>.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.#ctor">
            <summary>Use this method to edit live location messages. A location can be edited until its <see cref="P:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.LivePeriod">LivePeriod</see> expires or editing is explicitly disabled by a call to <see cref="M:Telegram.Bot.TelegramBotClientExtensions.StopMessageLiveLocation(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">StopMessageLiveLocation</see>.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.InlineMessageId">
            <summary>Identifier of the inline message</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.Latitude">
            <summary>Latitude of new location</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.Longitude">
            <summary>Longitude of new location</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.LivePeriod">
            <summary>New period in seconds during which the location can be updated, starting from the message send date. If 0x7FFFFFFF is specified, then the location can be updated forever. Otherwise, the new value must not exceed the current <see cref="P:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.LivePeriod">LivePeriod</see> by more than a day, and the live location expiration date must remain within the next 90 days. If not specified, then <see cref="P:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.LivePeriod">LivePeriod</see> remains unchanged</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.HorizontalAccuracy">
            <summary>The radius of uncertainty for the location, measured in meters; 0-1500</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.Heading">
            <summary>Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.ProximityAlertRadius">
            <summary>The maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.ReplyMarkup">
            <summary>An object for a new <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageLiveLocationRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message to be edited was sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.EditMessageLiveLocationRequest">
            <summary>Use this method to edit live location messages. A location can be edited until its <see cref="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.LivePeriod">LivePeriod</see> expires or editing is explicitly disabled by a call to <see cref="M:Telegram.Bot.TelegramBotClientExtensions.StopMessageLiveLocation(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">StopMessageLiveLocation</see>.<para>Returns: The edited <see cref="T:Telegram.Bot.Types.Message"/> is returned</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.EditMessageLiveLocationRequest.#ctor">
            <summary>Use this method to edit live location messages. A location can be edited until its <see cref="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.LivePeriod">LivePeriod</see> expires or editing is explicitly disabled by a call to <see cref="M:Telegram.Bot.TelegramBotClientExtensions.StopMessageLiveLocation(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup,System.String,System.Threading.CancellationToken)">StopMessageLiveLocation</see>.<para>Returns: The edited <see cref="T:Telegram.Bot.Types.Message"/> is returned</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.MessageId">
            <summary>Identifier of the message to edit</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.Latitude">
            <summary>Latitude of new location</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.Longitude">
            <summary>Longitude of new location</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.LivePeriod">
            <summary>New period in seconds during which the location can be updated, starting from the message send date. If 0x7FFFFFFF is specified, then the location can be updated forever. Otherwise, the new value must not exceed the current <see cref="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.LivePeriod">LivePeriod</see> by more than a day, and the live location expiration date must remain within the next 90 days. If not specified, then <see cref="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.LivePeriod">LivePeriod</see> remains unchanged</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.HorizontalAccuracy">
            <summary>The radius of uncertainty for the location, measured in meters; 0-1500</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.Heading">
            <summary>Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.ProximityAlertRadius">
            <summary>The maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.ReplyMarkup">
            <summary>An object for a new <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageLiveLocationRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message to be edited was sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SendLocationRequest">
            <summary>Use this method to send point on the map.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SendLocationRequest.#ctor">
            <summary>Use this method to send point on the map.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.Latitude">
            <summary>Latitude of the location</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.Longitude">
            <summary>Longitude of the location</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.HorizontalAccuracy">
            <summary>The radius of uncertainty for the location, measured in meters; 0-1500</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.LivePeriod">
            <summary>Period in seconds during which the location will be updated (see <a href="https://telegram.org/blog/live-locations">Live Locations</a>, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.Heading">
            <summary>For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.ProximityAlertRadius">
            <summary>For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.DisableNotification">
            <summary>Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.ProtectContent">
            <summary>Protects the contents of the sent message from forwarding and saving</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.AllowPaidBroadcast">
            <summary>Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.MessageEffectId">
            <summary>Unique identifier of the message effect to be added to the message; for private chats only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.ReplyParameters">
            <summary>Description of the message to reply to</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.ReplyMarkup">
            <summary>Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendLocationRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message will be sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SendVenueRequest">
            <summary>Use this method to send information about a venue.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SendVenueRequest.#ctor">
            <summary>Use this method to send information about a venue.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.Latitude">
            <summary>Latitude of the venue</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.Longitude">
            <summary>Longitude of the venue</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.Title">
            <summary>Name of the venue</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.Address">
            <summary>Address of the venue</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.FoursquareId">
            <summary>Foursquare identifier of the venue</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.FoursquareType">
            <summary>Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.GooglePlaceId">
            <summary>Google Places identifier of the venue</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.GooglePlaceType">
            <summary>Google Places type of the venue. (See <a href="https://developers.google.com/places/web-service/supported_types">supported types</a>.)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.DisableNotification">
            <summary>Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.ProtectContent">
            <summary>Protects the contents of the sent message from forwarding and saving</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.AllowPaidBroadcast">
            <summary>Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.MessageEffectId">
            <summary>Unique identifier of the message effect to be added to the message; for private chats only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.ReplyParameters">
            <summary>Description of the message to reply to</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.ReplyMarkup">
            <summary>Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVenueRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message will be sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.StopInlineMessageLiveLocationRequest">
            <summary>Use this method to stop updating a live location message before <em>LivePeriod</em> expires.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.StopInlineMessageLiveLocationRequest.#ctor">
            <summary>Use this method to stop updating a live location message before <em>LivePeriod</em> expires.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.StopInlineMessageLiveLocationRequest.InlineMessageId">
            <summary>Identifier of the inline message</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.StopInlineMessageLiveLocationRequest.ReplyMarkup">
            <summary>An object for a new <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.StopInlineMessageLiveLocationRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message to be edited was sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.StopMessageLiveLocationRequest">
            <summary>Use this method to stop updating a live location message before <em>LivePeriod</em> expires.<para>Returns: The edited <see cref="T:Telegram.Bot.Types.Message"/> is returned</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.StopMessageLiveLocationRequest.#ctor">
            <summary>Use this method to stop updating a live location message before <em>LivePeriod</em> expires.<para>Returns: The edited <see cref="T:Telegram.Bot.Types.Message"/> is returned</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.StopMessageLiveLocationRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.StopMessageLiveLocationRequest.MessageId">
            <summary>Identifier of the message with live location to stop</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.StopMessageLiveLocationRequest.ReplyMarkup">
            <summary>An object for a new <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.StopMessageLiveLocationRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message to be edited was sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SendAnimationRequest">
            <summary>Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound).<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
            <remarks>Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.</remarks>
        </member>
        <member name="M:Telegram.Bot.Requests.SendAnimationRequest.#ctor">
            <summary>Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound).<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
            <remarks>Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.</remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.Animation">
            <summary>Animation to send. Pass a FileId as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.Duration">
            <summary>Duration of sent animation in seconds</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.Width">
            <summary>Animation width</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.Height">
            <summary>Animation height</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.Thumbnail">
            <summary>Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. Thumbnails can't be reused and can be only uploaded as a new file, so you can use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.Caption">
            <summary>Animation caption (may also be used when resending animation by <em>FileId</em>), 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.ParseMode">
            <summary>Mode for parsing entities in the animation caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.CaptionEntities">
            <summary>A list of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Requests.SendAnimationRequest.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.ShowCaptionAboveMedia">
            <summary>Pass <see langword="true"/>, if the caption must be shown above the message media</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.HasSpoiler">
            <summary>Pass <see langword="true"/> if the animation needs to be covered with a spoiler animation</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.DisableNotification">
            <summary>Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.ProtectContent">
            <summary>Protects the contents of the sent message from forwarding and saving</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.AllowPaidBroadcast">
            <summary>Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.MessageEffectId">
            <summary>Unique identifier of the message effect to be added to the message; for private chats only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.ReplyParameters">
            <summary>Description of the message to reply to</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.ReplyMarkup">
            <summary>Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAnimationRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message will be sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SendAudioRequest">
            <summary>Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
            <remarks>Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.<br/>For sending voice messages, use the <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendVoice(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">SendVoice</see> method instead.</remarks>
        </member>
        <member name="M:Telegram.Bot.Requests.SendAudioRequest.#ctor">
            <summary>Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
            <remarks>Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.<br/>For sending voice messages, use the <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendVoice(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">SendVoice</see> method instead.</remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.Audio">
            <summary>Audio file to send. Pass a FileId as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.Caption">
            <summary>Audio caption, 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.ParseMode">
            <summary>Mode for parsing entities in the audio caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.CaptionEntities">
            <summary>A list of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Requests.SendAudioRequest.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.Duration">
            <summary>Duration of the audio in seconds</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.Performer">
            <summary>Performer</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.Title">
            <summary>Track name</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.Thumbnail">
            <summary>Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. Thumbnails can't be reused and can be only uploaded as a new file, so you can use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.DisableNotification">
            <summary>Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.ProtectContent">
            <summary>Protects the contents of the sent message from forwarding and saving</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.AllowPaidBroadcast">
            <summary>Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.MessageEffectId">
            <summary>Unique identifier of the message effect to be added to the message; for private chats only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.ReplyParameters">
            <summary>Description of the message to reply to</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.ReplyMarkup">
            <summary>Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendAudioRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message will be sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SendChatActionRequest">
            <summary>Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status).<br/>We only recommend using this method when a response from the bot will take a <b>noticeable</b> amount of time to arrive.<para>Returns: </para></summary>
            <remarks>Example: The <a href="https://t.me/imagebot">ImageBot</a> needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendChatAction(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.Enums.ChatAction,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">SendChatAction</see> with <see cref="P:Telegram.Bot.Requests.SendChatActionRequest.Action">Action</see> = <em>UploadPhoto</em>. The user will see a “sending photo” status for the bot.</remarks>
        </member>
        <member name="M:Telegram.Bot.Requests.SendChatActionRequest.#ctor">
            <summary>Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status).<br/>We only recommend using this method when a response from the bot will take a <b>noticeable</b> amount of time to arrive.<para>Returns: </para></summary>
            <remarks>Example: The <a href="https://t.me/imagebot">ImageBot</a> needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendChatAction(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.Enums.ChatAction,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">SendChatAction</see> with <see cref="P:Telegram.Bot.Requests.SendChatActionRequest.Action">Action</see> = <em>UploadPhoto</em>. The user will see a “sending photo” status for the bot.</remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.SendChatActionRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendChatActionRequest.Action">
            <summary>Type of action to broadcast. Choose one, depending on what the user is about to receive: <em>typing</em> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendMessage(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,Telegram.Bot.Types.LinkPreviewOptions,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">text messages</see>, <em>UploadPhoto</em> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendPhoto(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">photos</see>, <em>RecordVideo</em> or <em>UploadVideo</em> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendVideo(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">videos</see>, <em>RecordVoice</em> or <em>UploadVoice</em> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendVoice(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">voice notes</see>, <em>UploadDocument</em> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendDocument(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,System.String,Telegram.Bot.Types.Enums.ParseMode,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.MessageEntity},System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">general files</see>, <em>ChooseSticker</em> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendSticker(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">stickers</see>, <em>FindLocation</em> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendLocation(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Double,System.Double,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">location data</see>, <em>RecordVideoNote</em> or <em>UploadVideoNote</em> for <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SendVideoNote(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,Telegram.Bot.Types.InputFile,Telegram.Bot.Types.ReplyParameters,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Nullable{System.Int32},System.Nullable{System.Int32},Telegram.Bot.Types.InputFile,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">video notes</see>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendChatActionRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread; for supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendChatActionRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the action will be sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SendContactRequest">
            <summary>Use this method to send phone contacts.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SendContactRequest.#ctor">
            <summary>Use this method to send phone contacts.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.PhoneNumber">
            <summary>Contact's phone number</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.FirstName">
            <summary>Contact's first name</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.LastName">
            <summary>Contact's last name</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.Vcard">
            <summary>Additional data about the contact in the form of a <a href="https://en.wikipedia.org/wiki/VCard">vCard</a>, 0-2048 bytes</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.DisableNotification">
            <summary>Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.ProtectContent">
            <summary>Protects the contents of the sent message from forwarding and saving</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.AllowPaidBroadcast">
            <summary>Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.MessageEffectId">
            <summary>Unique identifier of the message effect to be added to the message; for private chats only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.ReplyParameters">
            <summary>Description of the message to reply to</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.ReplyMarkup">
            <summary>Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendContactRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message will be sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SendDiceRequest">
            <summary>Use this method to send an animated emoji that will display a random value.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SendDiceRequest.#ctor">
            <summary>Use this method to send an animated emoji that will display a random value.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDiceRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDiceRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDiceRequest.Emoji">
            <summary>Emoji on which the dice throw animation is based. Currently, must be one of “🎲”, “🎯”, “🏀”, “⚽”, “🎳”, or “🎰”. Dice can have values 1-6 for “🎲”, “🎯” and “🎳”, values 1-5 for “🏀” and “⚽”, and values 1-64 for “🎰”. Defaults to “🎲”</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDiceRequest.DisableNotification">
            <summary>Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDiceRequest.ProtectContent">
            <summary>Protects the contents of the sent message from forwarding</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDiceRequest.AllowPaidBroadcast">
            <summary>Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDiceRequest.MessageEffectId">
            <summary>Unique identifier of the message effect to be added to the message; for private chats only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDiceRequest.ReplyParameters">
            <summary>Description of the message to reply to</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDiceRequest.ReplyMarkup">
            <summary>Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDiceRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message will be sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SendDocumentRequest">
            <summary>Use this method to send general files.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
            <remarks>Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.</remarks>
        </member>
        <member name="M:Telegram.Bot.Requests.SendDocumentRequest.#ctor">
            <summary>Use this method to send general files.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
            <remarks>Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.</remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.Document">
            <summary>File to send. Pass a FileId as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.Thumbnail">
            <summary>Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. Thumbnails can't be reused and can be only uploaded as a new file, so you can use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.Caption">
            <summary>Document caption (may also be used when resending documents by <em>FileId</em>), 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.ParseMode">
            <summary>Mode for parsing entities in the document caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.CaptionEntities">
            <summary>A list of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Requests.SendDocumentRequest.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.DisableContentTypeDetection">
            <summary>Disables automatic server-side content type detection for files uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.DisableNotification">
            <summary>Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.ProtectContent">
            <summary>Protects the contents of the sent message from forwarding and saving</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.AllowPaidBroadcast">
            <summary>Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.MessageEffectId">
            <summary>Unique identifier of the message effect to be added to the message; for private chats only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.ReplyParameters">
            <summary>Description of the message to reply to</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.ReplyMarkup">
            <summary>Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendDocumentRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message will be sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SendMediaGroupRequest">
            <summary>Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type.<para>Returns: An array of <see cref="T:Telegram.Bot.Types.Message">Messages</see> that were sent is returned.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SendMediaGroupRequest.#ctor">
            <summary>Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type.<para>Returns: An array of <see cref="T:Telegram.Bot.Types.Message">Messages</see> that were sent is returned.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMediaGroupRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMediaGroupRequest.Media">
            <summary>A array describing messages to be sent, must include 2-10 items</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMediaGroupRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMediaGroupRequest.DisableNotification">
            <summary>Sends messages <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMediaGroupRequest.ProtectContent">
            <summary>Protects the contents of the sent messages from forwarding and saving</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMediaGroupRequest.AllowPaidBroadcast">
            <summary>Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMediaGroupRequest.MessageEffectId">
            <summary>Unique identifier of the message effect to be added to the message; for private chats only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMediaGroupRequest.ReplyParameters">
            <summary>Description of the message to reply to</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMediaGroupRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message will be sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SendMessageRequest">
            <summary>Use this method to send text messages.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SendMessageRequest.#ctor">
            <summary>Use this method to send text messages.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.Text">
            <summary>Text of the message to be sent, 1-4096 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.ParseMode">
            <summary>Mode for parsing entities in the message text. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.Entities">
            <summary>A list of special entities that appear in message text, which can be specified instead of <see cref="P:Telegram.Bot.Requests.SendMessageRequest.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.LinkPreviewOptions">
            <summary>Link preview generation options for the message</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.DisableNotification">
            <summary>Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.ProtectContent">
            <summary>Protects the contents of the sent message from forwarding and saving</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.AllowPaidBroadcast">
            <summary>Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.MessageEffectId">
            <summary>Unique identifier of the message effect to be added to the message; for private chats only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.ReplyParameters">
            <summary>Description of the message to reply to</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.ReplyMarkup">
            <summary>Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendMessageRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message will be sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SendPhotoRequest">
            <summary>Use this method to send photos.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SendPhotoRequest.#ctor">
            <summary>Use this method to send photos.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.Photo">
            <summary>Photo to send. Pass a FileId as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.Caption">
            <summary>Photo caption (may also be used when resending photos by <em>FileId</em>), 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.ParseMode">
            <summary>Mode for parsing entities in the photo caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.CaptionEntities">
            <summary>A list of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Requests.SendPhotoRequest.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.ShowCaptionAboveMedia">
            <summary>Pass <see langword="true"/>, if the caption must be shown above the message media</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.HasSpoiler">
            <summary>Pass <see langword="true"/> if the photo needs to be covered with a spoiler animation</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.DisableNotification">
            <summary>Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.ProtectContent">
            <summary>Protects the contents of the sent message from forwarding and saving</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.AllowPaidBroadcast">
            <summary>Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.MessageEffectId">
            <summary>Unique identifier of the message effect to be added to the message; for private chats only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.ReplyParameters">
            <summary>Description of the message to reply to</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.ReplyMarkup">
            <summary>Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPhotoRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message will be sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SendPollRequest">
            <summary>Use this method to send a native poll.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SendPollRequest.#ctor">
            <summary>Use this method to send a native poll.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.Question">
            <summary>Poll question, 1-300 characters</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.Options">
            <summary>A list of 2-10 answer options</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.QuestionParseMode">
            <summary>Mode for parsing entities in the question. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details. Currently, only custom emoji entities are allowed</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.QuestionEntities">
            <summary>A list of special entities that appear in the poll question. It can be specified instead of <see cref="P:Telegram.Bot.Requests.SendPollRequest.QuestionParseMode">QuestionParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.IsAnonymous">
            <summary><see langword="true"/>, if the poll needs to be anonymous, defaults to <see langword="true"/></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.Type">
            <summary>Poll type, <see cref="F:Telegram.Bot.Types.Enums.PollType.Quiz">Quiz</see> or <see cref="F:Telegram.Bot.Types.Enums.PollType.Regular">Regular</see>, defaults to <see cref="F:Telegram.Bot.Types.Enums.PollType.Regular">Regular</see></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.AllowsMultipleAnswers">
            <summary><see langword="true"/>, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to <see langword="false"/></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.CorrectOptionId">
            <summary>0-based identifier of the correct answer option, required for polls in quiz mode</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.Explanation">
            <summary>Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.ExplanationParseMode">
            <summary>Mode for parsing entities in the explanation. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.ExplanationEntities">
            <summary>A list of special entities that appear in the poll explanation. It can be specified instead of <see cref="P:Telegram.Bot.Requests.SendPollRequest.ExplanationParseMode">ExplanationParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.OpenPeriod">
            <summary>Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with <see cref="P:Telegram.Bot.Requests.SendPollRequest.CloseDate">CloseDate</see>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.CloseDate">
            <summary>Point in time when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with <see cref="P:Telegram.Bot.Requests.SendPollRequest.OpenPeriod">OpenPeriod</see>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.IsClosed">
            <summary>Pass <see langword="true"/> if the poll needs to be immediately closed. This can be useful for poll preview.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.DisableNotification">
            <summary>Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.ProtectContent">
            <summary>Protects the contents of the sent message from forwarding and saving</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.AllowPaidBroadcast">
            <summary>Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.MessageEffectId">
            <summary>Unique identifier of the message effect to be added to the message; for private chats only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.ReplyParameters">
            <summary>Description of the message to reply to</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.ReplyMarkup">
            <summary>Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPollRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message will be sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SendVideoNoteRequest">
            <summary>As of <a href="https://telegram.org/blog/video-messages-and-telescope">v.4.0</a>, Telegram clients support rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SendVideoNoteRequest.#ctor">
            <summary>As of <a href="https://telegram.org/blog/video-messages-and-telescope">v.4.0</a>, Telegram clients support rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.VideoNote">
            <summary>Video note to send. Pass a FileId as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a>. Sending video notes by a URL is currently unsupported</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.Duration">
            <summary>Duration of sent video in seconds</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.Length">
            <summary>Video width and height, i.e. diameter of the video message</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.Thumbnail">
            <summary>Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. Thumbnails can't be reused and can be only uploaded as a new file, so you can use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.DisableNotification">
            <summary>Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.ProtectContent">
            <summary>Protects the contents of the sent message from forwarding and saving</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.AllowPaidBroadcast">
            <summary>Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.MessageEffectId">
            <summary>Unique identifier of the message effect to be added to the message; for private chats only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.ReplyParameters">
            <summary>Description of the message to reply to</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.ReplyMarkup">
            <summary>Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoNoteRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message will be sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SendVideoRequest">
            <summary>Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as <see cref="T:Telegram.Bot.Types.Document"/>).<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
            <remarks>Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.</remarks>
        </member>
        <member name="M:Telegram.Bot.Requests.SendVideoRequest.#ctor">
            <summary>Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as <see cref="T:Telegram.Bot.Types.Document"/>).<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
            <remarks>Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.</remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.Video">
            <summary>Video to send. Pass a FileId as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.Duration">
            <summary>Duration of sent video in seconds</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.Width">
            <summary>Video width</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.Height">
            <summary>Video height</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.Thumbnail">
            <summary>Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. Thumbnails can't be reused and can be only uploaded as a new file, so you can use <see cref="M:Telegram.Bot.Types.InputFileStream.#ctor(System.IO.Stream,System.String)"/> with a specific filename. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.Caption">
            <summary>Video caption (may also be used when resending videos by <em>FileId</em>), 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.ParseMode">
            <summary>Mode for parsing entities in the video caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.CaptionEntities">
            <summary>A list of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Requests.SendVideoRequest.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.ShowCaptionAboveMedia">
            <summary>Pass <see langword="true"/>, if the caption must be shown above the message media</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.HasSpoiler">
            <summary>Pass <see langword="true"/> if the video needs to be covered with a spoiler animation</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.SupportsStreaming">
            <summary>Pass <see langword="true"/> if the uploaded video is suitable for streaming</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.DisableNotification">
            <summary>Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.ProtectContent">
            <summary>Protects the contents of the sent message from forwarding and saving</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.AllowPaidBroadcast">
            <summary>Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.MessageEffectId">
            <summary>Unique identifier of the message effect to be added to the message; for private chats only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.ReplyParameters">
            <summary>Description of the message to reply to</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.ReplyMarkup">
            <summary>Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVideoRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message will be sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SendVoiceRequest">
            <summary>Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS, or in .MP3 format, or in .M4A format (other formats may be sent as <see cref="T:Telegram.Bot.Types.Audio"/> or <see cref="T:Telegram.Bot.Types.Document"/>).<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
            <remarks>Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.</remarks>
        </member>
        <member name="M:Telegram.Bot.Requests.SendVoiceRequest.#ctor">
            <summary>Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS, or in .MP3 format, or in .M4A format (other formats may be sent as <see cref="T:Telegram.Bot.Types.Audio"/> or <see cref="T:Telegram.Bot.Types.Document"/>).<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
            <remarks>Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.</remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.Voice">
            <summary>Audio file to send. Pass a FileId as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.Caption">
            <summary>Voice message caption, 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.ParseMode">
            <summary>Mode for parsing entities in the voice message caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.CaptionEntities">
            <summary>A list of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Requests.SendVoiceRequest.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.Duration">
            <summary>Duration of the voice message in seconds</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.DisableNotification">
            <summary>Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.ProtectContent">
            <summary>Protects the contents of the sent message from forwarding and saving</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.AllowPaidBroadcast">
            <summary>Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.MessageEffectId">
            <summary>Unique identifier of the message effect to be added to the message; for private chats only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.ReplyParameters">
            <summary>Description of the message to reply to</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.ReplyMarkup">
            <summary>Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendVoiceRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message will be sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetMessageReactionRequest">
            <summary>Use this method to change the chosen reactions on a message. Service messages can't be reacted to. Automatically forwarded messages from a channel to its discussion group have the same available reactions as messages in the channel. Bots can't use paid reactions.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetMessageReactionRequest.#ctor">
            <summary>Use this method to change the chosen reactions on a message. Service messages can't be reacted to. Automatically forwarded messages from a channel to its discussion group have the same available reactions as messages in the channel. Bots can't use paid reactions.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetMessageReactionRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetMessageReactionRequest.MessageId">
            <summary>Identifier of the target message. If the message belongs to a media group, the reaction is set to the first non-deleted message in the group instead.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetMessageReactionRequest.Reaction">
            <summary>A list of reaction types to set on the message. Currently, as non-premium users, bots can set up to one reaction per message. A custom emoji reaction can be used if it is either already present on the message or explicitly allowed by chat administrators. Paid reactions can't be used by bots.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetMessageReactionRequest.IsBig">
            <summary>Pass <see langword="true"/> to set the reaction with a big animation</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SendPaidMediaRequest">
            <summary>Use this method to send paid media.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SendPaidMediaRequest.#ctor">
            <summary>Use this method to send paid media.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPaidMediaRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>). If the chat is a channel, all Telegram Star proceeds from this media will be credited to the chat's balance. Otherwise, they will be credited to the bot's balance.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPaidMediaRequest.StarCount">
            <summary>The number of Telegram Stars that must be paid to buy access to the media; 1-2500</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPaidMediaRequest.Media">
            <summary>A array describing the media to be sent; up to 10 items</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPaidMediaRequest.Payload">
            <summary>Bot-defined paid media payload, 0-128 bytes. This will not be displayed to the user, use it for your internal processes.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPaidMediaRequest.Caption">
            <summary>Media caption, 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPaidMediaRequest.ParseMode">
            <summary>Mode for parsing entities in the media caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPaidMediaRequest.CaptionEntities">
            <summary>A list of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Requests.SendPaidMediaRequest.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPaidMediaRequest.ShowCaptionAboveMedia">
            <summary>Pass <see langword="true"/>, if the caption must be shown above the message media</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPaidMediaRequest.DisableNotification">
            <summary>Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPaidMediaRequest.ProtectContent">
            <summary>Protects the contents of the sent message from forwarding and saving</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPaidMediaRequest.AllowPaidBroadcast">
            <summary>Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPaidMediaRequest.ReplyParameters">
            <summary>Description of the message to reply to</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPaidMediaRequest.ReplyMarkup">
            <summary>Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendPaidMediaRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message will be sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetChatMenuButtonRequest">
            <summary>Use this method to change the bot's menu button in a private chat, or the default menu button.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetChatMenuButtonRequest.#ctor">
            <summary>Use this method to change the bot's menu button in a private chat, or the default menu button.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatMenuButtonRequest.ChatId">
            <summary>Unique identifier for the target private chat. If not specified, default bot's menu button will be changed</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetChatMenuButtonRequest.MenuButton">
            <summary>An object for the bot's new menu button. Defaults to <see cref="T:Telegram.Bot.Types.MenuButtonDefault"/></summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetMyDefaultAdministratorRightsRequest">
            <summary>Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels. These rights will be suggested to users, but they are free to modify the list before adding the bot.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetMyDefaultAdministratorRightsRequest.#ctor">
            <summary>Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels. These rights will be suggested to users, but they are free to modify the list before adding the bot.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetMyDefaultAdministratorRightsRequest.Rights">
            <summary>An object describing new default administrator rights. If not specified, the default administrator rights will be cleared.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetMyDefaultAdministratorRightsRequest.ForChannels">
            <summary>Pass <see langword="true"/> to change the default administrator rights of the bot in channels. Otherwise, the default administrator rights of the bot for groups and supergroups will be changed.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetMyNameRequest">
            <summary>Use this method to change the bot's name.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetMyNameRequest.#ctor">
            <summary>Use this method to change the bot's name.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetMyNameRequest.Name">
            <summary>New bot name; 0-64 characters. Pass an empty string to remove the dedicated name for the given language.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetMyNameRequest.LanguageCode">
            <summary>A two-letter ISO 639-1 language code. If empty, the name will be shown to all users for whose language there is no dedicated name.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetUserEmojiStatusRequest">
            <summary>Changes the emoji status for a given user that previously allowed the bot to manage their emoji status via the Mini App method <a href="https://core.telegram.org/bots/webapps#initializing-mini-apps">requestEmojiStatusAccess</a>.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetUserEmojiStatusRequest.#ctor">
            <summary>Changes the emoji status for a given user that previously allowed the bot to manage their emoji status via the Mini App method <a href="https://core.telegram.org/bots/webapps#initializing-mini-apps">requestEmojiStatusAccess</a>.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetUserEmojiStatusRequest.UserId">
            <summary>Unique identifier of the target user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetUserEmojiStatusRequest.EmojiStatusCustomEmojiId">
            <summary>Custom emoji identifier of the emoji status to set. Pass an empty string to remove the status.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetUserEmojiStatusRequest.EmojiStatusExpirationDate">
            <summary>Expiration date of the emoji status, if any</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetMyShortDescriptionRequest">
            <summary>Use this method to get the current bot short description for the given user language.<para>Returns: <see cref="T:Telegram.Bot.Types.BotShortDescription"/> on success.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetMyShortDescriptionRequest.#ctor">
            <summary>Use this method to get the current bot short description for the given user language.<para>Returns: <see cref="T:Telegram.Bot.Types.BotShortDescription"/> on success.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetMyShortDescriptionRequest.LanguageCode">
            <summary>A two-letter ISO 639-1 language code or an empty string</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetMyShortDescriptionRequest">
            <summary>Use this method to change the bot's short description, which is shown on the bot's profile page and is sent together with the link when users share the bot.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetMyShortDescriptionRequest.#ctor">
            <summary>Use this method to change the bot's short description, which is shown on the bot's profile page and is sent together with the link when users share the bot.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetMyShortDescriptionRequest.ShortDescription">
            <summary>New short description for the bot; 0-120 characters. Pass an empty string to remove the dedicated short description for the given language.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetMyShortDescriptionRequest.LanguageCode">
            <summary>A two-letter ISO 639-1 language code. If empty, the short description will be applied to all users for whose language there is no dedicated short description.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.FileRequestBase`1">
            <summary>Represents an API request with a file</summary>
            <typeparam name="TResponse">Type of result expected in result</typeparam>
            <param name="methodName">Bot API method</param>
        </member>
        <member name="M:Telegram.Bot.Requests.FileRequestBase`1.#ctor(System.String)">
            <summary>Represents an API request with a file</summary>
            <typeparam name="TResponse">Type of result expected in result</typeparam>
            <param name="methodName">Bot API method</param>
        </member>
        <member name="M:Telegram.Bot.Requests.FileRequestBase`1.ToHttpContent">
            <inheritdoc/>
        </member>
        <member name="T:Telegram.Bot.Requests.GetGameHighScoresRequest">
            <summary>Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game.<para>Returns: An Array of <see cref="T:Telegram.Bot.Types.GameHighScore"/> objects.</para></summary>
            <remarks>This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and their neighbors are not among them. Please note that this behavior is subject to change.</remarks>
        </member>
        <member name="M:Telegram.Bot.Requests.GetGameHighScoresRequest.#ctor">
            <summary>Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game.<para>Returns: An Array of <see cref="T:Telegram.Bot.Types.GameHighScore"/> objects.</para></summary>
            <remarks>This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and their neighbors are not among them. Please note that this behavior is subject to change.</remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.GetGameHighScoresRequest.UserId">
            <summary>Target user id</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetGameHighScoresRequest.ChatId">
            <summary>Unique identifier for the target chat</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetGameHighScoresRequest.MessageId">
            <summary>Identifier of the sent message</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetGameHighScoresRequest.Telegram#Bot#Requests#Abstractions#IChatTargetable#ChatId">
            <inheritdoc/>
        </member>
        <member name="T:Telegram.Bot.Requests.GetInlineGameHighScoresRequest">
            <summary>Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game.<para>Returns: An Array of <see cref="T:Telegram.Bot.Types.GameHighScore"/> objects.</para></summary>
            <remarks>This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and their neighbors are not among them. Please note that this behavior is subject to change.</remarks>
        </member>
        <member name="M:Telegram.Bot.Requests.GetInlineGameHighScoresRequest.#ctor">
            <summary>Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game.<para>Returns: An Array of <see cref="T:Telegram.Bot.Types.GameHighScore"/> objects.</para></summary>
            <remarks>This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and their neighbors are not among them. Please note that this behavior is subject to change.</remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.GetInlineGameHighScoresRequest.UserId">
            <summary>Target user id</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetInlineGameHighScoresRequest.InlineMessageId">
            <summary>Identifier of the inline message</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SendGameRequest">
            <summary>Use this method to send a game.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SendGameRequest.#ctor">
            <summary>Use this method to send a game.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGameRequest.ChatId">
            <summary>Unique identifier for the target chat</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGameRequest.GameShortName">
            <summary>Short name of the game, serves as the unique identifier for the game. Set up your games via <a href="https://t.me/botfather">@BotFather</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGameRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGameRequest.DisableNotification">
            <summary>Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGameRequest.ProtectContent">
            <summary>Protects the contents of the sent message from forwarding and saving</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGameRequest.AllowPaidBroadcast">
            <summary>Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGameRequest.MessageEffectId">
            <summary>Unique identifier of the message effect to be added to the message; for private chats only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGameRequest.ReplyParameters">
            <summary>Description of the message to reply to</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGameRequest.ReplyMarkup">
            <summary>An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>. If empty, one 'Play GameTitle' button will be shown. If not empty, the first button must launch the game.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGameRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message will be sent</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGameRequest.Telegram#Bot#Requests#Abstractions#IChatTargetable#ChatId">
            <inheritdoc/>
        </member>
        <member name="T:Telegram.Bot.Requests.SetGameScoreRequest">
            <summary>Use this method to set the score of the specified user in a game message.<para>Returns: The <see cref="T:Telegram.Bot.Types.Message"/> is returned</para></summary>
            <remarks>Returns an error, if the new score is not greater than the user's current score in the chat and <see cref="P:Telegram.Bot.Requests.SetGameScoreRequest.Force">Force</see> is <em>False</em>.</remarks>
        </member>
        <member name="M:Telegram.Bot.Requests.SetGameScoreRequest.#ctor">
            <summary>Use this method to set the score of the specified user in a game message.<para>Returns: The <see cref="T:Telegram.Bot.Types.Message"/> is returned</para></summary>
            <remarks>Returns an error, if the new score is not greater than the user's current score in the chat and <see cref="P:Telegram.Bot.Requests.SetGameScoreRequest.Force">Force</see> is <em>False</em>.</remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.SetGameScoreRequest.UserId">
            <summary>User identifier</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetGameScoreRequest.Score">
            <summary>New score, must be non-negative</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetGameScoreRequest.ChatId">
            <summary>Unique identifier for the target chat</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetGameScoreRequest.MessageId">
            <summary>Identifier of the sent message</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetGameScoreRequest.Force">
            <summary>Pass <see langword="true"/> if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetGameScoreRequest.DisableEditMessage">
            <summary>Pass <see langword="true"/> if the game message should not be automatically edited to include the current scoreboard</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetGameScoreRequest.Telegram#Bot#Requests#Abstractions#IChatTargetable#ChatId">
            <inheritdoc/>
        </member>
        <member name="T:Telegram.Bot.Requests.SetInlineGameScoreRequest">
            <summary>Use this method to set the score of the specified user in a game message.<para>Returns: </para></summary>
            <remarks>Returns an error, if the new score is not greater than the user's current score in the chat and <see cref="P:Telegram.Bot.Requests.SetInlineGameScoreRequest.Force">Force</see> is <em>False</em>.</remarks>
        </member>
        <member name="M:Telegram.Bot.Requests.SetInlineGameScoreRequest.#ctor">
            <summary>Use this method to set the score of the specified user in a game message.<para>Returns: </para></summary>
            <remarks>Returns an error, if the new score is not greater than the user's current score in the chat and <see cref="P:Telegram.Bot.Requests.SetInlineGameScoreRequest.Force">Force</see> is <em>False</em>.</remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.SetInlineGameScoreRequest.UserId">
            <summary>User identifier</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetInlineGameScoreRequest.Score">
            <summary>New score, must be non-negative</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetInlineGameScoreRequest.InlineMessageId">
            <summary>Identifier of the inline message</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetInlineGameScoreRequest.Force">
            <summary>Pass <see langword="true"/> if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetInlineGameScoreRequest.DisableEditMessage">
            <summary>Pass <see langword="true"/> if the game message should not be automatically edited to include the current scoreboard</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.DeleteWebhookRequest">
            <summary>Use this method to remove webhook integration if you decide to switch back to <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdates(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)">GetUpdates</see>.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.DeleteWebhookRequest.#ctor">
            <summary>Use this method to remove webhook integration if you decide to switch back to <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdates(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)">GetUpdates</see>.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteWebhookRequest.DropPendingUpdates">
            <summary>Pass <see langword="true"/> to drop all pending updates</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetUpdatesRequest">
            <summary>Use this method to receive incoming updates using long polling (<a href="https://en.wikipedia.org/wiki/Push_technology#Long_polling">wiki</a>).<para>Returns: An Array of <see cref="T:Telegram.Bot.Types.Update"/> objects.</para></summary>
            <remarks><b>Notes</b><br/><b>1.</b> This method will not work if an outgoing webhook is set up.<br/><b>2.</b> In order to avoid getting duplicate updates, recalculate <see cref="P:Telegram.Bot.Requests.GetUpdatesRequest.Offset">Offset</see> after each server response.</remarks>
        </member>
        <member name="M:Telegram.Bot.Requests.GetUpdatesRequest.#ctor">
            <summary>Use this method to receive incoming updates using long polling (<a href="https://en.wikipedia.org/wiki/Push_technology#Long_polling">wiki</a>).<para>Returns: An Array of <see cref="T:Telegram.Bot.Types.Update"/> objects.</para></summary>
            <remarks><b>Notes</b><br/><b>1.</b> This method will not work if an outgoing webhook is set up.<br/><b>2.</b> In order to avoid getting duplicate updates, recalculate <see cref="P:Telegram.Bot.Requests.GetUpdatesRequest.Offset">Offset</see> after each server response.</remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.GetUpdatesRequest.Offset">
            <summary>Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdates(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)">GetUpdates</see> is called with an <see cref="P:Telegram.Bot.Requests.GetUpdatesRequest.Offset">Offset</see> higher than its <em>UpdateId</em>. The negative offset can be specified to retrieve updates starting from <em>-offset</em> update from the end of the updates queue. All previous updates will be forgotten.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetUpdatesRequest.Limit">
            <summary>Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetUpdatesRequest.Timeout">
            <summary>Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetUpdatesRequest.AllowedUpdates">
            <summary>A list of the update types you want your bot to receive. For example, specify <c>["message", "EditedChannelPost", "CallbackQuery"]</c> to only receive updates of these types. See <see cref="T:Telegram.Bot.Types.Update"/> for a complete list of available update types. Specify an empty list to receive all update types except <em>ChatMember</em>, <em>MessageReaction</em>, and <em>MessageReactionCount</em> (default). If not specified, the previous setting will be used.<br/><br/>Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetWebhookInfoRequest">
            <summary>Use this method to get current webhook status.<para>Returns: A <see cref="T:Telegram.Bot.Types.WebhookInfo"/> object. If the bot is using <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdates(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)">GetUpdates</see>, will return an object with the <em>url</em> field empty.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetWebhookInfoRequest.#ctor">
            <summary>Use this method to get current webhook status.<para>Returns: A <see cref="T:Telegram.Bot.Types.WebhookInfo"/> object. If the bot is using <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdates(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)">GetUpdates</see>, will return an object with the <em>url</em> field empty.</para></summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetWebhookRequest">
            <summary>Use this method to specify a URL and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized <see cref="T:Telegram.Bot.Types.Update"/>. In case of an unsuccessful request, we will give up after a reasonable amount of attempts.<br/>If you'd like to make sure that the webhook was set by you, you can specify secret data in the parameter <see cref="P:Telegram.Bot.Requests.SetWebhookRequest.SecretToken">SecretToken</see>. If specified, the request will contain a header “X-Telegram-Bot-Api-Secret-Token” with the secret token as content.<para>Returns: </para></summary>
            <remarks><p><b>Notes</b><br/><b>1.</b> You will not be able to receive updates using <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdates(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)">GetUpdates</see> for as long as an outgoing webhook is set up.<br/><b>2.</b> To use a self-signed certificate, you need to upload your <a href="https://core.telegram.org/bots/self-signed">public key certificate</a> using <see cref="P:Telegram.Bot.Requests.SetWebhookRequest.Certificate">Certificate</see> parameter. Please upload as InputFile, sending a String will not work.<br/><b>3.</b> Ports currently supported <em>for webhooks</em>: <b>443, 80, 88, 8443</b>.</p><p>If you're having any trouble setting up webhooks, please check out this <a href="https://core.telegram.org/bots/webhooks">amazing guide to webhooks</a>.</p></remarks>
        </member>
        <member name="M:Telegram.Bot.Requests.SetWebhookRequest.#ctor">
            <summary>Use this method to specify a URL and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized <see cref="T:Telegram.Bot.Types.Update"/>. In case of an unsuccessful request, we will give up after a reasonable amount of attempts.<br/>If you'd like to make sure that the webhook was set by you, you can specify secret data in the parameter <see cref="P:Telegram.Bot.Requests.SetWebhookRequest.SecretToken">SecretToken</see>. If specified, the request will contain a header “X-Telegram-Bot-Api-Secret-Token” with the secret token as content.<para>Returns: </para></summary>
            <remarks><p><b>Notes</b><br/><b>1.</b> You will not be able to receive updates using <see cref="M:Telegram.Bot.TelegramBotClientExtensions.GetUpdates(Telegram.Bot.ITelegramBotClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Telegram.Bot.Types.Enums.UpdateType},System.Threading.CancellationToken)">GetUpdates</see> for as long as an outgoing webhook is set up.<br/><b>2.</b> To use a self-signed certificate, you need to upload your <a href="https://core.telegram.org/bots/self-signed">public key certificate</a> using <see cref="P:Telegram.Bot.Requests.SetWebhookRequest.Certificate">Certificate</see> parameter. Please upload as InputFile, sending a String will not work.<br/><b>3.</b> Ports currently supported <em>for webhooks</em>: <b>443, 80, 88, 8443</b>.</p><p>If you're having any trouble setting up webhooks, please check out this <a href="https://core.telegram.org/bots/webhooks">amazing guide to webhooks</a>.</p></remarks>
        </member>
        <member name="P:Telegram.Bot.Requests.SetWebhookRequest.Url">
            <summary>HTTPS URL to send updates to. Use an empty string to remove webhook integration</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetWebhookRequest.Certificate">
            <summary>Upload your public key certificate so that the root certificate in use can be checked. See our <a href="https://core.telegram.org/bots/self-signed">self-signed guide</a> for details.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetWebhookRequest.IpAddress">
            <summary>The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetWebhookRequest.MaxConnections">
            <summary>The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to <em>40</em>. Use lower values to limit the load on your bot's server, and higher values to increase your bot's throughput.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetWebhookRequest.AllowedUpdates">
            <summary>A list of the update types you want your bot to receive. For example, specify <c>["message", "EditedChannelPost", "CallbackQuery"]</c> to only receive updates of these types. See <see cref="T:Telegram.Bot.Types.Update"/> for a complete list of available update types. Specify an empty list to receive all update types except <em>ChatMember</em>, <em>MessageReaction</em>, and <em>MessageReactionCount</em> (default). If not specified, the previous setting will be used.<br/>Please note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetWebhookRequest.DropPendingUpdates">
            <summary>Pass <see langword="true"/> to drop all pending updates</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetWebhookRequest.SecretToken">
            <summary>A secret token to be sent in a header “X-Telegram-Bot-Api-Secret-Token” in every webhook request, 1-256 characters. Only characters <c>A-Z</c>, <c>a-z</c>, <c>0-9</c>, <c>_</c> and <c>-</c> are allowed. The header is useful to ensure that the request comes from a webhook set by you.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.AnswerInlineQueryRequest">
            <summary>Use this method to send answers to an inline query<br/>No more than <b>50</b> results per query are allowed.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.AnswerInlineQueryRequest.#ctor">
            <summary>Use this method to send answers to an inline query<br/>No more than <b>50</b> results per query are allowed.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerInlineQueryRequest.InlineQueryId">
            <summary>Unique identifier for the answered query</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerInlineQueryRequest.Results">
            <summary>A array of results for the inline query</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerInlineQueryRequest.CacheTime">
            <summary>The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerInlineQueryRequest.IsPersonal">
            <summary>Pass <see langword="true"/> if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerInlineQueryRequest.NextOffset">
            <summary>Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerInlineQueryRequest.Button">
            <summary>An object describing a button to be shown above inline query results</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.AnswerWebAppQueryRequest">
            <summary>Use this method to set the result of an interaction with a <a href="https://core.telegram.org/bots/webapps">Web App</a> and send a corresponding message on behalf of the user to the chat from which the query originated.<para>Returns: A <see cref="T:Telegram.Bot.Types.SentWebAppMessage"/> object is returned.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.AnswerWebAppQueryRequest.#ctor">
            <summary>Use this method to set the result of an interaction with a <a href="https://core.telegram.org/bots/webapps">Web App</a> and send a corresponding message on behalf of the user to the chat from which the query originated.<para>Returns: A <see cref="T:Telegram.Bot.Types.SentWebAppMessage"/> object is returned.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerWebAppQueryRequest.WebAppQueryId">
            <summary>Unique identifier for the query to be answered</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerWebAppQueryRequest.Result">
            <summary>An object describing the message to be sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SavePreparedInlineMessageRequest">
            <summary>Stores a message that can be sent by a user of a Mini App.<para>Returns: A <see cref="T:Telegram.Bot.Types.PreparedInlineMessage"/> object.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SavePreparedInlineMessageRequest.#ctor">
            <summary>Stores a message that can be sent by a user of a Mini App.<para>Returns: A <see cref="T:Telegram.Bot.Types.PreparedInlineMessage"/> object.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SavePreparedInlineMessageRequest.UserId">
            <summary>Unique identifier of the target user that can use the prepared message</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SavePreparedInlineMessageRequest.Result">
            <summary>An object describing the message to be sent</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SavePreparedInlineMessageRequest.AllowUserChats">
            <summary>Pass <see langword="true"/> if the message can be sent to private chats with users</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SavePreparedInlineMessageRequest.AllowBotChats">
            <summary>Pass <see langword="true"/> if the message can be sent to private chats with bots</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SavePreparedInlineMessageRequest.AllowGroupChats">
            <summary>Pass <see langword="true"/> if the message can be sent to group and supergroup chats</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SavePreparedInlineMessageRequest.AllowChannelChats">
            <summary>Pass <see langword="true"/> if the message can be sent to channel chats</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.AnswerPreCheckoutQueryRequest">
            <summary>Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an <see cref="T:Telegram.Bot.Types.Update"/> with the field <em>PreCheckoutQuery</em>. Use this method to respond to such pre-checkout queries <b>Note:</b> The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.AnswerPreCheckoutQueryRequest.#ctor">
            <summary>Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an <see cref="T:Telegram.Bot.Types.Update"/> with the field <em>PreCheckoutQuery</em>. Use this method to respond to such pre-checkout queries <b>Note:</b> The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerPreCheckoutQueryRequest.PreCheckoutQueryId">
            <summary>Unique identifier for the query to be answered</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerPreCheckoutQueryRequest.Ok">
            <summary>Specify <see langword="true"/> if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use <see langword="false"/> if there are any problems.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerPreCheckoutQueryRequest.ErrorMessage">
            <summary>Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.<para/>Leave <see langword="null"/> if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.AnswerShippingQueryRequest">
            <summary>If you sent an invoice requesting a shipping address and the parameter <em>IsFlexible</em> was specified, the Bot API will send an <see cref="T:Telegram.Bot.Types.Update"/> with a <em>ShippingQuery</em> field to the bot. Use this method to reply to shipping queries<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.AnswerShippingQueryRequest.#ctor">
            <summary>If you sent an invoice requesting a shipping address and the parameter <em>IsFlexible</em> was specified, the Bot API will send an <see cref="T:Telegram.Bot.Types.Update"/> with a <em>ShippingQuery</em> field to the bot. Use this method to reply to shipping queries<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerShippingQueryRequest.ShippingQueryId">
            <summary>Unique identifier for the query to be answered</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerShippingQueryRequest.Ok">
            <summary>Pass <see langword="true"/> if delivery to the specified address is possible and <see langword="false"/> if there are any problems (for example, if delivery to the specified address is not possible)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerShippingQueryRequest.ShippingOptions">
            <summary>A array of available shipping options.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AnswerShippingQueryRequest.ErrorMessage">
            <summary>Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.CreateInvoiceLinkRequest">
            <summary>Use this method to create a link for an invoice.<para>Returns: The created invoice link as <em>String</em> on success.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.CreateInvoiceLinkRequest.#ctor">
            <summary>Use this method to create a link for an invoice.<para>Returns: The created invoice link as <em>String</em> on success.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.Title">
            <summary>Product name, 1-32 characters</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.Description">
            <summary>Product description, 1-255 characters</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.Payload">
            <summary>Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.Currency">
            <summary>Three-letter ISO 4217 currency code, see <a href="https://core.telegram.org/bots/payments#supported-currencies">more on currencies</a>. Pass “XTR” for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.Prices">
            <summary>Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.ProviderToken">
            <summary>Payment provider token, obtained via <a href="https://t.me/botfather">@BotFather</a>. Pass an empty string for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.MaxTipAmount">
            <summary>The maximum accepted amount for tips in the <em>smallest units</em> of the currency (integer, <b>not</b> float/double). For example, for a maximum tip of <c>US$ 1.45</c> pass <c><see cref="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.MaxTipAmount">MaxTipAmount</see> = 145</c>. See the <em>exp</em> parameter in <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.SuggestedTipAmounts">
            <summary>A array of suggested amounts of tips in the <em>smallest units</em> of the currency (integer, <b>not</b> float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed <see cref="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.MaxTipAmount">MaxTipAmount</see>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.ProviderData">
            <summary>JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.PhotoUrl">
            <summary>URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.PhotoSize">
            <summary>Photo size in bytes</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.PhotoWidth">
            <summary>Photo width</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.PhotoHeight">
            <summary>Photo height</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.NeedName">
            <summary>Pass <see langword="true"/> if you require the user's full name to complete the order. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.NeedPhoneNumber">
            <summary>Pass <see langword="true"/> if you require the user's phone number to complete the order. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.NeedEmail">
            <summary>Pass <see langword="true"/> if you require the user's email address to complete the order. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.NeedShippingAddress">
            <summary>Pass <see langword="true"/> if you require the user's shipping address to complete the order. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.SendPhoneNumberToProvider">
            <summary>Pass <see langword="true"/> if the user's phone number should be sent to the provider. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.SendEmailToProvider">
            <summary>Pass <see langword="true"/> if the user's email address should be sent to the provider. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.IsFlexible">
            <summary>Pass <see langword="true"/> if the final price depends on the shipping method. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.SubscriptionPeriod">
            <summary>The number of seconds the subscription will be active for before the next payment. The currency must be set to “XTR” (Telegram Stars) if the parameter is used. Currently, it must always be 2592000 (30 days) if specified. Any number of subscriptions can be active for a given bot at the same time, including multiple concurrent subscriptions from the same user. Subscription price must no exceed 2500 Telegram Stars.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateInvoiceLinkRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the link will be created. For payments in <a href="https://t.me/BotNews/90">Telegram Stars</a> only.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.EditUserStarSubscriptionRequest">
            <summary>Allows the bot to cancel or re-enable extension of a subscription paid in Telegram Stars.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.EditUserStarSubscriptionRequest.#ctor">
            <summary>Allows the bot to cancel or re-enable extension of a subscription paid in Telegram Stars.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditUserStarSubscriptionRequest.UserId">
            <summary>Identifier of the user whose subscription will be edited</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditUserStarSubscriptionRequest.TelegramPaymentChargeId">
            <summary>Telegram payment identifier for the subscription</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditUserStarSubscriptionRequest.IsCanceled">
            <summary>Pass <see langword="true"/> to cancel extension of the user subscription; the subscription must be active up to the end of the current subscription period. Pass <see langword="false"/> to allow the user to re-enable a subscription that was previously canceled by the bot.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetStarTransactionsRequest">
            <summary>Returns the bot's Telegram Star transactions in chronological order.<para>Returns: A <see cref="T:Telegram.Bot.Types.Payments.StarTransactions"/> object.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetStarTransactionsRequest.#ctor">
            <summary>Returns the bot's Telegram Star transactions in chronological order.<para>Returns: A <see cref="T:Telegram.Bot.Types.Payments.StarTransactions"/> object.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetStarTransactionsRequest.Offset">
            <summary>Number of transactions to skip in the response</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetStarTransactionsRequest.Limit">
            <summary>The maximum number of transactions to be retrieved. Values between 1-100 are accepted. Defaults to 100.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.RefundStarPaymentRequest">
            <summary>Refunds a successful payment in <a href="https://t.me/BotNews/90">Telegram Stars</a>.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.RefundStarPaymentRequest.#ctor">
            <summary>Refunds a successful payment in <a href="https://t.me/BotNews/90">Telegram Stars</a>.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.RefundStarPaymentRequest.UserId">
            <summary>Identifier of the user whose payment will be refunded</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.RefundStarPaymentRequest.TelegramPaymentChargeId">
            <summary>Telegram payment identifier</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SendInvoiceRequest">
            <summary>Use this method to send invoices.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SendInvoiceRequest.#ctor">
            <summary>Use this method to send invoices.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.Title">
            <summary>Product name, 1-32 characters</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.Description">
            <summary>Product description, 1-255 characters</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.Payload">
            <summary>Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.Currency">
            <summary>Three-letter ISO 4217 currency code, see <a href="https://core.telegram.org/bots/payments#supported-currencies">more on currencies</a>. Pass “XTR” for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.Prices">
            <summary>Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.ProviderToken">
            <summary>Payment provider token, obtained via <a href="https://t.me/botfather">@BotFather</a>. Pass an empty string for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.MaxTipAmount">
            <summary>The maximum accepted amount for tips in the <em>smallest units</em> of the currency (integer, <b>not</b> float/double). For example, for a maximum tip of <c>US$ 1.45</c> pass <c><see cref="P:Telegram.Bot.Requests.SendInvoiceRequest.MaxTipAmount">MaxTipAmount</see> = 145</c>. See the <em>exp</em> parameter in <a href="https://core.telegram.org/bots/payments/currencies.json">currencies.json</a>, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.SuggestedTipAmounts">
            <summary>A array of suggested amounts of tips in the <em>smallest units</em> of the currency (integer, <b>not</b> float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed <see cref="P:Telegram.Bot.Requests.SendInvoiceRequest.MaxTipAmount">MaxTipAmount</see>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.StartParameter">
            <summary>Unique deep-linking parameter. If left empty, <b>forwarded copies</b> of the sent message will have a <em>Pay</em> button, allowing multiple users to pay directly from the forwarded message, using the same invoice. If non-empty, forwarded copies of the sent message will have a <em>URL</em> button with a deep link to the bot (instead of a <em>Pay</em> button), with the value used as the start parameter</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.ProviderData">
            <summary>JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.PhotoUrl">
            <summary>URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.PhotoSize">
            <summary>Photo size in bytes</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.PhotoWidth">
            <summary>Photo width</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.PhotoHeight">
            <summary>Photo height</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.NeedName">
            <summary>Pass <see langword="true"/> if you require the user's full name to complete the order. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.NeedPhoneNumber">
            <summary>Pass <see langword="true"/> if you require the user's phone number to complete the order. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.NeedEmail">
            <summary>Pass <see langword="true"/> if you require the user's email address to complete the order. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.NeedShippingAddress">
            <summary>Pass <see langword="true"/> if you require the user's shipping address to complete the order. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.SendPhoneNumberToProvider">
            <summary>Pass <see langword="true"/> if the user's phone number should be sent to the provider. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.SendEmailToProvider">
            <summary>Pass <see langword="true"/> if the user's email address should be sent to the provider. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.IsFlexible">
            <summary>Pass <see langword="true"/> if the final price depends on the shipping method. Ignored for payments in <a href="https://t.me/BotNews/90">Telegram Stars</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.DisableNotification">
            <summary>Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.ProtectContent">
            <summary>Protects the contents of the sent message from forwarding and saving</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.AllowPaidBroadcast">
            <summary>Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.MessageEffectId">
            <summary>Unique identifier of the message effect to be added to the message; for private chats only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.ReplyParameters">
            <summary>Description of the message to reply to</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendInvoiceRequest.ReplyMarkup">
            <summary>An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>. If empty, one 'Pay <c>total price</c>' button will be shown. If not empty, the first button must be a Pay button.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.RequestBase`1">
            <summary>Represents an API request</summary>
            <typeparam name="TResponse">Type of result expected in result</typeparam>
            <param name="methodName">Bot API method</param>
        </member>
        <member name="M:Telegram.Bot.Requests.RequestBase`1.#ctor(System.String)">
            <summary>Represents an API request</summary>
            <typeparam name="TResponse">Type of result expected in result</typeparam>
            <param name="methodName">Bot API method</param>
        </member>
        <member name="P:Telegram.Bot.Requests.RequestBase`1.HttpMethod">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.Requests.RequestBase`1.MethodName">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.Requests.RequestBase`1.IsWebhookResponse">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.Requests.RequestBase`1.Method">
            <summary><see href="https://core.telegram.org/bots/api#making-requests-when-getting-updates"/></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.RequestBase`1.ToHttpContent">
            <summary>Generate content of HTTP message</summary>
            <returns>Content of HTTP request</returns>
        </member>
        <member name="T:Telegram.Bot.Requests.ParameterlessRequest`1">
            <summary>Represents a request that doesn't require any parameters</summary>
            <param name="methodName">Name of request method</param>
        </member>
        <member name="M:Telegram.Bot.Requests.ParameterlessRequest`1.#ctor(System.String)">
            <summary>Represents a request that doesn't require any parameters</summary>
            <param name="methodName">Name of request method</param>
        </member>
        <member name="M:Telegram.Bot.Requests.ParameterlessRequest`1.ToHttpContent">
            <inheritdoc/>
        </member>
        <member name="T:Telegram.Bot.Requests.AddStickerToSetRequest">
            <summary>Use this method to add a new sticker to a set created by the bot. Emoji sticker sets can have up to 200 stickers. Other sticker sets can have up to 120 stickers.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.AddStickerToSetRequest.#ctor">
            <summary>Use this method to add a new sticker to a set created by the bot. Emoji sticker sets can have up to 200 stickers. Other sticker sets can have up to 120 stickers.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AddStickerToSetRequest.UserId">
            <summary>User identifier of sticker set owner</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AddStickerToSetRequest.Name">
            <summary>Sticker set name</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.AddStickerToSetRequest.Sticker">
            <summary>An object with information about the added sticker. If exactly the same sticker had already been added to the set, then the set isn't changed.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.CreateNewStickerSetRequest">
            <summary>Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.CreateNewStickerSetRequest.#ctor">
            <summary>Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateNewStickerSetRequest.UserId">
            <summary>User identifier of created sticker set owner</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateNewStickerSetRequest.Name">
            <summary>Short name of sticker set, to be used in <c>t.me/addstickers/</c> URLs (e.g., <em>animals</em>). Can contain only English letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in <c>"_by_&lt;BotUsername&gt;"</c>. <c>&lt;BotUsername&gt;</c> is case insensitive. 1-64 characters.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateNewStickerSetRequest.Title">
            <summary>Sticker set title, 1-64 characters</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateNewStickerSetRequest.Stickers">
            <summary>A list of 1-50 initial stickers to be added to the sticker set</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateNewStickerSetRequest.StickerType">
            <summary>Type of stickers in the set, pass <see cref="F:Telegram.Bot.Types.Enums.StickerType.Regular">Regular</see>, <see cref="F:Telegram.Bot.Types.Enums.StickerType.Mask">Mask</see>, or <see cref="F:Telegram.Bot.Types.Enums.StickerType.CustomEmoji">CustomEmoji</see>. By default, a regular sticker set is created.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.CreateNewStickerSetRequest.NeedsRepainting">
            <summary>Pass <see langword="true"/> if stickers in the sticker set must be repainted to the color of text when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context; for custom emoji sticker sets only</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.DeleteStickerFromSetRequest">
            <summary>Use this method to delete a sticker from a set created by the bot.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.DeleteStickerFromSetRequest.#ctor">
            <summary>Use this method to delete a sticker from a set created by the bot.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteStickerFromSetRequest.Sticker">
            <summary>File identifier of the sticker</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.DeleteStickerSetRequest">
            <summary>Use this method to delete a sticker set that was created by the bot.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.DeleteStickerSetRequest.#ctor">
            <summary>Use this method to delete a sticker set that was created by the bot.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteStickerSetRequest.Name">
            <summary>Sticker set name</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetAvailableGiftsRequest">
            <summary>Returns the list of gifts that can be sent by the bot to users.<para>Returns: A <see cref="T:Telegram.Bot.Types.GiftList"/> object.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetAvailableGiftsRequest.#ctor">
            <summary>Returns the list of gifts that can be sent by the bot to users.<para>Returns: A <see cref="T:Telegram.Bot.Types.GiftList"/> object.</para></summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetCustomEmojiStickersRequest">
            <summary>Use this method to get information about custom emoji stickers by their identifiers.<para>Returns: An Array of <see cref="T:Telegram.Bot.Types.Sticker"/> objects.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetCustomEmojiStickersRequest.#ctor">
            <summary>Use this method to get information about custom emoji stickers by their identifiers.<para>Returns: An Array of <see cref="T:Telegram.Bot.Types.Sticker"/> objects.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetCustomEmojiStickersRequest.CustomEmojiIds">
            <summary>A list of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetForumTopicIconStickersRequest">
            <summary>Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user.<para>Returns: An Array of <see cref="T:Telegram.Bot.Types.Sticker"/> objects.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetForumTopicIconStickersRequest.#ctor">
            <summary>Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user.<para>Returns: An Array of <see cref="T:Telegram.Bot.Types.Sticker"/> objects.</para></summary>
        </member>
        <member name="T:Telegram.Bot.Requests.GetStickerSetRequest">
            <summary>Use this method to get a sticker set.<para>Returns: A <see cref="T:Telegram.Bot.Types.StickerSet"/> object is returned.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.GetStickerSetRequest.#ctor">
            <summary>Use this method to get a sticker set.<para>Returns: A <see cref="T:Telegram.Bot.Types.StickerSet"/> object is returned.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.GetStickerSetRequest.Name">
            <summary>Name of the sticker set</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.ReplaceStickerInSetRequest">
            <summary>Use this method to replace an existing sticker in a sticker set with a new one. The method is equivalent to calling <see cref="M:Telegram.Bot.TelegramBotClientExtensions.DeleteStickerFromSet(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Threading.CancellationToken)">DeleteStickerFromSet</see>, then <see cref="M:Telegram.Bot.TelegramBotClientExtensions.AddStickerToSet(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,Telegram.Bot.Types.InputSticker,System.Threading.CancellationToken)">AddStickerToSet</see>, then <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerPositionInSet(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Int32,System.Threading.CancellationToken)">SetStickerPositionInSet</see>.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.ReplaceStickerInSetRequest.#ctor">
            <summary>Use this method to replace an existing sticker in a sticker set with a new one. The method is equivalent to calling <see cref="M:Telegram.Bot.TelegramBotClientExtensions.DeleteStickerFromSet(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Threading.CancellationToken)">DeleteStickerFromSet</see>, then <see cref="M:Telegram.Bot.TelegramBotClientExtensions.AddStickerToSet(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,Telegram.Bot.Types.InputSticker,System.Threading.CancellationToken)">AddStickerToSet</see>, then <see cref="M:Telegram.Bot.TelegramBotClientExtensions.SetStickerPositionInSet(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.InputFileId,System.Int32,System.Threading.CancellationToken)">SetStickerPositionInSet</see>.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ReplaceStickerInSetRequest.UserId">
            <summary>User identifier of the sticker set owner</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ReplaceStickerInSetRequest.Name">
            <summary>Sticker set name</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ReplaceStickerInSetRequest.OldSticker">
            <summary>File identifier of the replaced sticker</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.ReplaceStickerInSetRequest.Sticker">
            <summary>An object with information about the added sticker. If exactly the same sticker had already been added to the set, then the set remains unchanged.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SendGiftRequest">
            <summary>Sends a gift to the given user. The gift can't be converted to Telegram Stars by the user.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SendGiftRequest.#ctor">
            <summary>Sends a gift to the given user. The gift can't be converted to Telegram Stars by the user.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGiftRequest.UserId">
            <summary>Unique identifier of the target user that will receive the gift</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGiftRequest.GiftId">
            <summary>Identifier of the gift</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGiftRequest.Text">
            <summary>Text that will be shown along with the gift; 0-255 characters</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGiftRequest.TextParseMode">
            <summary>Mode for parsing entities in the text. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details. Entities other than <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Bold">Bold</see>, <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Italic">Italic</see>, <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Underline">Underline</see>, <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Strikethrough">Strikethrough</see>, <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Spoiler">Spoiler</see>, and <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.CustomEmoji">CustomEmoji</see> are ignored.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendGiftRequest.TextEntities">
            <summary>A list of special entities that appear in the gift text. It can be specified instead of <see cref="P:Telegram.Bot.Requests.SendGiftRequest.TextParseMode">TextParseMode</see>. Entities other than <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Bold">Bold</see>, <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Italic">Italic</see>, <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Underline">Underline</see>, <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Strikethrough">Strikethrough</see>, <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.Spoiler">Spoiler</see>, and <see cref="F:Telegram.Bot.Types.Enums.MessageEntityType.CustomEmoji">CustomEmoji</see> are ignored.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SendStickerRequest">
            <summary>Use this method to send static .WEBP, <a href="https://telegram.org/blog/animated-stickers">animated</a> .TGS, or <a href="https://telegram.org/blog/video-stickers-better-reactions">video</a> .WEBM stickers.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SendStickerRequest.#ctor">
            <summary>Use this method to send static .WEBP, <a href="https://telegram.org/blog/animated-stickers">animated</a> .TGS, or <a href="https://telegram.org/blog/video-stickers-better-reactions">video</a> .WEBM stickers.<para>Returns: The sent <see cref="T:Telegram.Bot.Types.Message"/> is returned.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendStickerRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendStickerRequest.Sticker">
            <summary>Sticker to send. Pass a FileId as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP sticker from the Internet, or upload a new .WEBP, .TGS, or .WEBM sticker using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a>. Video and animated stickers can't be sent via an HTTP URL.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendStickerRequest.MessageThreadId">
            <summary>Unique identifier for the target message thread (topic) of the forum; for forum supergroups only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendStickerRequest.Emoji">
            <summary>Emoji associated with the sticker; only for just uploaded stickers</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendStickerRequest.DisableNotification">
            <summary>Sends the message <a href="https://telegram.org/blog/channels-2-0#silent-messages">silently</a>. Users will receive a notification with no sound.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendStickerRequest.ProtectContent">
            <summary>Protects the contents of the sent message from forwarding and saving</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendStickerRequest.AllowPaidBroadcast">
            <summary>Pass <see langword="true"/> to allow up to 1000 messages per second, ignoring <a href="https://core.telegram.org/bots/faq#how-can-i-message-all-of-my-bot-39s-subscribers-at-once">broadcasting limits</a> for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendStickerRequest.MessageEffectId">
            <summary>Unique identifier of the message effect to be added to the message; for private chats only</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendStickerRequest.ReplyParameters">
            <summary>Description of the message to reply to</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendStickerRequest.ReplyMarkup">
            <summary>Additional interface options. An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>, <a href="https://core.telegram.org/bots/features#keyboards">custom reply keyboard</a>, instructions to remove a reply keyboard or to force a reply from the user</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SendStickerRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message will be sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetCustomEmojiStickerSetThumbnailRequest">
            <summary>Use this method to set the thumbnail of a custom emoji sticker set.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetCustomEmojiStickerSetThumbnailRequest.#ctor">
            <summary>Use this method to set the thumbnail of a custom emoji sticker set.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetCustomEmojiStickerSetThumbnailRequest.Name">
            <summary>Sticker set name</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetCustomEmojiStickerSetThumbnailRequest.CustomEmojiId">
            <summary>Custom emoji identifier of a sticker from the sticker set; pass an empty string to drop the thumbnail and use the first sticker as the thumbnail.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetStickerEmojiListRequest">
            <summary>Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetStickerEmojiListRequest.#ctor">
            <summary>Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetStickerEmojiListRequest.Sticker">
            <summary>File identifier of the sticker</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetStickerEmojiListRequest.EmojiList">
            <summary>A list of 1-20 emoji associated with the sticker</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetStickerKeywordsRequest">
            <summary>Use this method to change search keywords assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetStickerKeywordsRequest.#ctor">
            <summary>Use this method to change search keywords assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetStickerKeywordsRequest.Sticker">
            <summary>File identifier of the sticker</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetStickerKeywordsRequest.Keywords">
            <summary>A list of 0-20 search keywords for the sticker with total length of up to 64 characters</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetStickerMaskPositionRequest">
            <summary>Use this method to change the <see cref="P:Telegram.Bot.Requests.SetStickerMaskPositionRequest.MaskPosition">mask position</see> of a mask sticker. The sticker must belong to a sticker set that was created by the bot.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetStickerMaskPositionRequest.#ctor">
            <summary>Use this method to change the <see cref="P:Telegram.Bot.Requests.SetStickerMaskPositionRequest.MaskPosition">mask position</see> of a mask sticker. The sticker must belong to a sticker set that was created by the bot.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetStickerMaskPositionRequest.Sticker">
            <summary>File identifier of the sticker</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetStickerMaskPositionRequest.MaskPosition">
            <summary>An object with the position where the mask should be placed on faces. Omit the parameter to remove the mask position.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetStickerPositionInSetRequest">
            <summary>Use this method to move a sticker in a set created by the bot to a specific position.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetStickerPositionInSetRequest.#ctor">
            <summary>Use this method to move a sticker in a set created by the bot to a specific position.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetStickerPositionInSetRequest.Sticker">
            <summary>File identifier of the sticker</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetStickerPositionInSetRequest.Position">
            <summary>New sticker position in the set, zero-based</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetStickerSetThumbnailRequest">
            <summary>Use this method to set the thumbnail of a regular or mask sticker set. The format of the thumbnail file must match the format of the stickers in the set.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetStickerSetThumbnailRequest.#ctor">
            <summary>Use this method to set the thumbnail of a regular or mask sticker set. The format of the thumbnail file must match the format of the stickers in the set.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetStickerSetThumbnailRequest.Name">
            <summary>Sticker set name</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetStickerSetThumbnailRequest.UserId">
            <summary>User identifier of the sticker set owner</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetStickerSetThumbnailRequest.Format">
            <summary>Format of the thumbnail, must be one of <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Static">Static</see> for a <b>.WEBP</b> or <b>.PNG</b> image, <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Animated">Animated</see> for a <b>.TGS</b> animation, or <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Video">Video</see> for a <b>WEBM</b> video</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetStickerSetThumbnailRequest.Thumbnail">
            <summary>A <b>.WEBP</b> or <b>.PNG</b> image with the thumbnail, must be up to 128 kilobytes in size and have a width and height of exactly 100px, or a <b>.TGS</b> animation with a thumbnail up to 32 kilobytes in size (see <a href="https://core.telegram.org/stickers#animation-requirements">https://core.telegram.org/stickers#animation-requirements</a> for animated sticker technical requirements), or a <b>WEBM</b> video with the thumbnail up to 32 kilobytes in size; see <a href="https://core.telegram.org/stickers#video-requirements">https://core.telegram.org/stickers#video-requirements</a> for video sticker technical requirements. Pass a <em>FileId</em> as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using <see cref="T:Telegram.Bot.Types.InputFileStream"/>. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a>. Animated and video sticker set thumbnails can't be uploaded via HTTP URL. If omitted, then the thumbnail is dropped and the first sticker is used as the thumbnail.</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetStickerSetTitleRequest">
            <summary>Use this method to set the title of a created sticker set.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetStickerSetTitleRequest.#ctor">
            <summary>Use this method to set the title of a created sticker set.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetStickerSetTitleRequest.Name">
            <summary>Sticker set name</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetStickerSetTitleRequest.Title">
            <summary>Sticker set title, 1-64 characters</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.UploadStickerFileRequest">
            <summary>Use this method to upload a file with a sticker for later use in the <see cref="M:Telegram.Bot.TelegramBotClientExtensions.CreateNewStickerSet(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InputSticker},System.Nullable{Telegram.Bot.Types.Enums.StickerType},System.Boolean,System.Threading.CancellationToken)">CreateNewStickerSet</see>, <see cref="M:Telegram.Bot.TelegramBotClientExtensions.AddStickerToSet(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,Telegram.Bot.Types.InputSticker,System.Threading.CancellationToken)">AddStickerToSet</see>, or <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ReplaceStickerInSet(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,Telegram.Bot.Types.InputSticker,System.Threading.CancellationToken)">ReplaceStickerInSet</see> methods (the file can be used multiple times).<para>Returns: The uploaded <see cref="T:Telegram.Bot.Types.File"/> on success.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.UploadStickerFileRequest.#ctor">
            <summary>Use this method to upload a file with a sticker for later use in the <see cref="M:Telegram.Bot.TelegramBotClientExtensions.CreateNewStickerSet(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,System.Collections.Generic.IEnumerable{Telegram.Bot.Types.InputSticker},System.Nullable{Telegram.Bot.Types.Enums.StickerType},System.Boolean,System.Threading.CancellationToken)">CreateNewStickerSet</see>, <see cref="M:Telegram.Bot.TelegramBotClientExtensions.AddStickerToSet(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,Telegram.Bot.Types.InputSticker,System.Threading.CancellationToken)">AddStickerToSet</see>, or <see cref="M:Telegram.Bot.TelegramBotClientExtensions.ReplaceStickerInSet(Telegram.Bot.ITelegramBotClient,System.Int64,System.String,System.String,Telegram.Bot.Types.InputSticker,System.Threading.CancellationToken)">ReplaceStickerInSet</see> methods (the file can be used multiple times).<para>Returns: The uploaded <see cref="T:Telegram.Bot.Types.File"/> on success.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.UploadStickerFileRequest.UserId">
            <summary>User identifier of sticker file owner</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.UploadStickerFileRequest.Sticker">
            <summary>A file with the sticker in .WEBP, .PNG, .TGS, or .WEBM format. See <a href="https://core.telegram.org/stickers">https://core.telegram.org/stickers</a> for technical requirements. <a href="https://core.telegram.org/bots/api#sending-files">More information on Sending Files »</a></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.UploadStickerFileRequest.StickerFormat">
            <summary>Format of the sticker, must be one of <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Static">Static</see>, <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Animated">Animated</see>, <see cref="F:Telegram.Bot.Types.Enums.StickerFormat.Video">Video</see></summary>
        </member>
        <member name="T:Telegram.Bot.Requests.SetPassportDataErrorsRequest">
            <summary>Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change).<br/>Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.SetPassportDataErrorsRequest.#ctor">
            <summary>Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change).<br/>Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetPassportDataErrorsRequest.UserId">
            <summary>User identifier</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.SetPassportDataErrorsRequest.Errors">
            <summary>A array describing the errors</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.DeleteMessageRequest">
            <summary>Use this method to delete a message, including service messages, with the following limitations:<br/>- A message can only be deleted if it was sent less than 48 hours ago.<br/>- Service messages about a supergroup, channel, or forum topic creation can't be deleted.<br/>- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.<br/>- Bots can delete outgoing messages in private chats, groups, and supergroups.<br/>- Bots can delete incoming messages in private chats.<br/>- Bots granted <em>CanPostMessages</em> permissions can delete outgoing messages in channels.<br/>- If the bot is an administrator of a group, it can delete any message there.<br/>- If the bot has <em>CanDeleteMessages</em> permission in a supergroup or a channel, it can delete any message there.<br/>Returns <em>True</em> on success.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.DeleteMessageRequest.#ctor">
            <summary>Use this method to delete a message, including service messages, with the following limitations:<br/>- A message can only be deleted if it was sent less than 48 hours ago.<br/>- Service messages about a supergroup, channel, or forum topic creation can't be deleted.<br/>- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.<br/>- Bots can delete outgoing messages in private chats, groups, and supergroups.<br/>- Bots can delete incoming messages in private chats.<br/>- Bots granted <em>CanPostMessages</em> permissions can delete outgoing messages in channels.<br/>- If the bot is an administrator of a group, it can delete any message there.<br/>- If the bot has <em>CanDeleteMessages</em> permission in a supergroup or a channel, it can delete any message there.<br/>Returns <em>True</em> on success.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteMessageRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteMessageRequest.MessageId">
            <summary>Identifier of the message to delete</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.DeleteMessagesRequest">
            <summary>Use this method to delete multiple messages simultaneously. If some of the specified messages can't be found, they are skipped.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.DeleteMessagesRequest.#ctor">
            <summary>Use this method to delete multiple messages simultaneously. If some of the specified messages can't be found, they are skipped.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteMessagesRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.DeleteMessagesRequest.MessageIds">
            <summary>A list of 1-100 identifiers of messages to delete. See <see cref="M:Telegram.Bot.TelegramBotClientExtensions.DeleteMessage(Telegram.Bot.ITelegramBotClient,Telegram.Bot.Types.ChatId,System.Int32,System.Threading.CancellationToken)">DeleteMessage</see> for limitations on which messages can be deleted</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.EditInlineMessageCaptionRequest">
            <summary>Use this method to edit captions of messages.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.EditInlineMessageCaptionRequest.#ctor">
            <summary>Use this method to edit captions of messages.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageCaptionRequest.InlineMessageId">
            <summary>Identifier of the inline message</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageCaptionRequest.Caption">
            <summary>New caption of the message, 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageCaptionRequest.ParseMode">
            <summary>Mode for parsing entities in the message caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageCaptionRequest.CaptionEntities">
            <summary>A list of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Requests.EditInlineMessageCaptionRequest.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageCaptionRequest.ShowCaptionAboveMedia">
            <summary>Pass <see langword="true"/>, if the caption must be shown above the message media. Supported only for animation, photo and video messages.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageCaptionRequest.ReplyMarkup">
            <summary>An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageCaptionRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message to be edited was sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.EditInlineMessageMediaRequest">
            <summary>Use this method to edit animation, audio, document, photo, or video messages, or to add media to text messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded; use a previously uploaded file via its FileId or specify a URL.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.EditInlineMessageMediaRequest.#ctor">
            <summary>Use this method to edit animation, audio, document, photo, or video messages, or to add media to text messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded; use a previously uploaded file via its FileId or specify a URL.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageMediaRequest.InlineMessageId">
            <summary>Identifier of the inline message</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageMediaRequest.Media">
            <summary>An object for a new media content of the message</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageMediaRequest.ReplyMarkup">
            <summary>An object for a new <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageMediaRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message to be edited was sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.EditInlineMessageReplyMarkupRequest">
            <summary>Use this method to edit only the reply markup of messages.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.EditInlineMessageReplyMarkupRequest.#ctor">
            <summary>Use this method to edit only the reply markup of messages.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageReplyMarkupRequest.InlineMessageId">
            <summary>Identifier of the inline message</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageReplyMarkupRequest.ReplyMarkup">
            <summary>An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageReplyMarkupRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message to be edited was sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.EditInlineMessageTextRequest">
            <summary>Use this method to edit text and <a href="https://core.telegram.org/bots/api#games">game</a> messages.<para>Returns: </para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.EditInlineMessageTextRequest.#ctor">
            <summary>Use this method to edit text and <a href="https://core.telegram.org/bots/api#games">game</a> messages.<para>Returns: </para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageTextRequest.InlineMessageId">
            <summary>Identifier of the inline message</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageTextRequest.Text">
            <summary>New text of the message, 1-4096 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageTextRequest.ParseMode">
            <summary>Mode for parsing entities in the message text. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageTextRequest.Entities">
            <summary>A list of special entities that appear in message text, which can be specified instead of <see cref="P:Telegram.Bot.Requests.EditInlineMessageTextRequest.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageTextRequest.LinkPreviewOptions">
            <summary>Link preview generation options for the message</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageTextRequest.ReplyMarkup">
            <summary>An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditInlineMessageTextRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message to be edited was sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.EditMessageCaptionRequest">
            <summary>Use this method to edit captions of messages.<para>Returns: The edited <see cref="T:Telegram.Bot.Types.Message"/> is returned</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.EditMessageCaptionRequest.#ctor">
            <summary>Use this method to edit captions of messages.<para>Returns: The edited <see cref="T:Telegram.Bot.Types.Message"/> is returned</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageCaptionRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageCaptionRequest.MessageId">
            <summary>Identifier of the message to edit</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageCaptionRequest.Caption">
            <summary>New caption of the message, 0-1024 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageCaptionRequest.ParseMode">
            <summary>Mode for parsing entities in the message caption. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageCaptionRequest.CaptionEntities">
            <summary>A list of special entities that appear in the caption, which can be specified instead of <see cref="P:Telegram.Bot.Requests.EditMessageCaptionRequest.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageCaptionRequest.ShowCaptionAboveMedia">
            <summary>Pass <see langword="true"/>, if the caption must be shown above the message media. Supported only for animation, photo and video messages.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageCaptionRequest.ReplyMarkup">
            <summary>An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageCaptionRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message to be edited was sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.EditMessageMediaRequest">
            <summary>Use this method to edit animation, audio, document, photo, or video messages, or to add media to text messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded; use a previously uploaded file via its FileId or specify a URL.<para>Returns: The edited <see cref="T:Telegram.Bot.Types.Message"/> is returned</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.EditMessageMediaRequest.#ctor">
            <summary>Use this method to edit animation, audio, document, photo, or video messages, or to add media to text messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded; use a previously uploaded file via its FileId or specify a URL.<para>Returns: The edited <see cref="T:Telegram.Bot.Types.Message"/> is returned</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageMediaRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageMediaRequest.MessageId">
            <summary>Identifier of the message to edit</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageMediaRequest.Media">
            <summary>An object for a new media content of the message</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageMediaRequest.ReplyMarkup">
            <summary>An object for a new <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageMediaRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message to be edited was sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.EditMessageReplyMarkupRequest">
            <summary>Use this method to edit only the reply markup of messages.<para>Returns: The edited <see cref="T:Telegram.Bot.Types.Message"/> is returned</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.EditMessageReplyMarkupRequest.#ctor">
            <summary>Use this method to edit only the reply markup of messages.<para>Returns: The edited <see cref="T:Telegram.Bot.Types.Message"/> is returned</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageReplyMarkupRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageReplyMarkupRequest.MessageId">
            <summary>Identifier of the message to edit</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageReplyMarkupRequest.ReplyMarkup">
            <summary>An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageReplyMarkupRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message to be edited was sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.EditMessageTextRequest">
            <summary>Use this method to edit text and <a href="https://core.telegram.org/bots/api#games">game</a> messages.<para>Returns: The edited <see cref="T:Telegram.Bot.Types.Message"/> is returned</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.EditMessageTextRequest.#ctor">
            <summary>Use this method to edit text and <a href="https://core.telegram.org/bots/api#games">game</a> messages.<para>Returns: The edited <see cref="T:Telegram.Bot.Types.Message"/> is returned</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageTextRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageTextRequest.MessageId">
            <summary>Identifier of the message to edit</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageTextRequest.Text">
            <summary>New text of the message, 1-4096 characters after entities parsing</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageTextRequest.ParseMode">
            <summary>Mode for parsing entities in the message text. See <a href="https://core.telegram.org/bots/api#formatting-options">formatting options</a> for more details.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageTextRequest.Entities">
            <summary>A list of special entities that appear in message text, which can be specified instead of <see cref="P:Telegram.Bot.Requests.EditMessageTextRequest.ParseMode">ParseMode</see></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageTextRequest.LinkPreviewOptions">
            <summary>Link preview generation options for the message</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageTextRequest.ReplyMarkup">
            <summary>An object for an <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.EditMessageTextRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message to be edited was sent</summary>
        </member>
        <member name="T:Telegram.Bot.Requests.StopPollRequest">
            <summary>Use this method to stop a poll which was sent by the bot.<para>Returns: The stopped <see cref="T:Telegram.Bot.Types.Poll"/> is returned.</para></summary>
        </member>
        <member name="M:Telegram.Bot.Requests.StopPollRequest.#ctor">
            <summary>Use this method to stop a poll which was sent by the bot.<para>Returns: The stopped <see cref="T:Telegram.Bot.Types.Poll"/> is returned.</para></summary>
        </member>
        <member name="P:Telegram.Bot.Requests.StopPollRequest.ChatId">
            <summary>Unique identifier for the target chat or username of the target channel (in the format <c>@channelusername</c>)</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.StopPollRequest.MessageId">
            <summary>Identifier of the original message with the poll</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.StopPollRequest.ReplyMarkup">
            <summary>An object for a new message <a href="https://core.telegram.org/bots/features#inline-keyboards">inline keyboard</a>.</summary>
        </member>
        <member name="P:Telegram.Bot.Requests.StopPollRequest.BusinessConnectionId">
            <summary>Unique identifier of the business connection on behalf of which the message to be edited was sent</summary>
        </member>
        <member name="T:Telegram.Bot.Serialization.CustomJsonDerivedTypeAttribute">
            <summary>Same as <see cref="T:System.Text.Json.Serialization.JsonDerivedTypeAttribute"/> but used for the hack below.
            Necessary because using the built-in attribute will lead to NotSupportedExceptions.</summary>
        </member>
        <member name="M:Telegram.Bot.Serialization.CustomJsonDerivedTypeAttribute.#ctor(System.Type,System.String)">
            <summary>Same as <see cref="T:System.Text.Json.Serialization.JsonDerivedTypeAttribute"/> but used for the hack below.
            Necessary because using the built-in attribute will lead to NotSupportedExceptions.</summary>
        </member>
        <member name="T:Telegram.Bot.Serialization.CustomJsonPolymorphicAttribute">
            <summary>When placed on a type, indicates that the type should be serialized polymorphically.</summary>
        </member>
        <member name="M:Telegram.Bot.Serialization.CustomJsonPolymorphicAttribute.#ctor(System.String)">
            <summary>When placed on a type, indicates that the type should be serialized polymorphically.</summary>
        </member>
        <member name="P:Telegram.Bot.Serialization.CustomJsonPolymorphicAttribute.TypeDiscriminatorPropertyName">
            <summary>Gets or sets a custom type discriminator property name for the polymorhic type. Uses '$type' property name if unset.</summary>
        </member>
        <member name="T:Telegram.Bot.Serialization.PolymorphicJsonConverter`1">
            <summary>
            Supports deserializing JSON payloads that use polymorphism but don't specify $type as the first field.
            Modified from https://github.com/dotnet/runtime/issues/72604#issuecomment-1440708052.
            </summary>
        </member>
        <member name="T:Telegram.Bot.JsonBotAPI">
            <summary>Static class offering JsonSerializerOptions configured for Bot API serialization</summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotAPI.Options">
            <summary>JsonSerializerOptions configured for Bot API serialization</summary>
        </member>
        <member name="M:Telegram.Bot.JsonBotAPI.Configure(System.Text.Json.JsonSerializerOptions)">
            <summary>Configure JsonSerializerOptions for Bot API serialization</summary>
            <param name="options">JsonSerializerOptions to configure</param>
        </member>
        <member name="T:Telegram.Bot.JsonBotSerializerContext">
            <summary>JsonSerializerContext for Bot API serialization with source generation</summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Boolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.NullableBoolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Double">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.NullableDouble">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.IEnumerableIEnumerableInlineKeyboardButton">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.IEnumerableIEnumerableKeyboardButton">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.IEnumerableBotCommand">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.IEnumerableUpdateType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.IEnumerableIAlbumInputMedia">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.IEnumerableInlineQueryResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.IEnumerableInputPaidMedia">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.IEnumerableInputPollOption">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.IEnumerableInputSticker">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.IEnumerableMessageEntity">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.IEnumerablePassportElementError">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.IEnumerableLabeledPrice">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.IEnumerableShippingOption">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.IEnumerableReactionType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.IEnumerableInlineKeyboardButton">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.IEnumerableKeyboardButton">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.IEnumerableInt32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.IEnumerableString">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.DateTime">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.NullableDateTime">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.AddStickerToSetRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.AnswerCallbackQueryRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.AnswerInlineQueryRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.AnswerPreCheckoutQueryRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.AnswerShippingQueryRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.AnswerWebAppQueryRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApproveChatJoinRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BanChatMemberRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BanChatSenderChatRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.CloseForumTopicRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.CloseGeneralForumTopicRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.CloseRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.CopyMessageRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.CopyMessagesRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.CreateChatInviteLinkRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.CreateChatSubscriptionInviteLinkRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.CreateForumTopicRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.CreateInvoiceLinkRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.CreateNewStickerSetRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.DeclineChatJoinRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.DeleteChatPhotoRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.DeleteChatStickerSetRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.DeleteForumTopicRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.DeleteMessageRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.DeleteMessagesRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.DeleteMyCommandsRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.DeleteStickerFromSetRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.DeleteStickerSetRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.DeleteWebhookRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.EditChatInviteLinkRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.EditChatSubscriptionInviteLinkRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.EditForumTopicRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.EditGeneralForumTopicRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.EditInlineMessageCaptionRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.EditInlineMessageLiveLocationRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.EditInlineMessageMediaRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.EditInlineMessageReplyMarkupRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.EditInlineMessageTextRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.EditMessageCaptionRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.EditMessageLiveLocationRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.EditMessageMediaRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.EditMessageReplyMarkupRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.EditMessageTextRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.EditUserStarSubscriptionRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ExportChatInviteLinkRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ForwardMessageRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ForwardMessagesRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetAvailableGiftsRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetBusinessConnectionRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetChatAdministratorsRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetChatMemberCountRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetChatMemberRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetChatMenuButtonRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetChatRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetCustomEmojiStickersRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetFileRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetForumTopicIconStickersRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetGameHighScoresRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetInlineGameHighScoresRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetMeRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetMyCommandsRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetMyDefaultAdministratorRightsRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetMyDescriptionRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetMyNameRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetMyShortDescriptionRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetStarTransactionsRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetStickerSetRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetUpdatesRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetUserChatBoostsRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetUserProfilePhotosRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GetWebhookInfoRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.HideGeneralForumTopicRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.LeaveChatRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.LogOutRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PinChatMessageRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PromoteChatMemberRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.RefundStarPaymentRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ReopenForumTopicRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ReopenGeneralForumTopicRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ReplaceStickerInSetRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.RestrictChatMemberRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.RevokeChatInviteLinkRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SavePreparedInlineMessageRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SendAnimationRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SendAudioRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SendChatActionRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SendContactRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SendDiceRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SendDocumentRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SendGameRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SendGiftRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SendInvoiceRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SendLocationRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SendMediaGroupRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SendMessageRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SendPaidMediaRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SendPhotoRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SendPollRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SendStickerRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SendVenueRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SendVideoNoteRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SendVideoRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SendVoiceRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetChatAdministratorCustomTitleRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetChatDescriptionRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetChatMenuButtonRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetChatPermissionsRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetChatPhotoRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetChatStickerSetRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetChatTitleRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetCustomEmojiStickerSetThumbnailRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetGameScoreRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetInlineGameScoreRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetMessageReactionRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetMyCommandsRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetMyDefaultAdministratorRightsRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetMyDescriptionRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetMyNameRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetMyShortDescriptionRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetPassportDataErrorsRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetStickerEmojiListRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetStickerKeywordsRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetStickerMaskPositionRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetStickerPositionInSetRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetStickerSetThumbnailRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetStickerSetTitleRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetUserEmojiStatusRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SetWebhookRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.StopInlineMessageLiveLocationRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.StopMessageLiveLocationRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.StopPollRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.UnbanChatMemberRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.UnbanChatSenderChatRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.UnhideGeneralForumTopicRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.UnpinAllChatMessagesRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.UnpinAllForumTopicMessagesRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.UnpinAllGeneralForumTopicMessagesRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.UnpinChatMessageRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.UploadStickerFileRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Animation">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseBoolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseBotCommandArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseBotDescription">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseBotName">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseBotShortDescription">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseBusinessConnection">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseChatAdministratorRights">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseChatFullInfo">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseChatInviteLink">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseChatMemberArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseChatMember">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseFile">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseForumTopic">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseGameHighScoreArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseGiftList">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseMenuButton">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseMessageArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseMessageIdArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseMessageId">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseStarTransactions">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponsePoll">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponsePreparedInlineMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseSentWebAppMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseStickerArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseStickerSet">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseUpdateArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseUser">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseUserChatBoosts">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseUserProfilePhotos">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseWebhookInfo">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseInt32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ApiResponseString">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Audio">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BackgroundFill">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BackgroundFillFreeformGradient">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BackgroundFillGradient">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BackgroundFillSolid">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BackgroundType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BackgroundTypeChatTheme">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BackgroundTypeFill">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BackgroundTypePattern">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BackgroundTypeWallpaper">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Birthdate">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BotCommand">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BotCommandArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BotCommandScope">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BotCommandScopeAllChatAdministrators">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BotCommandScopeAllGroupChats">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BotCommandScopeAllPrivateChats">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BotCommandScopeChat">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BotCommandScopeChatAdministrators">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BotCommandScopeChatMember">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BotCommandScopeDefault">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BotDescription">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BotName">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BotShortDescription">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BusinessConnection">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BusinessIntro">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BusinessLocation">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BusinessMessagesDeleted">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BusinessOpeningHours">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BusinessOpeningHoursInterval">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BusinessOpeningHoursIntervalArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.CallbackGame">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.CallbackQuery">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Chat">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatAdministratorRights">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatBackground">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatBoost">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatBoostArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatBoostAdded">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatBoostRemoved">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatBoostSource">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatBoostSourceGiftCode">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatBoostSourceGiveaway">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatBoostSourcePremium">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatBoostUpdated">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatFullInfo">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatId">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatInviteLink">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatJoinRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatLocation">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatMember">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatMemberArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatMemberAdministrator">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatMemberBanned">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatMemberLeft">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatMemberMember">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatMemberOwner">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatMemberRestricted">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatMemberUpdated">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatPermissions">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatPhoto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatShared">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChosenInlineResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Contact">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.CopyTextButton">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Dice">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Document">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BackgroundFillType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BackgroundTypeKind">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.BotCommandScopeType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatAction">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatBoostSourceType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatMemberStatus">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ChatType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.NullableChatType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputMediaType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputPaidMediaType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MaskPositionPoint">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MenuButtonType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MessageEntityType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MessageOriginType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PaidMediaType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ParseMode">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PollType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.NullablePollType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ReactionTypeKind">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.StickerFormat">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.StickerType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.NullableStickerType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.UpdateType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.UpdateTypeArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ExternalReplyInfo">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.File">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.FileBase">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ForumTopic">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ForumTopicClosed">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ForumTopicCreated">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ForumTopicEdited">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ForumTopicReopened">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Game">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GameHighScore">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GameHighScoreArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GeneralForumTopicHidden">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GeneralForumTopicUnhidden">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Gift">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GiftArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GiftList">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Giveaway">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GiveawayCompleted">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GiveawayCreated">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GiveawayWinners">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.IAlbumInputMedia">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQuery">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultArticle">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultAudio">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultCachedAudio">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultCachedDocument">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultCachedGif">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultCachedMpeg4Gif">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultCachedPhoto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultCachedSticker">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultCachedVideo">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultCachedVoice">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultContact">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultDocument">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultGame">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultGif">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultLocation">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultMpeg4Gif">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultPhoto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultsButton">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultVenue">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultVideo">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineQueryResultVoice">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputContactMessageContent">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputInvoiceMessageContent">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputLocationMessageContent">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputMessageContent">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputTextMessageContent">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputVenueMessageContent">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputFile">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputFileId">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputFileStream">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputMedia">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputMediaAnimation">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputMediaAudio">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputMediaDocument">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputMediaPhoto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputMediaVideo">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputPaidMedia">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputPaidMediaPhoto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputPaidMediaVideo">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputPollOption">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InputSticker">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.LinkPreviewOptions">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Location">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.LoginUrl">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MaskPosition">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MenuButton">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MenuButtonCommands">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MenuButtonDefault">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MenuButtonWebApp">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Message">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MessageArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MessageAutoDeleteTimerChanged">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MessageEntity">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MessageEntityArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MessageId">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MessageIdArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MessageOrigin">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MessageOriginChannel">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MessageOriginChat">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MessageOriginHiddenUser">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MessageOriginUser">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MessageReactionCountUpdated">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.MessageReactionUpdated">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PaidMedia">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PaidMediaArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PaidMediaInfo">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PaidMediaPhoto">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PaidMediaPreview">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PaidMediaVideo">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.EncryptedCredentials">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.EncryptedPassportElement">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.EncryptedPassportElementArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.EncryptedPassportElementType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PassportData">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PassportElementError">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PassportElementErrorDataField">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PassportElementErrorFile">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PassportElementErrorFiles">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PassportElementErrorFrontSide">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PassportElementErrorReverseSide">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PassportElementErrorSelfie">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PassportElementErrorSource">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PassportElementErrorTranslationFile">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PassportElementErrorTranslationFiles">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PassportElementErrorUnspecified">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PassportFile">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PassportFileArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.AffiliateInfo">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Invoice">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.LabeledPrice">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.LabeledPriceArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.OrderInfo">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PaidMediaPurchased">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PreCheckoutQuery">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.RefundedPayment">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.RevenueWithdrawalState">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.RevenueWithdrawalStateFailed">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.RevenueWithdrawalStatePending">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.RevenueWithdrawalStateSucceeded">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.RevenueWithdrawalStateType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ShippingAddress">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ShippingOption">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ShippingQuery">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.StarTransaction">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.StarTransactionArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.StarTransactions">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SuccessfulPayment">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.TransactionPartner">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.TransactionPartnerAffiliateProgram">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.TransactionPartnerFragment">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.TransactionPartnerOther">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.TransactionPartnerTelegramAds">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.TransactionPartnerTelegramApi">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.TransactionPartnerType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.TransactionPartnerUser">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PhotoSize">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PhotoSizeArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PhotoSizeArrayArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Poll">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PollAnswer">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PollOption">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PollOptionArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.PreparedInlineMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ProximityAlertTriggered">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ReactionCount">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ReactionCountArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ReactionType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ReactionTypeArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ReactionTypeCustomEmoji">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ReactionTypeEmoji">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ReactionTypePaid">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ForceReplyMarkup">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineKeyboardButton">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.InlineKeyboardMarkup">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.IReplyMarkup">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.KeyboardButton">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.KeyboardButtonPollType">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.KeyboardButtonRequestChat">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.KeyboardButtonRequestUsers">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ReplyKeyboardMarkup">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ReplyKeyboardRemove">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ReplyParameters">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.ResponseParameters">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SentWebAppMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SharedUser">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SharedUserArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Sticker">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.StickerArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.StickerSet">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Story">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.SwitchInlineQueryChosenChat">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.TextQuote">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Update">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.UpdateArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.User">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.UserArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.UserChatBoosts">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.UserProfilePhotos">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.UsersShared">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Venue">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Video">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.VideoChatEnded">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.VideoChatParticipantsInvited">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.VideoChatScheduled">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.VideoChatStarted">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.VideoNote">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Voice">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.WebAppData">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.WebAppInfo">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.WebhookInfo">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.WriteAccessAllowed">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Int32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.NullableInt32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Int32Array">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Int64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.NullableInt64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.StringArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Telegram.Bot.JsonBotSerializerContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Telegram.Bot.JsonBotSerializerContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Telegram.Bot.JsonBotSerializerContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Telegram.Bot.JsonBotSerializerContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Telegram.Bot.TelegramBotClient">
            <summary>A client to use the Telegram Bot API</summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClient.BotId">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClient.LocalBotServer">
            <inheritdoc/>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClient.Timeout">
            <inheritdoc/>
        </member>
        <member name="E:Telegram.Bot.TelegramBotClient.OnUpdate">
            <summary>Handler to be called when there is an incoming update</summary>
        </member>
        <member name="E:Telegram.Bot.TelegramBotClient.OnMessage">
            <summary>Handler to be called when there is an incoming message or edited message</summary>
        </member>
        <member name="E:Telegram.Bot.TelegramBotClient.OnError">
            <summary>Handler to be called when there was a polling error or an exception in your handlers</summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClient.GlobalCancelToken">
            <summary>Global cancellation token</summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClient.ExceptionsParser">
            <inheritdoc/>
        </member>
        <member name="E:Telegram.Bot.TelegramBotClient.OnMakingApiRequest">
            <inheritdoc/>
        </member>
        <member name="E:Telegram.Bot.TelegramBotClient.OnApiResponseReceived">
            <inheritdoc/>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClient.#ctor(Telegram.Bot.TelegramBotClientOptions,System.Net.Http.HttpClient,System.Threading.CancellationToken)">
            <summary>Create a new <see cref="T:Telegram.Bot.TelegramBotClient"/> instance.</summary>
            <param name="options">Configuration for <see cref="T:Telegram.Bot.TelegramBotClient" /></param>
            <param name="httpClient">A custom <see cref="T:System.Net.Http.HttpClient"/></param>
            <param name="cancellationToken">Global cancellation token</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClient.#ctor(System.String,System.Net.Http.HttpClient,System.Threading.CancellationToken)">
            <summary>Create a new <see cref="T:Telegram.Bot.TelegramBotClient"/> instance.</summary>
            <param name="token">The bot token</param>
            <param name="httpClient">A custom <see cref="T:System.Net.Http.HttpClient"/></param>
            <param name="cancellationToken">Global cancellation token</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="token"/> format is invalid</exception>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClient.MakeRequestAsync``1(Telegram.Bot.Requests.Abstractions.IRequest{``0},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClient.MakeRequest``1(Telegram.Bot.Requests.Abstractions.IRequest{``0},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClient.SendRequest``1(Telegram.Bot.Requests.Abstractions.IRequest{``0},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClient.TestApi(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClient.GetFileIdType(System.String)">
            <summary>Get type of the file referenced by a FileId string</summary>
            <param name="fileId">Identifier of file (Base64)</param>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClient.DownloadFile(System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Telegram.Bot.TelegramBotClientOptions">
            <summary>This class is used to provide configuration for <see cref="T:Telegram.Bot.TelegramBotClient"/></summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClientOptions.Token">
            <summary>API token</summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClientOptions.BaseUrl">
            <summary>Used to change base url to your private bot api server URL. It looks like http://localhost:8081. Path, query and fragment will be omitted if present.</summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClientOptions.UseTestEnvironment">
            <summary>Indicates that test environment will be used</summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClientOptions.BotId">
            <summary>Unique identifier for the bot from bot token, extracted from the first part of the bot token.
            Token format is not public API so this property is optional and may stop working in the future if Telegram changes it's token format.</summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClientOptions.LocalBotServer">
            <summary>Indicates that local bot server will be used</summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClientOptions.BaseFileUrl">
            <summary>Contains base url for downloading files</summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClientOptions.BaseRequestUrl">
            <summary>Contains base url for making requests</summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClientOptions.RetryThreshold">
            <summary>Automatic retry of failed requests "Too Many Requests: retry after X" when X is less or equal to RetryThreshold</summary>
        </member>
        <member name="P:Telegram.Bot.TelegramBotClientOptions.RetryCount">
            <summary><see cref="P:Telegram.Bot.TelegramBotClientOptions.RetryThreshold">Automatic retry</see> will be attempted for up to RetryCount requests</summary>
        </member>
        <member name="M:Telegram.Bot.TelegramBotClientOptions.#ctor(System.String,System.String,System.Boolean)">
            <summary>Create a new <see cref="T:Telegram.Bot.TelegramBotClientOptions"/> instance.</summary>
            <param name="token">API token</param>
            <param name="baseUrl">Used to change base URL to your private Bot API server URL. It looks like http://localhost:8081. Path, query and fragment will be omitted if present.</param>
            <param name="useTestEnvironment">Indicates that test environment will be used</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="token"/> or <paramref name="baseUrl"/> format is invalid</exception>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.TelegramBotConfigureExtensions">
            <summary>Helpers for WebApp service configuration</summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.TelegramBotConfigureExtensions.ConfigureTelegramBot``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{``0,System.Text.Json.JsonSerializerOptions})">
            <summary>Configure WebAPI JsonOptions for Telegram.Bot (de)serialization</summary>
            <param name="services">The IServiceCollection to add the services to.</param>
            <param name="opt">Accessor to JsonSerializerOptions</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.TelegramBotConfigureExtensions.ConfigureTelegramBotMvc(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>Configure ASP.NET MVC Json (de)serialization for Telegram.Bot types</summary>
            <param name="services">The IServiceCollection to add the services to.</param>
        </member>
    </members>
</doc>
